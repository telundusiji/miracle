-- MySQL dump 10.14  Distrib 5.5.56-MariaDB, for Linux (x86_64)
--
-- Host: localhost    Database: miraclev120180129
-- ------------------------------------------------------
-- Server version	5.5.56-MariaDB

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `article`
--

DROP TABLE IF EXISTS `article`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `article` (
  `article_id` varchar(32) NOT NULL,
  `taxonomy_id` varchar(32) DEFAULT NULL,
  `gmt_create` datetime NOT NULL,
  `gmt_modified` datetime NOT NULL,
  `title` varchar(256) NOT NULL COMMENT '±êÌâ',
  `text` longtext COMMENT 'ÄÚÈÝ',
  `summary` varchar(256) DEFAULT NULL COMMENT 'ÕªÒª',
  `status` varchar(32) DEFAULT NULL COMMENT '×´Ì¬',
  `view_count` int(10) unsigned DEFAULT '0' COMMENT '·ÃÎÊÁ¿',
  `taxonomy_title` varchar(128) DEFAULT NULL COMMENT '·ÖÀà±êÌâ',
  `tags` varchar(256) DEFAULT NULL,
  PRIMARY KEY (`article_id`),
  KEY `FK_Reference_1` (`taxonomy_id`),
  CONSTRAINT `FK_Reference_1` FOREIGN KEY (`taxonomy_id`) REFERENCES `taxonomy` (`taxonomy_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `article`
--

LOCK TABLES `article` WRITE;
/*!40000 ALTER TABLE `article` DISABLE KEYS */;
INSERT INTO `article` VALUES ('ARTICLE20180129072747294','TAX20180129062052324','2018-01-29 19:27:47','2019-01-07 00:30:00','Java的代理模式（二）jDK的动态代理','###Java的代理模式（二）jDK的动态代理\n\n\n在上一篇文章中说道静态代理的一些不方便不灵活，本次介绍jdk的动态代理。\nJDK的动态代理主要用到java.lang.reflect.Proxy类和java.lang.reflect.InvocationHandler接口。其中Proxy类主要是用来动态的生成代理类，InvocationHandler接口中定义了一个方法invoke（）这个方法就是利用反射机制来代理需要被代理的方法。\n先学会使用JDK提供的类和接口来实现动态代理，咱们后面再看其原理。\n\n###一、实现JDK动态代理\n被代理类实现的接口:\n```\n//Girl.java\npublic interface Girl {\n    boolean date(int money);\n}\n\n```\n被代理类：\n```\n//GirlZhang.java 实现了Girl接口\npublic class GirlZhang implements Girl {\n    public boolean date(int money) {\n        if(money>100000){\n            System.out.println(\"可以约会!\");\n            return true;\n        }\n        System.out.println(\"太穷不约会！\");\n        return false;\n    }\n}\n```\n实现InvocationHandler接口编写代理操作：\n```\n//InvocationHandlerImp.java 实现InvocationHandler接口，\n//在invoke方法中使用反射机制执行被代理类的被代理方法。\npublic class InvocationHandlerImp implements InvocationHandler {\n    private Object girlZhang;\n\n    public InvocationHandlerImp(Object girlZhang){\n        super();\n        this.girlZhang=girlZhang;\n    }\n\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        doSomethingBefor();\n        Object result = null;\n        try {\n            result = method.invoke(girlZhang,args);\n        }catch (InvocationTargetException e){\n            throw e.getCause();\n        }\n        doSomethingAfter();\n        return result;\n    }\n\n    private void doSomethingAfter() {\n        System.out.println(\"约会完后，介绍人干一些事\");\n    }\n\n    private void doSomethingBefor() {\n        System.out.println(\"约会前，介绍人干一些事\");\n    }\n}\n```\n主方法调用使用：\n```\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        GirlZhang girlZhang = new GirlZhang();\n        InvocationHandlerImp invocationHandlerImp = new InvocationHandlerImp(girlZhang);\n        Girl proxy = (Girl) Proxy.newProxyInstance(girlZhang.getClass().getClassLoader(),girlZhang.getClass().getInterfaces(),invocationHandlerImp);\n        proxy.date(1000000);\n    }\n}\n```\n按上述操作就可以实现基于JDK的动态代理，下面讲一下JDK动态代理的实现过程。\n\n###二、JDK动态代理的过程\nJDK的动态代理概括的来说就是使用程序来生成class字节码对象，直接将生成的class加载到JVM的内存中（常规的java的字节码文件来源分为三种：本地硬盘的class文件、内存中的class、网络。动态代理使用的就是第二种方式，直接生成加载到内存中），再实例化代理对象进行代理。\n**下面从调用的过程来一步一步看源码。（JDK1.6）**\n\n- **1、Proxy的newProxyInstance(）方法**\n\n		此方法有三个参数：\n			ClassLoader：被代理类的类加载器\n			Class<?>[]：被代理类实现的接口\n			InvocationHandler：实现InvocationHandler接口的类的实例\n		返回值：\n			Object：动态生成的代理对象\n		打开这个方法源码其中有三行是核心源码：\n		\n		#581  Class cl = getProxyClass(loader, interfaces);\n		#587  Constructor cons = cl.getConstructor(constructorParams);\n	    #588  return (Object) cons.newInstance(new Object[] { h });\n		\n		581行代码是调用getProxyClass（）方法生成代理类的Class对象，其实就是生成字节码文件，只不过这个字节码文件不写入文件罢了。下面详细介绍这个方法。\n\n		587行代码是通过class对象获取到这个类的构造方法\n\n		588行代码是通过构造方法和参数直接生成cl类的实例对象\n		\n- **2、Proxy的getProxyClass(）方法**\n\n        此方法有两个参数（其实就是从newProxyInstance（）方法传入）：\n	        ClassLoader：被代理类的类加载器\n			Class<?>[]：被代理类实现的接口\n		返回值：\n			Class对象（代理类的字节码对象）\n		这个方法的核心代码：\n		#501  byte[] proxyClassFile =	ProxyGenerator.generateProxyClass(\n		#502      proxyName, interfaces);\n		\n		这行代码是调用代理类构造器根据代理类的类名和接口将字节码文件生成出来。在这代码之前的代码主要是检查参数的正确性和缓存中是否已经有了这个class的缓存，所以这里就不在赘述前面的代码。下面详细介绍这个方法。\n		\n		#504  proxyClass = defineClass0(loader, proxyName,\n		#505	proxyClassFile, 0, proxyClassFile.length);\n\n		这行代码是调用一个方法将class对象的字节数组转换成class对象，由于这个地方调用的是一个native方法所以源码就无法查看。\n\n- **3、ProxyGenerator的generateProxyClass(）方法**\n\n        此方法有两个参数：\n	        String：将要构造类的类名\n	        Class[]：该类实现的接口\n	    返回值：\n			 byte[]：生成的类的字节数组\n		核心代码：\n		#504  final byte[] var3 = var2.generateClassFile();\n		\n		504行代码调用的这个方法其实就是按照字节码文件的生成规范生成class文件，这个方法的具体就不在看了，因为这个生成的规范，本人也不懂，感兴趣的可以继续深入研究。\n\n到此为止将这个动态代理生成代理对象的过程跟了一遍。可以描述为：newProxyInstance(）方法中调用getProxyClass(）方法得到class对象，使用class对象获取构造方法，使用构造方法将class实例化成代理对象将其返回。\n\n###三、查看动态生成的代理类的源码\n	//可以通过这种方法将class写入文件中，再使用反编译工具就可以看到源码\n	OutputStream outputStream = new FileOutputStream(\"D:\\\\$proxy0.class\");\n        outputStream.write(ProxyGenerator.generateProxyClass(\"$proxy0\",new Class[]{Girl.class}));\n\n\n在源码中可以看到代理方法，这个代理类是继承Proxy类，实现了Girl接口\n```\n//代理的方法\npublic final boolean date(int paramInt)\n    throws \n  {\n    try\n    {\n	  //直接调用h（InvocationHandlerImp对象）的invoke方法\n	  //其实h就是在newProxyInstance（）方法中588行构造对象时传入的\n	  //就这样实现了代理\n      return ((Boolean)this.h.invoke(this, m3, new Object[] { Integer.valueOf(paramInt) })).booleanValue();\n    }\n    catch (Error|RuntimeException localError)\n    {\n      throw localError;\n    }\n    catch (Throwable localThrowable)\n    {\n      throw new UndeclaredThrowableException(localThrowable);\n    }\n  }\n```','Java的代理模式（二）jDK的动态代理在上一篇文章中说道静态代理的一些不方便不灵活，本次介绍jdk的动态代理。JDK的动态代理主要用到java.lang.reflect.Proxy类和java.lang.reflect.InvocationHandler接口。其中Proxy类主要是用来动态的生成代理类，InvocationHandler接口中定义了一个方法invoke（）这个方法就是利用反射机制......','正常',122,'java','java,代理,动态'),('ARTICLE20180210042609451','TAX20180129062052324','2018-02-10 16:26:09','2019-01-07 00:30:00','Java的代理模式（一）静态代理','静态代理的有两种方式：1.继承被代理类；2.实现被代理类的接口\n\n\n\n####方式一：继承被代理类实现代理模式\n\n\n\n类图如下（画图软件画的，画的不好，能看懂就好）\n[![](http://img.blog.csdn.net/20170816152658837?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdGVsdW5kdXNpamk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)](http://img.blog.csdn.net/20170816152658837?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdGVsdW5kdXNpamk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n接口代码如下（Girl.java）：\n\n\n```\npublic interface Girl {\n    boolean date(int money);\n}\n```\n\n\n被代理类（GirlZhang.java）：\n\n\n```\n//实现Girl接口\npublic class GirlZhang implements Girl {\n    public boolean date(int money) {\n        if(money>100000){\n            System.out.println(\"可以约会!\");\n            return true;\n        }\n        System.out.println(\"太穷不约会！\");\n        return false;\n    }\n}\n```\n\n\n代理类（Proxy1.java）:\n\n\n```\n//继承GirlZhang类，重写父类方法实现代理\npublic class Proxy1 extends GirlZhang {\n    public boolean date(int money) {\n        doSomethingBefor();\n        boolean flag = super.date(money);\n        doSomethingAfter();\n        return flag;\n    }\n\n    private void doSomethingAfter() {\n        System.out.println(\"约会完，代理人干一些事情\");\n    }\n\n    private void doSomethingBefor() {\n        System.out.println(\"约会前，代理人准备工作\");\n    }\n}\n```\n\n主方法测试（Main.java）：\n\n\n```\npublic class Main {\n    public static void main(String[] args){\n        Proxy1 proxy1 = new Proxy1();\n        proxy1.date(1000000);\n    }\n}\n```\n\n这种继承理类实现的静态代理，有一个很明显得缺陷，就是如果要的继续给被代理类添加拓展的新的功能，就需要继续继承上一个代理类，这样拓展次数过多时，继承次数就太\n\n多，不利于管理，性能也不好。\n\n\n\n####方式二：实现被代理类的接口\n\n\n\n类图如下：\n[![](http://img.blog.csdn.net/20170816160020608?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdGVsdW5kdXNpamk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)](http://img.blog.csdn.net/20170816160020608?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdGVsdW5kdXNpamk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n\n\n\n接口和被代理类代码同第一种方式，这里不再赘述。\n\n\n\n代理类（Proxy2.java）：\n\n\n```\n//实现Girl接口\npublic class Proxy2 implements Girl{\n    private Girl girl;\n    public Proxy2(Girl girl){\n        this.girl=girl;\n    }\n    public boolean date(int money) {\n        doSomethingBefor();\n        boolean flag = girl.date(money);\n        doSomethingAfter();\n        return false;\n    }\n\n    private void doSomethingAfter() {\n        System.out.println(\"约会完，代理人干一些事情\");\n    }\n\n    private void doSomethingBefor() {\n        System.out.println(\"约会前，代理人准备工作\");\n    }\n\n}\n```\n\n\n主方法测试（Main.java）：\n\n\n```\npublic class Main {\n    public static void main(String[] args){\n        Proxy2 proxy2 = new Proxy2(new GirlZhang());\n        proxy2.date(1000000);\n    }\n}\n```\n\n\n使用实现接口的方法实现静态代理，对比使用继承来实现代理，要好一些，不用多重继承，但是如果要拓展功能，仍然需要建立许多的实现类，来添加新的功能，这对编码也带\n\n了一些不便。所以要更好的处理这些东西，就需要使用动态代理了。','静态代理的有两种方式：1.继承被代理类；2.实现被代理类的接口方式一：继承被代理类实现代理模式类图如下（画图软件画的，画的不好，能看懂就好）接口代码如下（Girl.java）：public interface Girl {    boolean date(int money);}被代理类（GirlZhang.java）：//实现Girl接口public class GirlZhan......','正常',227,'java','java,代理,静态'),('ARTICLE20180210043704870','TAX20180210043408433','2018-02-10 16:37:04','2019-01-07 00:30:00','linux下mariadb安装初始化，字符集设置','Linux下安装Mariadb，我是使用的centos 7.1系统，在yum源配置好的情况下\r\n\r\n####1、yum search mariadb\r\n\r\n搜索结果如下\r\n\r\n==================================================================================== N/S matched: mariadb =====================================================================================\r\nmariadb-bench.x86_64 : MariaDB benchmark scripts and data\r\nmariadb-devel.i686 : Files for development of MariaDB/MySQL applications\r\nmariadb-devel.x86_64 : Files for development of MariaDB/MySQL applications\r\nmariadb-embedded.i686 : MariaDB as an embeddable library\r\nmariadb-embedded.x86_64 : MariaDB as an embeddable library\r\nmariadb-embedded-devel.i686 : Development files for MariaDB as an embeddable library\r\nmariadb-embedded-devel.x86_64 : Development files for MariaDB as an embeddable library\r\nmariadb-libs.x86_64 : The shared libraries required for MariaDB/MySQL clients\r\nmariadb-libs.i686 : The shared libraries required for MariaDB/MySQL clients\r\nmariadb-server.x86_64 : The MariaDB server and related files\r\nmariadb.x86_64 : A community developed branch of MySQL\r\nmariadb-test.x86_64 : The test suite distributed with MariaD\r\npercona-xtrabackup.x86_64 : Online backup for InnoDB/XtraDB in MySQL, Percona Server and MariaDB\r\n  Name and summary matches only, use \"search all\" for everything.\r\n####2、然后安装mariadb-server.x86_64   mariadb.x86_64这两个包（一个是服务一个是客户端，不同的系统名字可能不一样）\r\n\r\nyum install mariadb.x86_64\r\n\r\nyum install mariadb-server.x86_64\r\n\r\n或者 yum groupinstall -y mariadb mariadb-server\r\n\r\n或者直接yum install mariadb会直接装好（我第一次就是直接使用这个命令装好的）\r\n\r\n装完后启动mariadb\r\n\r\nsystemctl start mariadb\r\n\r\n先进一下数据库试一下，没问题就是安装完成\r\n\r\n\r\n\r\n#########################################################################################\r\n\r\n\r\n\r\n####3、接下来就是初始化了\r\n\r\nmysql_secure_installation  #这是一个快速初始化的命令\r\n\r\n 首先他会提示输入root密码\r\n\r\nEnter current password for root (enter for none):\r\n\r\n初次安装时没有密码的所以直接回车\r\n\r\n然后Change the root password? [Y/n]  修改密码\r\n\r\nRemove anonymous users? [Y/n]   移除匿名用户，这个一般都要移除\r\n\r\nDisallow root login remotely? [Y/n]  不允许root用户远程登录，一般是不允许，所以yes\r\n\r\nRemove test database and access to it? [Y/n]  删除test数据库，这个不是太重要\r\n\r\nReload privilege tables now? [Y/n]  是否重新加载授权表  yes\r\n\r\n这样基本初始化就完成了\r\n\r\n\r\n\r\n###########################################################################################\r\n\r\n\r\n\r\n设置字符集一般建议是在配置文件中设置，也可以在数据库中设置，在数据库中设置的话当服务重启后就会恢复默认字符集，会出现乱码现象\r\n\r\n配置文件一般在/etc/my.cnf\r\n\r\nvim /etc/my.cnf\r\n\r\n\r\n\r\n在[mysqld]下添加如下配置\r\n\r\ninit_connect=\'SET collation_connection = utf8_unicode_ci\'\r\n\r\ninit_connect=\'SET NAMES utf8\'\r\n\r\ncharacter-set-server=utf8\r\n\r\ncollation-server=utf8_unicode_ci\r\n\r\nskip-character-set-client-handshake\r\n\r\n\r\n\r\n在[client]下添加 （有些配置文件没有[client],是因为包含了 “!includedir /etc/my.cnf.d”这句话，说明其他配置在这个目录中）\r\n\r\ndefault-character-set=utf8\r\n\r\n\r\n\r\n然后重启mariadb\r\n\r\n\r\n\r\n登录数据库查看字符集是否设置正确 show variables like \"%character%\";show variables like \"%collation%\"\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n这样就设置成功了\r\n\r\n创建数据库：\r\n\r\nCREATE DATABASE `test2` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci\r\n导入sql文件\r\nSource sql文件路径','Linux下安装Mariadb，我是使用的centos 7.1系统，在yum源配置好的情况下1、yum search mariadb搜索结果如下==================================================================================== N/S matched: mariadb ====================......','正常',185,'Linux','linux,数据库,mariadb,mysql,字符集'),('ARTICLE20180210052552920','TAX20180210043408433','2018-02-10 17:25:52','2019-01-07 00:30:00','在centos下将Springboot应用部署为系统服务','####1、新建应用的工作目录修改应用权限\r\n创建工作目录如：mkdir /usr/local/apps\r\n将自己的应用放在工作目录下： mv myapp.jar /usr/local/apps/\r\n修改应用权限：chmod 744 myapp.jar\r\n将springboot的配置文件放在工作目录下（因为将项目打成jar包后，如果包中配置文件，后面要修改配置信息必须重新打包，所以建议使用外置配置文件，修改配置重启即可）：mv application.yml /usr/local/apps\r\n####2、编写service配置\r\n编辑配置：vi /lib/systemd/system/myapp.service\r\n内容如下：\r\n```\r\n[Unit]\r\nDescription=myapp\r\n\r\n[Service]\r\n#工作目录\r\nWorkingDirectory=/usr/local/apps\r\nPrivateTmp=true\r\nRestart=always\r\nType=simple\r\n#启动命令 前面的路径是jre的路径 后面指定的是配置文件路径\r\nExecStart=/usr/java/jre1.8/bin/java -jar /usr/local/apps/myapp.jar --spring.config.location=/usr/local/apps/application.yml\r\n#结束命令\r\nExecStop=/usr/bin/kill -15  $MAINPID\r\n\r\n[Install]\r\nWantedBy=multi-user.target\r\n```\r\n使配置生效：sudo systemctl daemon-reload\r\n\r\n\r\n经过以上步骤就可以使用systemctl命令来管理你的Springboot应用了','1、新建应用的工作目录修改应用权限创建工作目录如：mkdir /usr/local/apps将自己的应用放在工作目录下： mv myapp.jar /usr/local/apps/修改应用权限：chmod 744 myapp.jar将springboot的配置文件放在工作目录下（因为将项目打成jar包后，如果包中配置文件，后面要修改配置信息必须重新打包，所以建议使用外置配置文件，修改配置重启即可）......','正常',230,'Linux','linux,Springboot,部署'),('ARTICLE20180220105950750','TAX20180210053014072','2018-02-20 10:59:50','2019-01-07 00:30:00','（一）初识springboot之Hello World','>从今天开始，本人开始学习springboot，我会将我的学习过程写在这里，感兴趣的朋友可以一起学习交流。\n\n-----\n###写在前面的\n对springboot的介绍网上有很多，就不在赘述，在这里只做简单总结。\n>  **Spring Boot不是对Spring功能的增强，只是提供了一种快速使用Spring的方式。**  \n> 这句话我认为是对springboot比较贴切的概括了\n\n在《Spring Boot实战》中作者给出了Spring Boot的四个核心\n> * 自动配置：针对很多Spring应用程序常见的应用功能，Spring Boot能自动提供相关配置。\n> * 起步依赖：告诉Spring Boot需要什么功能，他就能引入需要的库。\n> * 命令行界面：无需传统项目构建，只需写代码就能完成完整的应用程序。（可选功能）\n> * Actuator：提供在运行时检视应用程序内部情况的能力。\n\n作为初学者，看到Spring Boot这个名字很容易产生一种误解Spring Boot是一个带有全新功能的新框架，但实际上Spring Boot只是对Spring系列的框架做了一个整合，简化Spring开发并且提供检视Spring应用程序的能力。\n##创建Spring Boot项目\n####一、自己手动创建Spring Boot项目\n#####（1）创建maven项目，添加工程依赖\n使用编译器创建一个maven项目，在pom.xml中配置项目依赖。\n**pom.xml**\n```\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>site.teamo.springboot</groupId>\n  <artifactId>blog</artifactId>\n  <packaging>war</packaging>\n  <version>1.0-SNAPSHOT</version>\n  <name>blog Maven Webapp</name>\n  <url>http://maven.apache.org</url>\n  <!--继承springboot的父pom-->\n  <parent>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-parent</artifactId>\n    <version>1.5.1.RELEASE</version>\n  </parent>\n  <dependencies>\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n  </dependencies>\n  <build>\n    <finalName>blog</finalName>\n  </build>\n</project>\n```\n#####（2）创建启动类\n在项目创建springboot的启动类。\nspringboot的注解扫描默认是扫描启动类所在包以及子包，所以当没有指定扫描包时，一般将启动类创建在最外层的包中。\nApplication.java\n```\n@SpringBootApplication\npublic class Application {\n    public static void main(String[] args){\n        SpringApplication.run(Application.class,args);\n    }\n}\n```\n####二、使用Spring Initializr初始化项目\n#####（1）、使用web端的Spring Initializr\n使用浏览器打开http://start.spring.io\n如图：\n![这里写图片描述](//img-blog.csdn.net/20180313154232453?watermark/2/text/Ly9ibG9nLmNzZG4ubmV0L3RlbHVuZHVzaWpp/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n>我选择Maven构建项目\nSpring Boot Version：2.0.0\nGroup：site.teamo.springboot\nArtifact：blog\nDependencies：web\n然后点击Generate Project按钮\n\n经过以上操作得到一个blog.zip的一个文件，打开后就可以看到一个标准的Spring Boot项目结构。\n打开这个构建好的项目，你会发现已经存在启动类BlogApplication.java文件和pom.xml。所以不用在手动添加了\n\n#####（2）、使用IntelliJ IDEA构建\n在IDEA中file->new project\n选择JDK，选择默认模板\n点击next\n配置相应信息\n点击next\n选择web依赖\n然后继续next，根据相应需求填写信息就可以构建完成\n##编写HelloWorldController\nHelloWorldController.java\n```\n/*@RestController是控制器注解的一种，\n相当于@Controller +  @ResponseBody两个注解的作用，\n类中方法返回值直接作为结果返回，不进行视图解析*/\n@RestController\npublic class HelloWorldController {\n    @RequestMapping(\"/index\")\n    public String helloWorld(){\n        return \"Hello World！\";\n    }\n}\n```\n##启动应用查看结果\n直接运行Application.java中的main方法，在浏览器中进行访问就可以看到结果了。\n![这里写图片描述](http://img.blog.csdn.net/20180220105414773?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdGVsdW5kdXNpamk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)','从今天开始，本人开始学习springboot，我会将我的学习过程写在这里，感兴趣的朋友可以一起学习交流。写在前面的对springboot的介绍网上有很多，就不在赘述，在这里只做简单总结。 Spring Boot不是对Spring功能的增强，只是提供了一种快速使用Spring的方式。这句话......','正常',90,'Springboot','java,springboot'),('ARTICLE20180221051845138','TAX20180210053014072','2018-02-21 17:18:45','2019-01-07 00:30:00','（二）初识springboot之使用fastjson解析数据（解决乱码及简单配置）','###写在前面的\r\n在我们的项目的开发中，根据不同的需求有时候需要从后台返回json数据。在Spring中常用的返回json数据的两种方法是：（1）使用@RestController在控制器的类上注解，使用该注解的**类中所有配置的url映射的方法返回值不进行视图解析**，只进行数据解析。（2）使用@Controller在控制器类上注解，在方法上使用@ResponseBody注解，使用该方法的只有在带有@ResponseBody注解的配置url映射的方法返回值不进行视图解析。\r\n>在springboot中如果不自定义json解析工具，默认使用的是jackson，但在我们日常开发中fastjson使用的比较多，所以本次是介绍如何自定义json解析器\r\n\r\n--------------------------\r\n###一、在自己的工程中添加fastjson依赖\r\n在pom.xml添加如下依赖\r\n```\r\n<dependency>\r\n   <groupId>com.alibaba</groupId>\r\n   <artifactId>fastjson</artifactId>\r\n   <version>1.2.38</version>\r\n</dependency>\r\n```\r\n###二、编写代码，自定义json解析器\r\n 使用更换json解析器有两种方法：\r\n######(1)启动类继承WebMvcConfigurerAdapter重写configureMessageConverters方法\r\n  完整代码如下：\r\n```\r\n@SpringBootApplication\r\npublic class Application extends WebMvcConfigurerAdapter {\r\n    public static void main(String[] args){\r\n        SpringApplication.run(Application.class,args);\r\n    }\r\n    @Override\r\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters){\r\n        super.configureMessageConverters(converters);\r\n        //定义消息转换器\r\n        FastJsonHttpMessageConverter fastJsonHttpMessageConverter = new FastJsonHttpMessageConverter();\r\n        //设置配置信息\r\n        FastJsonConfig fastJsonConfig = new FastJsonConfig();\r\n        fastJsonConfig.setSerializerFeatures(SerializerFeature.PrettyFormat);\r\n        //将配置信息添加到转换器中\r\n        fastJsonHttpMessageConverter.setFastJsonConfig(fastJsonConfig);\r\n        //将自定义的转换器添加到转换器列表中\r\n        converters.add(fastJsonHttpMessageConverter);\r\n    }\r\n}\r\n```\r\n######(1)使用@Bean注入消息转换器\r\n完整代码如下：\r\n```\r\n @Bean\r\n    public HttpMessageConverters fastJsonHttpMessageConverter()\r\n    {\r\n        //定义消息转换器\r\n        FastJsonHttpMessageConverter fastJsonHttpMessageConverter = new FastJsonHttpMessageConverter();\r\n        //设置配置信息\r\n        FastJsonConfig fastJsonConfig = new FastJsonConfig();\r\n        fastJsonConfig.setSerializerFeatures(SerializerFeature.PrettyFormat);\r\n        //将配置信息添加到转换器中\r\n        fastJsonHttpMessageConverter.setFastJsonConfig(fastJsonConfig);\r\n        //将自定义的转换器添加到转换器列表中\r\n        return new HttpMessageConverters(fastJsonHttpMessageConverter);\r\n    }\r\n```\r\n使用加入以上代码后程序就会使用fastjson返回的数据\r\n####三、解决中文乱码\r\n使用fastjson解析是出现中文乱码有两种解决方式\r\n######(1)在转换器中设置字符集\r\n```\r\nList<MediaType> fastMediaTypes = new ArrayList<MediaType>();\r\nfastMediaTypes.add(MediaType.APPLICATION_JSON_UTF8);\r\nfastJsonHttpMessageConverter.setSupportedMediaTypes(fastMediaTypes);\r\n\r\n```\r\n你可以点开MediaType中源码看到，其实就是设置了字符集\r\n```\r\n//第37行\r\npublic static final MediaType APPLICATION_JSON_UTF8 = valueOf(\"application/json;charset=UTF-8\");\r\n```\r\n######(2)设置response的字符集\r\n在配置文件中加入：\r\n```\r\nspring:\r\n  http:\r\n    encoding:\r\n      charset: UTF-8\r\n      enabled: true\r\n#     force是将request和response都设置字符集\r\n      force: true\r\n#     force单独设置request和response\r\n#     force-response: true\r\n#     force-request: false\r\n```\r\n本人使用的是yml的配置所以多行的，一般项目中建议两个地方都设置统一字符集，比较安全保险\r\n\r\n>有的朋友提出要设置：\r\nfastJsonConfig.setCharset(Charset.forName(\"UTF-8\"));\r\n其实这一句可以不用，你查看源码发现，他默认的配置就是UTF-8，所以可以不写的。\r\n\r\n###四、数据格式简单配置\r\n1、数据解析样式配置可以设置\r\n```\r\nfastJsonConfig.setSerializerFeatures(\r\n	SerializerFeature.PrettyFormat,//结果是否格式化默认false\r\n    SerializerFeature.WriteClassName,//输出类名字默认false\r\n);\r\n```\r\n如果你需要更多格式可以查看枚举类SerializerFeature中的定义\r\n\r\n2、另外还可以使用ValueFilter进行数据过滤，例如日期过滤\r\n```\r\nValueFilter valueFilter = new ValueFilter() {\r\n	public Object process(Object o, String key, Object value) {\r\n	    if(null!=value){\r\n	        if(value instanceof Date){\r\n	            value = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss:SSS\").format(value);\r\n	        }\r\n	    }\r\n	    return value;\r\n	}\r\n};\r\nfastJsonConfig.setSerializeFilters(valueFilter);\r\n```\r\n更多需求都可以自己设计自定义。\r\n>当然使用注解@JSONField(format = \"yyyy-MM-dd\")也可定义日期格式，但是使用注解只有注解的属性生效，对于太多相同设置使用这种方式更加便捷','写在前面的在我们的项目的开发中，根据不同的需求有时候需要从后台返回json数据。在Spring中常用的返回json数据的两种方法是：（1）使用@RestController在控制器的类上注解，使用该注解的类中所有配置的url映射的方法返回值不进行视图解析，只进行数据解析。（2）使用@Controll......','正常',116,'Springboot','java,springboot,fastjson,乱码'),('ARTICLE20180222104208770','TAX20180210053014072','2018-02-22 10:42:08','2019-01-07 00:30:00','（三）初识springboot之热部署','###写在前面的\r\n在日常开发中，代码更改后要重新启动应用，以使修改的代码编译生效，但是这样会耗费比较多的工作时间，所以使用热部署就显得比较重要了，可以节约很多时间。\r\n###一、devtools热部署的原理\r\nspringboot中提供了devtools这个starter，使用devtools插件可以自动应用最新的代码到程序上，实现热部署。这个工具的实现是依赖两个ClassLoader，其中一个ClassLoader用来加载依赖包中的类，这些类通常不会改变，另一个ClassLoader用来加载程序中自己编写的类，这些类会发生改变。当程序代码发成变化后，第二个ClassLoader就会重新启动更新应用程序，实现了应用最新代码到应用程序。因为改变的类比较少所以有比较快的加载时间，减少工作时间的浪费。\r\n###二、导入依赖配置插件\r\n在pom.xml中导入依赖，并在build配置插件\r\n```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-devtools</artifactId>\r\n    <!--版本号可以自己指定，如果不指定会根据springboot的父版本号应用-->\r\n</dependency>\r\n```\r\n插件\r\n```\r\n<plugin>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-maven-plugin</artifactId>\r\n    <configuration>\r\n	    <!--设置为true表示应用重启，默认false-->\r\n        <fork>true</fork>\r\n    </configuration>\r\n</plugin>\r\n```\r\n###三、编译器设置\r\n经过以上配置可能还需要以下配置。eclipse是默认开启自动编译，所以经过以上配置就可以使用，不过IDEA上默认关闭自动编译所以使用还需要在把编译器设置一下，设置过程如下\r\n(1)File(左上角菜单)->Settings..->Build,Execution,Deployment->Compiler里面有个Build project automatically的选项把前面的勾上\r\n(2)快捷Ctrl+Shift+A 输入Registry...打开这一项将compiler.automake.allow.when.app.running这一项勾上就可以了（可能需要重启一次IDEA）','写在前面的在日常开发中，代码更改后要重新启动应用，以使修改的代码编译生效，但是这样会耗费比较多的工作时间，所以使用热部署就显得比较重要了，可以节约很多时间。一、devtools热部署的原理springboot中提供了devtools这个starter，使用devtools插件可以自动应用最新的代码......','正常',91,'Springboot','java,springboot,热部署'),('ARTICLE20180223085118171','TAX20180210053014072','2018-02-23 20:51:18','2019-01-07 00:30:00','（四）Springboot入门之全局异常捕获','###写在前面的\n在项目开发中异常是不可避免的问题，所以在项目中异常捕获统一处理对一个应用来说显得比较重要，对于开发人员来说便于找到错误的原因，对于用户来说在出错时也可以得到服务器的及时响应有较好的体验。\n###一、逻辑业务处理前异常捕获\n这种异常大多是资源请求的错误，例如错误的url地址所引起的404异常。\n处理这种异常需要实现ErrorController接口，代码如下：\n```\n@Controller\npublic class ResourceExceptionHandler implements ErrorController {\n    private static Logger logger = Logger.getLogger(ResourceExceptionHandler.class.getName());\n    @Override\n    public String getErrorPath() {\n        return \"/error\";\n    }\n    /**\n    *处理需要返回和html页面的异常\n    **/\n    @RequestMapping(value = \"/error\",produces = \"text/html\")\n    public ModelAndView errorHtml(HttpServletResponse resp, HttpServletRequest req) {\n        logger.info(\"page not found\");\n        return new ModelAndView(\"404.html\");\n    }\n    /**\n    *处理需要返回JSON数据的异常\n    **/\n    @RequestMapping(value = \"/error\")\n    @ResponseBody\n    public Object error(HttpServletResponse resp, HttpServletRequest req) {\n        logger.info(\"ResponseBody not found\");\n        return \"ResourceExceptionHandler ResponseBody\";\n    }\n}\n\n```\n###二、执行@RequestMapping时异常捕获\n这种异常主要包括参数的不匹配，参数转换等异常\n处理这种异常使用@ControllerAdvice和继承ResponseEntityExceptionHandler示例代码如下：\n```\n@ControllerAdvice\npublic class RestExceptionHandler extends ResponseEntityExceptionHandler {\n\n\n    /**\n     * 参数不足异常\n	 * 这里只列举了一个方法\n	 * 如果需要处理其他的异常可以查看ResponseEntityExceptionHandler的源码，可以重写你需要的异常处理方法\n     */\n    @Override\n    protected ResponseEntity<Object> handleMissingServletRequestParameter(MissingServletRequestParameterException ex, HttpHeaders headers, HttpStatus status, WebRequest request) {\n\n        return new ResponseEntity<Object>(ex.getMessage(), status);\n    }\n}\n```\n###三、逻辑业务处理中异常捕获\n逻辑业务处理中的异常，主要是指在处理业务逻辑时可能会发生各种问题，如空指针，数据库错误等。\n######(1)使用Html模板渲染的应用\n这种应用异常处理，需要实现HandlerExceptionResolver接口\n```\n@Component\npublic class ModelAndViewExceptionHandler implements HandlerExceptionResolver {\n    private static Logger logger = Logger.getLogger(ModelAndViewExceptionHandler.class.getName());\n    @Override\n    public ModelAndView resolveException(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e) {\n        logger.info(\"ModelAndView 异常\");\n        return new ModelAndView(\"error.html\");\n    }\n}\n```\n######(2)restful风格应用\n处理此种应用的异常使用@ControllerAdvice和@ExceptionHandler注解\n```\n@ControllerAdvice\npublic class RestExceptionHandler extends ResponseEntityExceptionHandler {\n\n\n    @ExceptionHandler(value = Exception.class)\n    @ResponseBody\n    public Object exceptionHandler(HttpServletRequest request, Exception e) throws Exception {\n        logger.info(\"异常处理逻辑\");\n        return \"error\";\n    }\n}\n\n```','写在前面的在项目开发中异常是不可避免的问题，所以在项目中异常捕获统一处理对一个应用来说显得比较重要，对于开发人员来说便于找到错误的原因，对于用户来说在出错时也可以得到服务器的及时响应有较好的体验。一、逻辑业务处理前异常捕获这种异常大多是资源请求的错误，例如错误的url地址所引起的404异常。处理这......','正常',134,'Springboot','java,springboot,异常'),('ARTICLE20180225030612862','TAX20180210053014072','2018-02-25 15:06:12','2019-01-07 00:30:00','（五）springboot入门之定时任务','###写在前面的\n在项目开发中定时任务是一种常用的功能，比如应用中每天进行的一次数据分析，或者每隔一段时间进行一次权限验证等，这类功能的实现一般都是使用定时任务。使用定时任务简化了我们开发这类功能的逻辑，不用编写开始执行时间的逻辑，只有编写执行内容的逻辑，是开发更便捷。\n###一、定时任务的实现方式简述\n######(1)使用jre自带的java.util.Timer类和java.util.TimerTask类实现定时任务\n这种方式来实现定时任务过程稍显复杂，而且timerTask 也是实现了 java.lang.Runnable 接口的，所以事实上timerTask 就是一类线程，而且这类线程的调度还不可控，容易出现差错。这种方式的定时任务在日常开发中很少使用，所以在这里就不过多介绍。\n>这只是个人见解，如果需要了解更多可以自行查阅资料\n\n######(2)使用Spring的task实现定时任务\n这种定时任务的实现方式是在Spring3.0以后才提供的，Spring提供的这个功能可以看做是一个轻量级的Quartz，配合Spring使用比较简单便捷。\n>本篇着重介绍这一种方式\n\n######(3)使用Quartz实现定时任务\nQuartz是OpenSymphony组织的一个开源项目，它是一个功能强大的任务调度器，可以与J2EE与J2SE应用程序相结合也可以单独使用。\n>由于Quart功能强大所以使用起来也比较复杂，本人对Quart还没有深入学习，目前还不能谈太多，等学习后再来与大家交流\n\n###二、使用@Scheduled创建定时任务\n创建一个定时任务类，示例如下\n```\n@EnableScheduling\n@Configuration\npublic class MyTask {\n    private static Logger logger = Logger.getLogger(MyTask.class.getName());\n	//corn 是定时任务表达式\n	//corn 表达式共七项分别代表\n	//秒 分 时 日 月 星期 年（可选）\n	//想了解更多corn表达式可以自行查阅资料\n    @Scheduled(cron = \"0/2 * * * * *\")\n    public void task(){\n        logger.info(new Date()+\"task\");\n    }\n}\n```\n在这里要说明的是：Spring提供的定时任务的执行时间是根据程序所运行的操作系统的时间来调度，而且时间间隔的计算是从0开始。\n>解释从0开始的含义------例如corn= （ 0/5 * * * * *）代表是每隔5秒执行一次，假如程序在00：00：02秒时启动成功，按照我们思维下次执行时间应该为07秒，12秒，17秒...，其实实际并不是这样，这里是从0开始划分，下次执行时间为05秒，10秒，15秒...\n\n###三、使用SchedulingConfigurer接口实现定时任务\n代码示例如下\n```\n@EnableScheduling\n@Configuration\npublic class MyTaskCorn implements SchedulingConfigurer {\n    private static Logger logger = Logger.getLogger(MyTaskCorn.class.getName());\n    private static String corn = \"0/2 * * * * *\";\n\n    public static boolean changeCorn(String corn){\n        //在此处可以做corn表达式校验\n        if(corn==null||\"\".equals(corn.trim())){\n            return false;\n        }\n        MyTaskCorn.corn = corn;\n        return true;\n    }\n    @Override\n    public void configureTasks(ScheduledTaskRegistrar scheduledTaskRegistrar) {\n        Runnable task = new Runnable() {\n            @Override\n            public void run() {\n                logger.info(new Date()+\"----MyTaskCorn\");\n            }\n        };\n        Trigger trigger = new Trigger() {\n            @Override\n            public Date nextExecutionTime(TriggerContext triggerContext) {\n                CronTrigger cronTrigger = new CronTrigger(corn);\n                return cronTrigger.nextExecutionTime(triggerContext);\n            }\n        };\n        scheduledTaskRegistrar.addTriggerTask(task,trigger);\n    }\n}\n```\n这种方式的好处是可以在程序的运行中修改corn的值，从而改变任务的执行计划，同时也可以动态的添加任务。\n\n更多方式留着大家探索吧，本人也了解甚微，就谈这么多吧。','写在前面的在项目开发中定时任务是一种常用的功能，比如应用中每天进行的一次数据分析，或者每隔一段时间进行一次权限验证等，这类功能的实现一般都是使用定时任务。使用定时任务简化了我们开发这类功能的逻辑，不用编写开始执行时间的逻辑，只有编写执行内容的逻辑，是开发更便捷。一、定时任务的实现方式简述(1)使用......','正常',79,'Springboot','java,springboot,定时任务'),('ARTICLE20180227033124070','TAX20180210053014072','2018-02-27 15:31:24','2019-01-07 00:30:00','（六）springboot入门之定时任务动态管理','###写在前面的\r\n在实际开发中定时任务的执行计划都不是固定的，根据不同的实际情况会指定不同的任务开启时间，停止时间，以及执行频率，所以动态的管理定时任务是一种实际开发中常见的设计。\r\n###一、动态管理定时任务说明\r\n使用Quartz来实现定时任务的管理是比较简单的，但是本次我们将使用Spring提供ThreadPoolTaskScheduler来实现，由于现在还未对Quartz深入学习，所以对Quartz不做过多解释。\r\nThreadPoolTaskScheduler是TaskScheduler接口的默认实现类，能够开启线程池进行任务调度，支持设置线程数，默认为单线程。\r\nThreadPoolTaskScheduler 通过schedule方法，添加定时任务和触发器后，会得到一个ScheduledFuture<?>类型的返回值，这个返回值可作为控制任务的开关。\r\n###二、使用ThreadPoolTaskScheduler实现定时任务管理\r\n示例代码如下：\r\n```\r\n@Component\r\npublic class DynamicTask {\r\n    private static Logger logger = Logger.getLogger(DynamicTask.class.getName());\r\n    @Autowired\r\n    private ThreadPoolTaskScheduler threadPoolTaskScheduler;\r\n    private ScheduledFuture<?> task;\r\n\r\n	//采用注入的方式创建ThreadPoolTaskScheduler \r\n    @Bean\r\n    public ThreadPoolTaskScheduler threadPoolTaskScheduler() {\r\n        return new ThreadPoolTaskScheduler();\r\n    }\r\n\r\n	//任务开始\r\n    public void startTask() {\r\n        task = threadPoolTaskScheduler.schedule(new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                logger.info(new Date()+\"0/2 * * * * *\");\r\n            }\r\n        }, new CronTrigger(\"0/2 * * * * *\"));\r\n        logger.info(\"开始任务！\");\r\n    }\r\n	//任务停止\r\n    public String stopTask() {\r\n\r\n        if (task != null) {\r\n\r\n            task.cancel(true);\r\n\r\n        }\r\n\r\n        logger.info(\"任务停止！\");\r\n\r\n        return \"stopCron\";\r\n\r\n    }\r\n	//更改计划，可以将更改的执行计划作为参数传入\r\n    public void changePlan() {\r\n        stopTask();\r\n        task = threadPoolTaskScheduler.schedule(new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                logger.info(new Date()+\"*/5 * * * * *\");\r\n            }\r\n        }, new CronTrigger(\"*/5 * * * * *\"));\r\n        logger.info(\"改变任务！\");\r\n    }\r\n}\r\n\r\n```\r\n>以上代码只是一个简单的示例，更多的应用，大家根据实际情况来设计','写在前面的在实际开发中定时任务的执行计划都不是固定的，根据不同的实际情况会指定不同的任务开启时间，停止时间，以及执行频率，所以动态的管理定时任务是一种实际开发中常见的设计。一、动态管理定时任务说明使用Quartz来实现定时任务的管理是比较简单的，但是本次我们将使用Spring提供ThreadPoo......','正常',123,'Springboot','java,springboot,定时任务,动态'),('ARTICLE20180228024400989','TAX20180210053014072','2018-02-28 14:44:00','2019-01-07 00:30:00','（七）springboot入门之整合Mybatis','###写在前面的\n在前面几篇文章中都介绍了没有数据库情况下springboot在项目中的简单使用，本次将介绍springboot整合Mybatis连接数据库，本篇文章是入门文章，如果你对Mybatis使用有 基本的了解的话，可以忽略本篇文章。\n###一、引入依赖包\n依赖的pom.xml内容如下：\n```\n<!--Mybatis依赖-->\n<dependency>\n    <groupId>org.mybatis.spring.boot</groupId>\n    <artifactId>mybatis-spring-boot-starter</artifactId>\n    <version>1.3.1</version>\n</dependency>\n<!--mysql驱动，如果你使用其他数据库，引入其他数据库驱动-->\n<dependency>\n    <groupId>mysql</groupId>\n    <artifactId>mysql-connector-java</artifactId>\n    <version>5.1.39</version>\n</dependency>\n```\n###二、配置数据源和Mapper扫描\n在项目的配置文件中进行数据源的配置。\n>本人使用的是yml类型配置文件，这个配置是最简单的配置，如果需要更多功能，可以自行查阅数据源配置资料\n\n```\nspring:\n  datasource:\n    url: jdbc:mysql://127.0.0.1:3306/test?useUnicode=true&characterEncoding=utf-8\n    username: root\n    password: 123456\n    driver-class-name: com.mysql.jdbc.Driver\n```\n在应用启动类上注解@MapperScan将mapper接口包指明\n```\n@SpringBootApplication\n@MapperScan(\"site.teamo.springboot.dao\")//mapper接口所在的包名\npublic class Application extends WebMvcConfigurerAdapter {\n    public static void main(String[] args){\n        SpringApplication.run(Application.class,args);\n    }\n}\n```\n###三、编写mapper接口和实体类\nmapper接口的代码如下：\n>这里说明一下，由于本次是一个测试使用了@Select注解，但是在实际开发中本人还是建议大家在使用Mybatis时，还是使用xml来配置sql比较妥善\n\n```\n@Component\npublic interface TestDao {\n    @Select(\"select * from test\")\n    List<Test> selectAll();\n}\n```\n实体类Test.java\n>实体属性与数据库表字段对应\n\n```\npublic class Test {\n    private long id;\n    private int age;\n    private String name;\n    @JSONField(format = \"yyyy-MM-dd\")\n    private Date createTime;\n\n    public long getId() {\n        return id;\n    }\n\n    public void setId(long id) {\n        this.id = id;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public Date getCreateTime() {\n        return createTime;\n    }\n\n    public void setCreateTime(Date createTime) {\n        this.createTime = createTime;\n    }\n}\n\n```\n###四、测试使用\n在Controller中注入TestDao调用其selectAll方法\\\n>在日常开发中controller是不直接注入mapper来操作数据，中间会通过service层来操作数据\n\n```\n@RestController\npublic class HelloWorldController {\n    @Autowired\n    private TestDao testDao;\n    @RequestMapping(\"/test\")\n    public List<Test> helloWorld(){\n        return testDao.selectAll();\n    }\n}\n```\n数据库表数据如下：\n![这里写图片描述](http://img.blog.csdn.net/20180228144246599?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdGVsdW5kdXNpamk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n结果如下\n![这里写图片描述](http://img.blog.csdn.net/20180228144144557?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdGVsdW5kdXNpamk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)','写在前面的在前面几篇文章中都介绍了没有数据库情况下springboot在项目中的简单使用，本次将介绍springboot整合Mybatis连接数据库，本篇文章是入门文章，如果你对Mybatis使用有 基本的了解的话，可以忽略本篇文章。一、引入依赖包依赖的pom.xml内容如下：Mybat......','正常',75,'Springboot','java,springboot,Mybatis'),('ARTICLE20180329030101467','TAX20180329053014072','2018-03-29 15:01:01','2019-01-07 00:30:00','我是一辆什么车','####车（自己）——日（目标）—— 路（途径）\r\n**车**：职业发展初期，没有强大的实力，但是有充足的时间，有一个求进的心，但是还未找到正确的路\r\n**日**：在软件的技术道路上发展，成为一名软件架构师\r\n**路**：途径很迷茫\r\n####目前误区\r\n做事情没想好，就去做。，就如还没有想好路怎么走就开始驾车，走一半盘山公路才发现自己马力不足，准不不足，进退两难，陷入焦虑。\r\n####策略选择\r\n职业发展初期，处于升级车阶段。主要任务为学习和成长，从自己身上开刀，死磕自己，持续增量。\r\n####现状总结\r\n * 沉溺于`轻易获得成就感`的事情：有意无意的寻求用`很小`的付出获取`很大`的回报\r\n * 过度依赖`既有可行路径`：在学习工作中，习惯了一件事情的流程后再也没想过如何改进，只会机械的重复，然后骗自己很充实\r\n * 封闭`强化学习`的通道：在学习接收信息中，只愿意执行最简单的一步，只听不说、只看不写、只学不练。\r\n####~~懒而不能知~~，知而不能改，改而不能恒','车（自己）——日（目标）—— 路（途径）车：职业发展初期，没有强大的实力，但是有充足的时间，有一个求进的心，但是还未找到正确的路日：在软件的技术道路上发展，成为一名软件架构师路：途径很迷茫目前误区做事情没想好，就去做。，就如还没有想好路怎么走就开始驾车，走一半盘山公路才发现自己马力不足，准不不足，......','正常',70,'规划','规划'),('ARTICLE20180329040617708','TAX20180329053014072','2018-03-29 16:06:17','2019-01-07 00:30:00','我的价值是被什么决定','###职业价值坐标系：\r\n\r\n决定一个点价值的不是这个点自身，而是这个点所在的坐标系\r\n\r\n**行业 x  企业 x 职业**（经典的职业价值坐标）\r\n![这里写图片描述](https://img-blog.csdn.net/20180329151647476?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RlbHVuZHVzaWpp/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\r\n\r\n**在这个模型中的发展路径很明确：**\r\n\r\n  *   选择一个行业\r\n  *  在行业里选择一个好楼（企业）\r\n  *  在楼中努力向上发展，能去2层去2层，能去3层去3层，如果当前的楼挡住了你去3层的路，可以跳到旁边小一点的楼里面，尝试去它的3层\r\n\r\n**然而在这个旧的职业坐标系在松动：**\r\n\r\n  *  组织寿命变短：现如今一家企业的寿命长则不过30年左右，短则3-5年，还没等你走到公司的高层，你所在的企业已经寿终正寝。\r\n  *  行业变化太快没有边界：行业之间不断地跨界，你可能发现抢掉你职位的人不是你楼下的那个人，而是其他行业跳过来的人\r\n  *  人们更关注新的职业坐标：同行圈、同业圈、粉丝圈更受大家的关注，而不再是同事圈，在互联网时代，个体逐渐从组织中解放出来，以自己为中心建立一个新的职业坐标系。\r\n\r\n**圈子 x 能力 x 特色**（全新的职业价值坐标）\r\n 在如今的职场上最牛的人是在各个垂直领域圈子里能力超强的且有影响力的大神，\r\n 而最有危机感的是那些纯靠年头和资历混到企业中高层，但是并没有进入资源层、脱离职场的人\r\n\r\n###策略\r\n* 持续放大自己的影响力\r\n*  持续提高自己的能力\r\n*  持续宣扬自己讨人喜欢的特色\r\n\r\n######1.要走出去发展圈子，尤其是同行和同好的圈子\r\n每个月至少三次跟自己弱关系的圈的人见面\r\n######2.持续提高自己能力\r\n想清楚我在这个圈子比较有能力优势的事，对大家最有价值的事，我真正感兴趣的事\r\n######3.放大特色\r\n毫无特色的好人就是你在这个年代最大的风险。放大影响力，提升能力，强化特色，身价才会越来越高。\r\n\r\n###现状\r\n两个体系将会并存很长一段时间。所以在目前大部分人一方面要保护好自己原来那个坐标系的行业、企业、职位；另一方面也要做好准备等风来。\r\n\r\n* 处境：目前更多取决于企业体系，但是也认识到个体体系的重要性，所以也在努力提升个人价值。\r\n* 选择： 先提升自己的能力，当能力足够强的时候再去再去扩展自己的圈子，最后不断增加影响，形成特色，巩固能力提升价值。\r\n* `问题：如何提升自己能力？仅仅通过学习可以吗？个体体系比较适用计算机行业，但是目前对行业还不甚了解，如何在这个行业增加自己的价值。`','职业价值坐标系：决定一个点价值的不是这个点自身，而是这个点所在的坐标系行业 x  企业 x 职业（经典的职业价值坐标）在这个模型中的发展路径很明确：选择一个行业在行业里选择一个好楼（企业）在楼中努力向上发展，能去2层去2层，能去3层去3层，如果当前的楼挡住了你去3层的路，可以跳到旁边小一点的......','正常',62,'规划','规划'),('ARTICLE20180330105226417','TAX20180329053014072','2018-03-30 10:52:26','2019-01-07 00:30:00','未来那些能力会越来越增值','>为什么会讨论这个话题？\n>当今时代机器变得越来越厉害，在不就久的未来，机器将替代很大一部分人的工作，作为人类的我们当有很大的危机感，所以了解未来能让我们增值的能力会让我们在未来新的职业世界里持续增值\n\n###六种能力\n* `设计感`：设计一种计谋，让事情得以推进。优秀的设计总是创造出一种新的解决方式，让事情顺利进行。\n* `共情能力`：站在别人的角度思考，甚至思考得比别人更深入的能力。\n* `讲故事能力`：好的导演，畅销书作家，商业领袖都是会讲故事的人\n* `整合能力`：行业不断跨界，领域不断变化，最强的不是总在从头学习，而是持续整合的人\n* `娱乐感`：让你觉得好玩的能力。\n* `意义感`：自我领导和领导他人的能力。\n\n\n>设计感和讲故事产生影响力\n>共情能力、整合能力和娱乐感提高竞争力\n>意义感是自我驱动和领导他人的最好方式\n\n######`会讲故事能跨界，理解人心有品位，既好玩又活的有点追求`\n\n###策略\n在机器越来越强的年代，我们不是要去和机器pk，也不是完全依靠人的感性能力，而是能与机器合作的人的能力。\n所以在这个时代最厉害的是懂人性又懂技术的人，真正的赢家就是一个能用高感性能力跟高科技合作的人。\n###现状\n* 目前还是学生，但是马上就要正式开始工作了。计算机行业发展迅速，近两年来人工智能是热门方向，作为一名普通的程序员，其实内心也有所担忧，如果未来有一天程序完全不用人写了，而是由机器自己学习了，那会是多恐怖。技术对计算机行业影响很大，每当有一个新技术的出现，都有可能改变当前行业的结构，抓住了新技术的机会，就可以前途光明，如果失去了新技术的机会，或许就要一路坎坷。\n* 机械重复的行业或者职业已经在慢慢消失，而富有创造性的，设计性的行业正在越来越有价值\n\n**六种能力应用：**\n\n * 设计感：设计一种全新的方式替代旧的方式，甚至是完全颠覆。从键盘手机，到触屏手机，再到现在的智能新技术的手机。\n * 共情能力：站在用户的角度取思考用户需要的是什么，这样才能设计出对用户来说非常需要的功能。\n * 讲故事：商业领袖能把一个商业讲成谁都能懂的故事。\n * 整合：不断对自己的产品从不同的角度分析，不断整合，才能更好的理解自己的产品\n * 娱乐：在互联网中好玩才能吸引用户，才能让用户记住你。所以如果你的产品会跟人玩，那么你的产品才有魅力。\n * 意义感：让人觉得做这个事情的过程已经很值了，就不会太过关注结果了，在互联网中，人会有一种“全球所有人共享所有信息”的意义感。','为什么会讨论这个话题？当今时代机器变得越来越厉害，在不就久的未来，机器将替代很大一部分人的工作，作为人类的我们当有很大的危机感，所以了解未来能让我们增值的能力会让我们在未来新的职业世界里持续增值六种能力设计感：设计一种计谋，让事情得以推进。优秀的设计总是创造出一种新的解决方式，让事情顺利进行......','正常',55,'规划','规划'),('ARTICLE20180331052708134','TAX20180329053014072','2018-03-31 17:27:08','2019-01-07 00:30:00','未来职业世界的三种人','###观点\r\n\r\n* 今天社会和原始社会的不同的本质就是物质排列的方式的不同\r\n* 这个更好的排列方式其实就是信息\r\n* 人类社会的进步，科技和商业的进步其实就是一个信息量增加的过程\r\n* 企业的核心功能也是信息的生产、营销、推广。\r\n\r\n###三种人\r\n\r\n今天一个人收到了一段新的信息，有可能的处理方式\r\n\r\n* 第一种人尽可能快的把这个信息传播出去，持续的进行传播信息，周围人就会发现——他这有好东西，慢慢开始关注他。这样信息对他来说就产生了更多的链接\r\n* 第二种人收到信息以后，就想着这个信息怎么用，怎么理解，会去探索更多的信息，不断地增加自己的信息量，慢慢的他就会成为一名专业人士。\r\n* 第三种人看到这种信息，就会想到这些信息是哪里产生的？我该找谁去成产更多的信息？找谁去传播这些信息？他们之间怎么沟通协调？自然而然，这种人就运营出了一个平台。\r\n\r\n**`媒体人`的核心能力就是不断地扩散信息。他们整天就是想的就是如何更好，更快、更广的拓展信息**\r\n\r\n**`产品人`的核心能力就是产生信息。他们不断地更深、更有效的挖掘和生产信息**\r\n\r\n**`运营人`的核心能力就是链接。他们不断地链接人和事、未来和现在，更好地配备资源**\r\n\r\n###策略\r\n\r\n**误区**\r\n我们常常会羡慕周围人的能力，但是你明确自己是哪种人，处于哪条赛道，我们就不会去做无谓的比较，而聚集一下自己的方向\r\n\r\n* 你是产品人，你就不必羡慕那些会经营，会传播，会表达的人，你要提高的是自己的生产、整合信息的能力。\r\n* 你是媒体人，你就不必羡慕那些一坐下来就可以待很久，研究的东西又很深的人。你要提高的是自己影响、传播信息的能力。\r\n* 你是运营人，你就不必纠结自己的特长是什么，专业是什么。你要思考的就是如何更快地判断信息，并且分发给适合的人。\r\n\r\n**产品人挖掘、生产信息，媒体人传播信息，运营人链接信息**\r\n\r\n**现状**\r\n面对新的信息，我的第一反应是去了解这个信息的实质，获得更多的有关系，学习它研究它，弄懂它。所以我的职业属性属于产品人。\r\n我即将从事的工作也是生成信息的部分，负责去开发新的产品，创造出新的信息\r\n作为一个产品人，在我的工作中我就是要提高自己生产挖掘信息的能力，但是提升这些能力要学会学习新信息，当新的信息到来时，首先要去学习新信息，弄懂以后才可生产出类似的信息。所以作为产品人学习是必不可少的。\r\n**我的理解**\r\n这三种职业属性并不是一成不变的。现在的我是刚要进入职场的新人，我更愿意成为一个产品人，我要学习新知识，同时发掘信息，生成信息。当我作为一个产品人，已经有足够的成就时，我可以转变为媒体人，我需要了解更多的外界的知识，我作为媒体人在传播这些信息的时候，也增加了自己的信息广度。在当我作为媒体人已经积累了足够的信息认知后，我或许就可选择成为运营人。拥有产品人发掘信息的思想，也拥有媒体人宽广的信息认知，作为运营人能更好的辨识信息，把信息分配给合适的人，协调好关系，做出合理的资源分配。','观点今天社会和原始社会的不同的本质就是物质排列的方式的不同这个更好的排列方式其实就是信息人类社会的进步，科技和商业的进步其实就是一个信息量增加的过程企业的核心功能也是信息的生产、营销、推广。三种人今天一个人收到了一段新的信息，有可能的处理方式第一种人尽可能快的把这个信息传播出去，持续的进行传......','正常',57,'规划','规划'),('ARTICLE20180401102103292','TAX20180329053014072','2018-04-01 10:21:03','2019-01-07 00:30:00','自由职业的真相','###观察\r\n\r\n**自由职业者**：公众眼中最具幸福感的职业\r\n\r\n三大好处：\r\n\r\n* 时间自由\r\n* 地点自由\r\n* 不要看上司脸色\r\n\r\n三大缺点\r\n\r\n* 收入不稳定\r\n* 社交范围窄\r\n* 心里负担大\r\n\r\n###概念\r\n自由职业者诱惑人的关键：*`自由`*\r\n\r\n这个自由的概念模糊：\r\n\r\n* 可以选择什么时间上班，在哪上班，但是还是需要面对客户的最后期限\r\n* 关系自由，你依然有可能选择自己不喜欢的客户，他的脸色不一定好看\r\n* 组织上班，不一定就不自由，很多企业高管也都是不用座班的\r\n* 优秀的设计师，也拥有和自己上司讨论方案，拒绝他方案的自由\r\n\r\n这些在企业中也很自由的人为什么不选择辞职自己干？\r\n\r\n* 组织给了他们宽松的环境\r\n* 个人能力在组织的平台上可以更加放大\r\n* 自己成就了组织，组织也反过来成就了自己\r\n\r\n###策略\r\n\r\n**自由职业的本质不是自由，而是职业能力**\r\n\r\n人与职业三个阶段关系：*`雇佣-自由交易-共创`*\r\n\r\n* 雇佣：刚进入企业，需要依赖组织才能生存下去，服从组织，提高自己能力\r\n* 自由交易：自己慢慢变强，很多企业抛来橄榄枝，就拥有了和公司对等交易的权利\r\n* 共创：你选择和某一些公司走的很久，持续的和这些公司一起发展，互相依赖，互相成就，目标相同，性格相似，希望共同创造一样东西\r\n\r\n**一个人就是一家公司**\r\n\r\n* 把能力封装成产品（产品能力）\r\n* 把能力卖出去（营销能力，个人品牌）\r\n* 自我管理，持续学习，基本财务、法务管理（运营能力）\r\n\r\n>一个人拥有这些能力，一个人就是一个公司，完全拥有了随时自由交易的能力，这就是**`自由职业态`**\r\n\r\n###观点\r\n\r\n**自由职业态的自由，是指自己的能力达到了能与企业自由交易的程度和状态**\r\n\r\n**现状**\r\n\r\n* 羡慕自由职业者的‘’自由”，而我想要的是真正的自由，不是一种表面的自由的假象。\r\n* 目前距离职业自由态还有很长的路要走。现在处于雇佣阶段，自己完全是需要依赖企业来生存，目前要做的服从企业，就是提高自己能力。\r\n* 当自己达到了自由职业态时，我会选择更深一步的与企业合作，借助企业实现自己的个人理想，或许真的到那个时间，我所做的事情就不是单单为了金钱，应该是为了自己目标想法，借助企业的力量来完成自己的想法，同时也给企业带来更多的利益。','观察自由职业者：公众眼中最具幸福感的职业三大好处：时间自由地点自由不要看上司脸色三大缺点收入不稳定社交范围窄心里负担大概念自由职业者诱惑人的关键：自由这个自由的概念模糊：可以选择什么时间上班，在哪上班，但是还是需要面对客户的最后期限关系自由，你依然有可能选择自己不喜欢的客户，他的......','正常',59,'规划','规划'),('ARTICLE20180402042022276','TAX20180329053014072','2018-04-02 16:20:22','2019-01-07 00:30:00','组合式工作','###概念\r\n\r\n**感受**\r\n\r\n* 仅仅依靠工作来支撑的人生不够完美，无法装载下自己的热情、奉献还有对于家庭的责任\r\n* 与其让生活和工作对立，不如工作生活整合\r\n\r\n**查尔斯·汉迪的`组合式工作`**\r\n\r\n* 6个月时间上班（有薪工作）\r\n* 3个月时间学习（学习工作）\r\n* 2个月时间和家人在一起（家庭工作）\r\n* 1个月从事义务工作（义务工作）\r\n\r\n>1.连续的全职工作，学习和陪家人，效率会非常高，往往比零碎的学习的人快的多。\r\n2.家庭工作和义务工作会给人提高归属感和意义感\r\n3.学习工作能够持续提升自己\r\n4.有薪工作虽然只用了一半时间来完成，但是全身心的投入，收入和产出也会高很多。\r\n\r\n###策略\r\n\r\n**组合式工作避免了一般自由职业者的最大几个问题**\r\n\r\n* 缺乏归属感\r\n* 与社会接触不通畅\r\n* 工作缺乏意义感\r\n* 没有办法持续的学习\r\n\r\n**方法**\r\n\r\n作为还没有达到自由职业态的我们，不可能以一年为单位来划分我们的工作，所以我们可以以周为单位来进行安排划分。\r\n\r\n**尝试**\r\n\r\n画一个正方形，分为四个部分，分别是你的工作，学习，家庭，义务工作，并在定下来之后，坚持做下去\r\n\r\n###我的想法\r\n\r\n**现状**\r\n\r\n工作：毕业设计（9.0-11.30,14.30-17.00）\r\n学习：学习技术知识（12.00-14.00,19.00-21.00）\r\n家庭：\r\n义务：\r\n\r\n**期望**\r\n\r\n一天分三份：8小时给工作，8小时给睡眠，8小时给自己\r\n计划是理想的，实际情况总是弄得人焦头烂额，如果某一天，没有完成，也不必自责，只想着把明天过得更好就可以了。\r\n还是那句话：**`与其让生活和工作对立，不如让生活和工作整合`**','概念感受仅仅依靠工作来支撑的人生不够完美，无法装载下自己的热情、奉献还有对于家庭的责任与其让生活和工作对立，不如工作生活整合查尔斯·汉迪的组合式工作6个月时间上班（有薪工作）3个月时间学习（学习工作）2个月时间和家人在一起（家庭工作）1个月从事义务工作（义务工作）1.连续的全职工作，学......','正常',56,'规划','规划'),('ARTICLE20180403084150311','TAX20180329053014072','2018-04-03 20:41:50','2019-01-07 00:30:00','三种新的职业形态和方式','###概念\r\n\r\n**在地青年**\r\n\r\n`一种全新的工作机会，也是一种把工作和生活融合的可能`\r\n\r\n* 全球化思考，本地化行动\r\n* 在都市以外拥有自己的生活舞台，回到当地发展\r\n* 已“在地生成，全网销售”的方式发展自己的事业\r\n\r\n为什么选择在地青年\r\n\r\n* 互联网和物流发达给了二三线城市一个崛起的机会\r\n* 随着消费升级，真正特色的、自然的当地优质资源正在变得越来越稀缺\r\n* 用人成本低，生活压力小，独特的生活环境，更加符合人的生活本性\r\n\r\n**新工匠**\r\n \r\n `找到一门你独特的手艺，成为一个手艺人也越来越成为一个好的选择`\r\n\r\n* 在中国传统思想中，“道”很重要，而“术”被放到了不重要的地方，导致了中国匠人精神处于稍微次要的地位\r\n* 随着消费升级和第三产业的发展，现代社会的匠人正在越来越多的涌现出来\r\n\r\n如果你有独特的功能、手艺或者停不下来能做到极致的爱好，也会成为一种职业的可能\r\n\r\n**社会企业与工艺**\r\n\r\n`可以考虑加入比较流行的社会企业，或者在你的企业做社会效益的事`\r\n\r\n* 在经济压力小的情况下，可以追寻社会意义感\r\n* 发现身边的社会问题，通过公益、社会企业和企业公益活动解决\r\n\r\n###策略\r\n\r\n>总的来说以上介绍的三种可能的职业形态和方式属于小众范围，大部分的人是无法去实践以上的方式，所以介绍这些东西主要想对你有一些启发，在自己的职业道路上有所帮助\r\n\r\n**现代工作者内驱的动力：自主、精专以及意义感**\r\n\r\n* 追求自由自在的在地青年\r\n* 追求精专的新工匠\r\n* 追求意义感的社会企业\r\n\r\n在地青年通过地理资源定位，新工匠通过自己痴迷一个领域定位，公益和社会企业通过身边你自己关心的社会问题定位\r\n\r\n虽然这些职业形态比较小众，但也是构成了职业的各种可能。正所谓：`参差百态，乃人类幸福本源`\r\n\r\n###我的观点\r\n\r\n虽然这些职业形态和形式比较新颖，但是对于目前的我来说不适合，这些职业的形式对我未来职业形式指引了方向。处于不同阶段的我，对于职业的认识都是不一样的，追求的也不一样。刚入职场，我想要的是提升自己，待自己有了一定的能力，我就会追求自由，等到完全自由后，我或许就会去追求工作的意义。所以这是一个渐进的过程，对当前的我来说这只是一个未来方向的指引','概念在地青年一种全新的工作机会，也是一种把工作和生活融合的可能全球化思考，本地化行动在都市以外拥有自己的生活舞台，回到当地发展已“在地生成，全网销售”的方式发展自己的事业为什么选择在地青年互联网和物流发达给了二三线城市一个崛起的机会随着消费升级，真正特色的、自然的当地优质资源正在变得越来......','正常',59,'规划','规划'),('ARTICLE20180404110135951','TAX20180329053014072','2018-04-04 11:01:35','2019-01-07 00:30:00','适合自己的工作','###模型\r\n\r\n职业的四个要素\r\n\r\n* 个人能力：能力、学历、资源......\r\n* 个人需求：经济、成长、成就感......\r\n* 职业要求：结果、绩效、指标......\r\n* 职业回馈：金钱、荣誉......\r\n\r\n成功和幸福\r\n\r\n如果一个人的个人能力总是和职业要求匹配的话，这个人的绩效好，评分高......，也就是说这个人在这个职位上很`成功`\r\n如果一个人的个人需求总是和职业回馈匹配的话，这个人有成长，收入高，成就感强......他也就会感到比较`幸福`\r\n\r\n###策略\r\n\r\n三个问题检测职业健康度\r\n\r\n* 在自己的工作中，最需要提升的是自己成功度还是幸福度？换句话说对自己的工作是干不好，还是不想干？\r\n* 提升成功度（干不好），那么是对职位要求不够了解，还是个人能力不足？\r\n* 提升幸福度（不想干），那么是否知道自己真正想要什么？是否知道如何让职位的回馈变成你想要的？\r\n\r\n好姑娘难追，好工作难找，值得去的地方，永无捷径，能力和回报都是匹配的\r\n个人能力和职位要求匹配，个人需求和职位回馈匹配，这样才能获得成功感和幸福感\r\n\r\n这种平衡和匹配如果打破，相互匹配的两者就需要有所改变，如果一直保持不平衡状态，也不去改变，那么就会出现抱怨。\r\n\r\n`抱怨是一种无能的贪婪`\r\n\r\n个人能力不足，自然不能满足职位需求，两者不平衡，就会抱怨工作难度大，安排不合理......\r\n完不成工作，不能获得相应的职位回馈，满足不了个人需求，就会抱怨职位的回馈太低......\r\n \r\n `对外部要求越高的人，往往个人的能力就越差`\r\n\r\n人和环境总是动态匹配的，相互适应的，你的职位需求在升级，你的个人能力也就需要升级。个人需求变高的同时，你的能力也成长了，获得的职业回馈也就会变高，满足你的需求，你就可以和环境互相匹配，共同成长。\r\n\r\n###个人观点\r\n\r\n目前需要提升的成功感，还没正式工作对工作的要求还没有能够明确的了解，也不清楚自己的能力是否跟工作匹配。但是从整个行业和自己将要发展的方向来看，自己的能力还不能匹配以后的职业要求，所以目前提高自己的个人能力是重要的事情。\r\n还有就是要减少抱怨，当有不顺的事情发生时，要分析原因找到根源，单纯的抱怨只会让自己情绪更加糟糕，也不能解决问题。','模型职业的四个要素个人能力：能力、学历、资源……个人需求：经济、成长、成就感……职业要求：结果、绩效、指标……职业回馈：金钱、荣誉……成功和幸福如果一个人的个人能力总是和职业要求匹配的话，这个人的绩效好，评分高……，也就是说这个人在这个职位上很成功如果一个人的个人需求总是和职业回馈匹配的话，......','正常',49,'规划','规划'),('ARTICLE20180405041320112','TAX20180329053014072','2018-04-05 16:13:20','2019-01-07 00:30:00','职业匹配的两种策略','###概念\r\n\r\n**资源策略**\r\n\r\n从自己已有的能力的资源出发，先做好手边的事，能做什么做什么，能做好什么做好什么\r\n\r\n* 现实主义的跟随策略\r\n* 效率高、务实，可以立即开始，见效速度快，压力小\r\n* 做的事情可能不是自己想做的，得到的回馈也可能不是自己想要的，长时间导致惰性，总待在自己的舒适圈里\r\n\r\n**愿景策略**\r\n\r\n从自己的需求出发，思考要满足自己的需求，自己缺乏什么？需要填补什么？\r\n\r\n* 理想主义的领跑策略\r\n* 能得到自己想要的东西\r\n* 获得成果的周期长，容易走进完美主义的误区，最终白白耗费精力\r\n\r\n###策略\r\n\r\n**不同的职业类型，有不同的策略**\r\n\r\n资源策略适用：\r\n\r\n* 专业知识门槛不高\r\n* 实践经验大于知识\r\n* 在工作中可以边做边练，尽早开始做，练中学\r\n* 例如：销售、行政、人力等，这些领域专业知识门槛不高，但是做好需要有丰富的实操经验\r\n\r\n愿景策略适用：\r\n\r\n* 需要完整的知识积累\r\n* 要有完整的训练体系\r\n* 在进入工作前就需要对该领域有较深的了解\r\n* 例如：医生、律师、程序研发等，这些领域对专业技能知识门槛比较高，做好这些领域需要长时间的完整的知识学习和训练\r\n\r\n**职业发展的不同阶段，有不同的策略**\r\n\r\n* 刚进入职场，进入一个新的组织、圈子，你只是一个新兵，最好的策略就是跟随，先搞清楚需求，先适应新环境，然后做出一定成绩。\r\n* 度过前期的适应期，你就可以更换为愿景策略，这时你已经有了成功的经验，在工作上也有所成绩，就有了话语权，也有了能力的筹码。组织就会主动思考满足你的需求，你就可以开始领跑自己工作了。\r\n\r\n###我的观点\r\n\r\n就目前的毕业设计来说，导师安排的毕业设计任务就属于“有什么做好什么”，而自己的这个网站，就属于“做自己想做的事”。因为两者的压力都不是很大，所以可以同时进行。可是以后进入真正的工作后，压力要更大，可能这两者就要分开在不同阶段来完成。\r\n我的工作属于计算机行业的，也就是入门的门槛稍高的行业，所以对于刚入职的我会选择跟随策略，在满足公司的需求的同时，多了解公司的资源、培训，借助组织提供的服务来提高自己，帮助自己度过适应期，到达稳定期可以做自己想做的。','概念资源策略从自己已有的能力的资源出发，先做好手边的事，能做什么做什么，能做好什么做好什么现实主义的跟随策略效率高、务实，可以立即开始，见效速度快，压力小做的事情可能不是自己想做的，得到的回馈也可能不是自己想要的，长时间导致惰性，总待在自己的舒适圈里愿景策略从自己的需求出发，思考要满足自己......','正常',45,'规划','规划'),('ARTICLE20180406045923955','TAX20180329053014072','2018-04-06 16:59:23','2019-01-07 00:30:00','职业生涯三阶段','###概念\r\n\r\n**生存期**\r\n\r\n生存期主要需求主要是生存手段，目标就是要尽快经济独立\r\n\r\n**发展期**\r\n\r\n发展期的主要需求是迅速提升自己能力和快速发展，此时已经越过收入看增速\r\n\r\n**事业期**\r\n\r\n事业期就是找到成功的内在标准，做自己感兴趣的事，越过外界评价，回归自我内心\r\n\r\n`作为一个职场人，每个阶段都必须走过，可以加速但是不可越过`\r\n\r\n###策略\r\n\r\n自己处于哪个阶段\r\n\r\n**财务评估**\r\n\r\n* 经济没有独立，收支不平衡，入不敷出——生存期\r\n* 收支平衡，经济独立，收入可以满足开销还有剩余——发展期\r\n* 财务自由，完全不需要因为钱来工作——事业期\r\n\r\n**职业驱动力**\r\n\r\n* 核心诉求是收入——生存期\r\n* 核心诉求是外在成功感和能力资源提升——发展期\r\n* 核心诉求是内在成功感和意义感——事业期\r\n\r\n当每天早上驱使你起床的是梦想的时候，你应该就进入事业期了。\r\n\r\n今天的你不管是在赚钱谋生，还是在努力链接资源提升自己，还是在寻求自我价值，你都是在自我实现的道路上。\r\n\r\n###我的观点\r\n诗和远方是一定要有的，但是要从理解和接收现实开始的第一个台阶开始。不管处于哪个阶段，走好每一步才能，最终走向远方。\r\n目前的我，身在生存期，心在发展期，虽然还没有收入，但是正式工作了，有了收入后生活也不会很困难，所以提升自己能力和资源对目前来说才是重要的。想往实现自我发展，前面的两个阶段至关重要，没有度过生存期，没有经济支撑，一切都是妄想，没有度过发展期，没有足够的能力和资源，只能是心有余而力不足，所以扎实前两个阶段，走向第三阶段才是唯一的通路。','概念生存期生存期主要需求主要是生存手段，目标就是要尽快经济独立发展期发展期的主要需求是迅速提升自己能力和快速发展，此时已经越过收入看增速事业期事业期就是找到成功的内在标准，做自己感兴趣的事，越过外界评价，回归自我内心作为一个职场人，每个阶段都必须走过，可以加速但是不可越过策略自己处于哪......','正常',34,'规划','规划'),('ARTICLE20180406081124977','TAX20180406053014072','2018-04-06 20:11:24','2019-01-07 00:30:00','设计模式入门：策略模式','>文章中部分定义和解释性文字，都是引用百度百科，主要的代码及场景应用为本人原创\n\n**策略模式属于对象的行为模式。其用意是针对一组算法，将每一个算法封装到具有共同接口的独立的类中，从而使得它们可以相互替换。策略模式使得算法可以在不影响到客户端的情况下发生变化。**\n\n>场景：我在设计一个后台管理系统时有一个主题更换的需求，要求是有预制的几套主题样式，同时还能用户自定义样式，针对这个需求可以采用策略模式\n\n**设计**\n\n![这里写图片描述](https://img-blog.csdn.net/20180406192917142?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RlbHVuZHVzaWpp/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n\n**构成**\n\n* 抽象策略角色： 策略类，通常由一个接口或者抽象类实现（ThemeColor，ThemeBackground）。\n* 具体策略角色：包装了相关的算法和行为（DefaultColor，DefaultBackground ...）。\n* 环境角色：持有一个策略类的引用，最终给客户端调用(Theme)。\n\n**实现**\n\n`代码地址：https://github.com/telundusiji/designpattern`\n\nThemeColor 颜色接口\n```\npublic interface ThemeColor {\n    void color();\n}\n```\n\nThemeBackground 背景接口\n```\npublic interface ThemeBackground {\n    void background();\n}\n```\nDefaultColor  默认颜色\n```\npublic class DefaultColor implements ThemeColor {\n    public void color() {\n        System.out.println(\"默认的主题色\");\n    }\n}\n```\nBlueColor  蓝色（其他实现）\n```\npublic class BlueColor implements ThemeColor {\n    public void color() {\n        System.out.println(\"蓝色的主题色\");\n    }\n}\n```\nDefaultBackground  默认背景\n```\npublic class DefaultBackground implements ThemeBackground {\n    public void background() {\n        System.out.println(\"默认的背景\");\n    }\n}\n```\nSkyBackground 天空背景（其他实现）\n```\npublic class SkyBackground implements ThemeBackground{\n    public void background() {\n        System.out.println(\"Sky的背景\");\n    }\n}\n```\nTheme  主题（应用场景）\n```\npublic class Theme {\n    private ThemeColor color;\n    private ThemeBackground background;\n\n    public Theme() {\n        this.color = new DefaultColor();\n        this.background = new DefaultBackground();\n    }\n\n    public Theme(ThemeColor color, ThemeBackground background) {\n        this.color = color;\n        this.background = background;\n    }\n\n    public ThemeColor getColor() {\n        return color;\n    }\n\n    public void setColor(ThemeColor color) {\n        this.color = color;\n    }\n\n    public ThemeBackground getBackground() {\n        return background;\n    }\n\n    public void setBackground(ThemeBackground background) {\n        this.background = background;\n    }\n\n    public void show() {\n        color.color();\n        background.background();\n    }\n}\n```\n**经典应用**\nJDK中的java.util.Comparator和import java.util.Collections.sort(list,comparator);\n\n* Comparator接口为抽象策略角色\n* 每一个实现Comparator接口的类为具体策略角色\n* Collections.sort()为环境角色\n\n这样只要实现Comparator接口的类只需要指明两个实例是如何比较大小，就可以使用sort方法实现排序，而无需知道排序所使用什么算法。\n\n**优缺点**\n\n优点：\n\n*  策略模式提供了管理相关的算法族的办法。策略类的等级结构定义了一个算法或行为族。恰当使用继承可以把公共的代码转移到父类里面，从而避免重复的代码。\n*  策略模式提供了可以替换继承关系的办法。\n*  使用策略模式可以避免使用多重条件转移语句。\n\n缺点：\n\n* 客户端必须知道所有的策略类，并自行决定使用哪一个策略类。\n*  策略模式造成很多的策略类，每个具体策略类都会产生一个新类，这样会导致策略类太多不便于管理维护','文章中部分定义和解释性文字，都是引用百度百科，主要的代码及场景应用为本人原创策略模式属于对象的行为模式。其用意是针对一组算法，将每一个算法封装到具有共同接口的独立的类中，从而使得它们可以相互替换。策略模式使得算法可以在不影响到客户端的情况下发生变化。场景：我在设计一个后台管理系统时有一个主......','正常',70,'设计模式','设计模式,策略模式'),('ARTICLE20180407023316220','TAX20180329053014072','2018-04-07 14:33:16','2019-01-07 00:30:00','迁移技能','###观察\r\n\r\n* 能力的修炼是一个漫长的过程，但是行业在飞速发展，二者如何统一？\r\n* 我们很容易关注到新事物的价值，却时常忽视当前所拥有东西的价值\r\n* 当需要领域迁移时，可以从现有价值中拆分出最有价值的部分，带到新的领域继续增值\r\n\r\n###概念\r\n\r\n**能力三核**\r\n\r\n* 知识：领域专业知识、概念、做事情的流程，通过学习记忆而来。例如：为解决具体某个问题看得知道书籍、遵循的流程\r\n* 技能：我们能熟练操作和完成一系列动作，通过训练而来。例如：写作、分析问题、解决问题、时间管理等\r\n* 才干：我们通过大量练习，内化到无意识使用的一些技能、品质和特质，是先天天赋和后天大量练习的混合，通过大量训练，从技能内化而成。例如：乐观、决断力、洞察力，幽默感等\r\n\r\n每个人的能力中间，都隐藏着可以被回收和迁移的技能，这些技能我们称为可迁移能力。\r\n\r\n* 隔行如隔山，相隔的是知识，而技能可以在不同职业领域迁移，才干可以在生活工作的各个方面延伸。\r\n* 能力可以组合，就可以拆分。拆分出来的技能、才干可以迁移到新的领域继续修炼，所以进入新的领域并不需要完全的重新开始\r\n\r\n###我的观点\r\n\r\n问题：做成这么一件事——多年后回想起来，那件事给你了很大的帮助，在那期间提升的能力很大程度的成就了今天的自己？分析一下到底从中学到了哪些技能和才干？\r\n（`有待以后回答`）','观察能力的修炼是一个漫长的过程，但是行业在飞速发展，二者如何统一？我们很容易关注到新事物的价值，却时常忽视当前所拥有东西的价值当需要领域迁移时，可以从现有价值中拆分出最有价值的部分，带到新的领域继续增值概念能力三核知识：领域专业知识、概念、做事情的流程，通过学习记忆而来。例如：为解决具体某个......','正常',53,'规划','规划'),('ARTICLE20180407063327367','TAX20180406053014072','2018-04-07 18:33:27','2019-01-07 00:30:00','设计模式入门：观察者模式','>文章中部分定义和解释性文字，都是引用百度百科，主要的代码及场景应用为本人原创\n\n**一个目标物件管理所有相依于它的观察者物件，并且在它本身的状态改变时主动发出通知**\n\n>场景：我在设计我个人网站时，有一个留言功能。其中有一个需求是：当管理员在后台回复留言后，要做三件事（1）更改数据库，将处理完的留言标记为已处理（2）将答复内容通过邮件发送给留言人（3）给管理员一个提示告诉他，邮件已经发出。\n\n其实面对这个场景，完全可以使用顺序的方式来完成这一系列操作，先更新数据库，再发送邮件，最后给管理员消息提示。但是这种设计不容易拓展与维护，如果以后需要增加新的操作，是需要修改整个逻辑结构。鉴于这个三个操作没有严格的关联要求，所以可以使用观察者模式。\n\n**设计**\n\n[![](https://img-blog.csdn.net/20180407180503173?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RlbHVuZHVzaWpp/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)](https://img-blog.csdn.net/20180407180503173?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RlbHVuZHVzaWpp/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n**构成**\n\n* 抽象观察者角色：为所有的具体观察者定义一个接口，在得到主题通知时更新自己。（Observer）\n* 具体被观察者角色：也就是一个具体的主题，在集体主题的内部状态改变时，所有登记过的观察者发出通知。（LeaveMessageSubject）\n* 具体观察者角色：实现抽象观察者角色所需要的更新接口，一边使本身的状态与制图的状态相协调。（ChangeDB，NotifyMessage，ReplyEmail）\n\n**实现**\n\n`代码地址：https://github.com/telundusiji/designpattern`\n\nObserver 抽象观察者\n```\npublic interface Observer {\n    void update(Message message);\n}\n```\nChangeDB 具体观察者，更新数据库\n```\n@Slf4j\npublic class ChangeDB implements Observer {\n    public void update(Message message) {\n        log.info(\"留言:{},{},{},在数据库中更新！\",message.id,message.name,message.content);\n    }\n}\n```\nNotifyMessage 具体观察者 给管理员进行消息提示\n```\n@Slf4j\npublic class NotifyMessage implements Observer{\n    public void update(Message message) {\n        log.info(\"留言:{},{},{},已通过邮件回复\",message.id,message.name,message.content);\n    }\n}\n```\nReplyEmail  具体观察者 发送邮件\n```\n@Slf4j\npublic class ReplyEmail implements Observer {\n    public void update(Message message) {\n        log.info(\"留言:{},{},{},发送邮件...\",message.id,message.name,message.content);\n    }\n}\n```\nLeaveMessageSubject 具体被观察者 message更新时通知所有观察者\n```\npublic class LeaveMessageSubject {\n    List<Observer> observers;\n    private Message message;\n    public LeaveMessageSubject() {\n        observers = new ArrayList<Observer>();\n    }\n\n    public void addObserver(Observer observer){\n        observers.add(observer);\n    }\n\n    public boolean removeObserver(Observer observer){\n        return observers.remove(observer);\n    }\n\n    public void notifyObserver(){\n        for(Observer o : observers){\n            o.update(message);\n        }\n    }\n\n    public void setMessage(Message message) {\n        this.message = message;\n        notifyObserver();\n    }\n}\n```\nMessage  留言实体\n```\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@Builder\npublic class Message {\n    int id;\n    String name;\n    String email;\n    String content;\n}\n```\n\n**经典应用**\n\n在servlet中Listener就是使用观察者模式\n\n* EventListener 抽象的观察者\n* ServletContextAttributeListener，ServletRequestAttributeListener...都是具体观察者\n* HttpServletRequest...可以认为是具体被观察者\n\n例如：当HttpServletRequest 调用setAttribute方法时，就会去调用notifyAttributeAssigned方法，此方法会创建对应的事件对象，然后通知所有观察改事件的观察则进行更新\n>具体细节可以去看源码','文章中部分定义和解释性文字，都是引用百度百科，主要的代码及场景应用为本人原创一个目标物件管理所有相依于它的观察者物件，并且在它本身的状态改变时主动发出通知场景：我在设计我个人网站时，有一个留言功能。其中有一个需求是：当管理员在后台回复留言后，要做三件事（1）更改数据库，将处理完的留言标记为......','正常',81,'设计模式','设计模式,观察者模式'),('ARTICLE20180408010324550','TAX20180329053014072','2018-04-08 13:03:24','2019-01-07 00:30:00','能力萃取','###概念\r\n\r\n能力萃取：从你过去的成功事件中，提取出能力精华，然后放到另外一个领域去的能力\r\n\r\n**一个例子：**\r\n\r\n在一次朋友聚会上，你向新朋友介绍自己\r\n\r\n版本一\r\n\r\n>我篮球打得不错，带团队拿过全市篮球比赛第一名\r\n\r\n版本二\r\n\r\n>我篮球打得还可以，大四的时候带团队拿过全市篮球比赛第一名，那是我们学校历年来第一次进入前三。 其实我的身体素质不算出色，所以我选择做后卫，做后卫就要把中远投球做到最好。人应该有死磕一个技术到完美的能力，所以我的中远投还不错；带团队的时候，我还学到了如何让一群牛人通力合作，培养了我的领导力；有一次我们差点出局，我却认为这是一个反败为胜的机会，在中场休息时做了一个演讲，激励了大家。后来我看了一本书，才知道原来这个叫“逆商”。 现在遇到一个新事情，我就会应用这种做事的方式——先看清全局找到自己的站位，然后反复精进让自己的一个优势做到最好；再带领一群牛人，让他们相互协作；一旦遇到低谷，我觉得这反而是一个机会，我会让大家逆势而动。\r\n\r\n* 第一种说法，大家留下的唯一印象就是这个人篮球打得不错，下次打篮球可以叫上他。\r\n* 第二种说法，大家会觉得这个人能力不错，有管理团队，带团队的能力，在缺乏团队管理，甚至在创业的时候或许就会叫上你加入。\r\n\r\n\r\n\r\n**能力萃取的三步：**\r\n\r\n* 讲一件你的确做得很不错的事\r\n* 萃取出一个名词——XX能力，让大家理解这是什么能力\r\n* 告诉或者暗示大家，它对于你的新的领域有什么用\r\n\r\n###策略\r\n\r\n**你做的不错的事情什么**\r\n\r\n* 从之前工作中挖，即使是一件小事也不要忽略\r\n* 从自己的爱好中挖，你的什么兴趣、爱好、小团体做到过得极致\r\n* 从生活中挖，你有在哪方面做的很出色吗？\r\n\r\n**给自己能力封一个对方能听得懂的名字**\r\n\r\n12项基本能力：反应力、亲和力、乐观力、目标发现力、持续学习力、语境理解力、专业建构力、人脉开拓力、委任力、商谈力、传授力、协调力。\r\n\r\n![这里写图片描述](https://img-blog.csdn.net/2018040812321082?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RlbHVuZHVzaWpp/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\r\n<center style=\"font-size:8;\" >图片来源：得到《超级个体》</center>\r\n\r\n**迁移到新的领域**\r\n\r\n* 能力的萃取并不是忽悠，能力萃取是你要实实在在做过这些事情，而并不是编造是实，然后忽悠人。\r\n* 到现在，你说你不喜爱工作，没关系，问题在于你都没有拼命的玩，拼命地生活——连玩和生活都不努力，那么你的生命有什么是值得萃取的？\r\n\r\n能力萃取的前提是你真的在下聪明人的笨功夫，让生命中有精华可以提炼——做的认真，玩的努力，生活的全力以赴\r\n\r\n###我的观点\r\n\r\n刚过去的寒假，我本来打算学习一下新技术，然后写一些自己学习博客，但是我不想去发在别人的平台，于是我就想自己写一个自己的网站。于是在寒假每天都是早上8点就开始完成这个工作，晚上一直工作到晚上9点，就这样大概花了三周时间完成了一个个人的网站，整个系统的代码都是自己写，不仅练习了自己的写代码能力，同时也提高了自己设计水平。\r\n从这件事我看一看到：\r\n\r\n* 持续学习能力：我能在较短的的时间学习我设计自己网站所需要的新技能\r\n* 抵抗诱惑的能力：在寒假这种时期，人很容易有惰性，但是我还是坚持来完成代码编写\r\n* 做出决策和解决问题的能力：在整个设计中当然后遇到很多问题，我都能最终想出解决方案\r\n* 执行力：在最初有这个想法后，我就开始构思，然后开始设计实现\r\n\r\n\r\n\r\n\r\n**附录**\r\n\r\n<center>**各种可迁移能力**</center>\r\n![各种可迁移能力](https://img-blog.csdn.net/20180408124603808?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RlbHVuZHVzaWpp/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\r\n<center>图片来源：得到《超级个体》</center>','概念能力萃取：从你过去的成功事件中，提取出能力精华，然后放到另外一个领域去的能力一个例子：在一次朋友聚会上，你向新朋友介绍自己版本一我篮球打得不错，带团队拿过全市篮球比赛第一名版本二我篮球打得还可以，大四的时候带团队拿过全市篮球比赛第一名，那是我们学校历年来第一次进入前三。 其实我......','正常',60,'规划','规划'),('ARTICLE20180408052716176','TAX20180406053014072','2018-04-08 17:27:16','2019-01-07 00:30:00','设计模式入门：装饰者模式','>文章中部分定义和解释性文字，都是引用百度百科，主要的代码及场景应用为本人原创\n\n**装饰模式指的是在不必改变原类文件和使用继承的情况下，动态地扩展一个对象的功能。它是通过创建一个包装对象，也就是装饰来包裹真实的对象。**\n\n>场景：我在我的网站设计时，一个图片处理的需求，上传照片要加水印，同时如果照片过大还要进行缩放，为了满足特定位置的大小，还需要进行裁剪。对于上面需求我想到了使用装饰者模式来设计，这样方便以后拓展功能，同时也不会对现有功能造成影响\n\n**设计**\n\n![这里写图片描述](https://img-blog.csdn.net/20180408165401190?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RlbHVuZHVzaWpp/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n**构成**\n\n* 抽象构件（Component）角色：给出一个抽象接口，以规范准备接收附加责任的对象。（ImgEdit）\n* 具体构件（Concrete Component）角色：定义一个将要接收附加责任的类。（ReadImg）\n* 装饰（Decorator）角色：持有一个构件（Component）对象的实例，并实现一个与抽象构件接口一致的接口。（ImgDecorator）\n* 具体装饰（Concrete Decorator）角色：负责给构件对象添加上附加的责任。（ImgCut，ImgWatermark，ImgZoom）\n\n**实现**\n\n`代码地址：https://github.com/telundusiji/designpattern`\n\n抽象构件\n```\npublic abstract class ImgEdit {\n    public abstract void handle();\n}\n```\n\n具体构件  读取图片\n```\n@Slf4j\npublic class ReadImg extends ImgEdit {\n    private String path;\n    public ReadImg(String path){\n        this.path = path;\n    }\n    public void handle() {\n        log.info(\"图片{}读取中...\",path);\n        log.info(\"读取完成！\");\n    }\n}\n\n```\n抽象装饰者 \n```\npublic abstract class ImgDecorator extends ImgEdit{\n    private ImgEdit imgEdit;\n\n    public ImgDecorator(ImgEdit imgEdit) {\n        this.imgEdit = imgEdit;\n    }\n\n    public ImgEdit getImgEdit() {\n        return imgEdit;\n    }\n}\n```\n具体装饰者  图片剪裁\n```\n@Slf4j\npublic class ImgCut extends ImgDecorator {\n    public ImgCut(ImgEdit imgEdit) {\n        super(imgEdit);\n    }\n\n    public void handle() {\n        getImgEdit().handle();\n        log.info(\"裁剪操作...\");\n        log.info(\"裁剪操作完成\");\n    }\n}\n\n```\n具体装饰者  图片添加水印\n```\n@Slf4j\npublic class ImgWatermark extends ImgDecorator {\n    public ImgWatermark(ImgEdit imgEdit) {\n        super(imgEdit);\n    }\n    public void handle() {\n        getImgEdit().handle();\n        log.info(\"添加水印...\");\n        log.info(\"添加水印完成\");\n    }\n}\n```\n具体装饰者  图片缩放\n```\n@Slf4j\npublic class ImgZoom extends ImgDecorator {\n    public ImgZoom(ImgEdit imgEdit) {\n        super(imgEdit);\n    }\n\n    public void handle() {\n        getImgEdit().handle();\n        log.info(\"缩放操作...\");\n        log.info(\"缩放操作完成\");\n    }\n}\n\n```\n**经典应用**\n\nJDK中的IO类\n\n* InputStream 抽象构件\n* FileInputStream 具体构件\n* FilterInputStream 抽象装饰者（虽然不是一个抽象类）\n* BufferedInputStream、DataInputStream、PushbackInputStream ... 具体装饰者\n\n其实你也可以自己继承FilterInputStream 设计自己的装饰者\n\n**优缺点**\n\n优点：\n\n*  Decorator模式与继承关系的目的都是要扩展对象的功能，但是Decorator可以提供比继承更多的灵活性。\n* 通过使用不同的具体装饰类以及这些装饰类的排列组合，可以创造出很多不同行为的组合，可以避免类爆炸\n\n缺点：\n\n*  这种比继承更加灵活机动的特性，也增加了复杂性\n*  装饰模式会导致设计中出现许多小类，如果过度使用，会使程序变得复杂。','文章中部分定义和解释性文字，都是引用百度百科，主要的代码及场景应用为本人原创装饰模式指的是在不必改变原类文件和使用继承的情况下，动态地扩展一个对象的功能。它是通过创建一个包装对象，也就是装饰来包裹真实的对象。场景：我在我的网站设计时，一个图片处理的需求，上传照片要加水印，同时如果照片过大还......','正常',82,'设计模式','设计模式,装饰者模式'),('ARTICLE20180409023347108','TAX20180406053014072','2018-04-09 14:33:47','2019-01-07 00:30:00','设计模式入门：单例模式','>文章中部分定义和解释性文字，都是引用百度百科，主要的代码及场景应用为本人原创\r\n\r\n**在它的核心结构中只包含一个被称为单例的特殊类。通过单例模式可以保证系统中，应用该模式的类一个类只有一个实例。**\r\n\r\n>场景：在设计我的个人网站时，有一个站点配置的类，用于存放配置信息（备案号，联系方式等），这个类要求整个系统只能有一个，所以就可以采用单例模式\r\n\r\n**设计**\r\n\r\n单例三要素\r\n\r\n* 私有的构造方法\r\n* 指向自己实例的私有静态引用\r\n* 以自己实例为返回值的静态的公有的方法\r\n\r\n介绍三种设计方式\r\n\r\n* 饿汉模式：不用考虑并发问题，但是不管是否使用该实例，都会在类加载时就创建实例，大量使用该方式会造成内存的不必要开销\r\n* 懒汉模式（双重检验）：可以解决并发问题，但每次获取单例对象时都要判空，可能会影响性能\r\n* 懒汉模式（静态内部类）：解决并发问题，也不需要进行判空，比较好的解决了以上两个问题（`推荐`）\r\n\r\n**实现**\r\n\r\n`代码地址：https://github.com/telundusiji/designpattern`\r\n\r\n饿汉模式\r\n\r\n```\r\npublic class HungerSingleton {\r\n    private final static HungerSingleton singleton = new HungerSingleton();\r\n    private HungerSingleton(){}\r\n    public static HungerSingleton getInstance(){\r\n        return singleton;\r\n    }\r\n\r\n}\r\n```\r\n\r\n懒汉模式 双重校验\r\n```\r\npublic class LazySingletonTypeOne {\r\n    private static volatile LazySingletonTypeOne singleton = null;\r\n    private LazySingletonTypeOne(){}\r\n    public static LazySingletonTypeOne getInstance(){\r\n        if(singleton == null){\r\n            synchronized (LazySingletonTypeOne.class){\r\n                if(singleton == null){\r\n                    singleton = new LazySingletonTypeOne();\r\n                }\r\n            }\r\n        }\r\n        return singleton;\r\n    }\r\n}\r\n```\r\n\r\n懒汉模式 静态内部类\r\n\r\n```\r\npublic class LazySingletonTypeTow {\r\n    private LazySingletonTypeTow(){}\r\n    private static class innerClass{\r\n        public final static LazySingletonTypeTow singleton = new LazySingletonTypeTow();\r\n    }\r\n    public static LazySingletonTypeTow getInstance(){\r\n        return innerClass.singleton;\r\n    }\r\n}\r\n\r\n```\r\n\r\n**经典应用**\r\n\r\nJDK 中的Runtime类，该类可用来执行DOS命令\r\n\r\nRuntime 单例部分的代码\r\n```\r\npublic class Runtime {\r\n    private static Runtime currentRuntime = new Runtime();\r\n\r\n    /**\r\n     * Returns the runtime object associated with the current Java application.\r\n     * Most of the methods of class <code>Runtime</code> are instance\r\n     * methods and must be invoked with respect to the current runtime object.\r\n     *\r\n     * @return  the <code>Runtime</code> object associated with the current\r\n     *          Java application.\r\n     */\r\n    public static Runtime getRuntime() {\r\n        return currentRuntime;\r\n    }\r\n\r\n    /** Don\'t let anyone else instantiate this class */\r\n    private Runtime() {}\r\n    //...\r\n}\r\n```\r\n\r\n**优缺点**\r\n\r\n优点\r\n\r\n* 实例控制：单例模式会阻止其他对象实例化其自己的单例对象的副本，从而确保所有对象都访问唯一实例。\r\n\r\n缺点\r\n\r\n* 对象生存期：如果实例化的对象长时间不被利用，系统会认为是垃圾而被回收，这将导致对象状态的丢失','文章中部分定义和解释性文字，都是引用百度百科，主要的代码及场景应用为本人原创在它的核心结构中只包含一个被称为单例的特殊类。通过单例模式可以保证系统中，应用该模式的类一个类只有一个实例。场景：在设计我的个人网站时，有一个站点配置的类，用于存放配置信息（备案号，联系方式等），这个类要求整个系统......','正常',82,'设计模式','设计模式,单例模式'),('ARTICLE20180409125224760','TAX20180329053014072','2018-04-09 12:52:24','2019-01-07 00:30:00','乐高式能力结构','###概念\r\n\r\n技能迁移不仅有好处也有坏处\r\n\r\n**正迁移**\r\n\r\n* 两个技能输入一致，输出一致，就容易正迁移\r\n* 蛙泳和蝶泳，都是腰部发力，四侧对称，学好蛙泳的人，学习蝶泳就比较容易\r\n\r\n**负迁移**\r\n\r\n* 两个技能输入一致，但是输出不同，甚至相反，就会形成负迁移\r\n* 羽毛球和网球，羽毛球是手腕发力，网球是手臂发力，手腕绷直，同时学习这两种运动，就容易形成干扰，相互影响学习\r\n\r\n###策略\r\n\r\n**如何顺利进行正迁移**\r\n\r\n* 扎实的技能才有可能进行迁移。基础打好了，架子搭稳了才能往外搬，否则就一搬就散了。做好手头事，好好练功。\r\n* 接触陌生的目标时，不要先急着动手，先思考目标和结果，反推完成这个事情需要什么能力，那些可以从其他技能中迁移过来，那些需要调整。\r\n* 避免在同一时间学习太多相近技能。同时练习学习太多相近技能，容易负迁移，导致最后什么都没有学会\r\n\r\n**乐高式能力结构**\r\n\r\n* 职场千变万化，我们要有一种以不变应万变的方式，就是技能迁移和组合。\r\n* 在不同的任务中可以拼装出不同的能力\r\n* 在不同的角色中组合出不同的能力\r\n* 流动的形态，不乱在哪里，你的样子总是最新版的\r\n\r\n###我的观点\r\n\r\n我目前想修炼的三个核心能力是：与工作相关的技术知识、与团队的内外沟通能力、计划和组织的能力。\r\n\r\n* 技术知识可以让我有足够的基础来完成一些任务，至少不会因为技术问题，而想不出解决方案。\r\n* 沟通能力可以让我在工作和生活中顺利的与人交流表达我的想法，从而提高了自己的效率。\r\n* 计划和组织能力可以帮助我把一个想法或者任务变成现实，在遇到任务或者是问题时，先分析然后制定计划，然后将多个任务或者问题进行组织，使解决思路清晰，也提高了效率','概念技能迁移不仅有好处也有坏处正迁移两个技能输入一致，输出一致，就容易正迁移蛙泳和蝶泳，都是腰部发力，四侧对称，学好蛙泳的人，学习蝶泳就比较容易负迁移两个技能输入一致，但是输出不同，甚至相反，就会形成负迁移羽毛球和网球，羽毛球是手腕发力，网球是手臂发力，手腕绷直，同时学习这两种运动，就容......','正常',51,'规划','规划'),('ARTICLE20180410014509006','TAX20180329053014072','2018-04-10 13:45:09','2019-01-07 00:30:00','清零术——Stay hungry，Stay foolish','###概念\r\n\r\n人的本性中，三大非理性行为\r\n\r\n* 我们总是对自己已经拥有的东西迷恋到不能自拔\r\n* 我们总是把注意力集中到自己会失去什么，而不是会得到什么，对于损失有一种强烈的恐惧\r\n* 我们经常假定别人看待问题的角度和自己一样\r\n\r\n`所有权依赖症`：无论是有形的东西（车子、房子......），还是无形的东西（观点、看法......），在拥有之后，人们对它们的依恋珍视程度会大有提升。\r\n\r\n`所有权依赖症`用到变化很快的职场和商业中会让人失去正确的判断。、\r\n\r\n* 非理性的迷恋自己的存量，对新增的变化估值过低\r\n* 对新增变化投入过少，失去更新自己的机会，就只保有存量，无法增长\r\n* 迷恋存量，失去增量，一直循环，就不会进步，最终导致你占用的东西占用了你\r\n\r\n**策略**\r\n\r\n如何清零存量，投入增量，持续增长\r\n\r\n* 清零能力，每个两年重新评估自己的能力，关注潜在能力，当前需求，升值空间大的能力\r\n* 清零简历，每个一年更新自己简历，增加新的有价值的事，删除以前辉煌的但对现在的你没有价值的事\r\n* 清零知识，要定时清理的知识的学习方向，书架是用来放自己必读和要看的书目，而不是已读书目的展示台\r\n* 不断学习，跨界学习。适当的学习，其他领域的知识，学习一个新的领域知识或许会打开一个新的思维方式的世界\r\n\r\n###我的观点\r\n\r\n**一切从零开始** 还记得这句话是我高中时的座右铭，当时的心理就是要告诉自己不要自满自足。现在理解，我有了更深一层的理解，不仅仅是不要自满自足，还有时刻注意形势变化，学会审视自己，更新自己，过去的成功只是满足过去那个时代的形势，如今世界变化如此之快，如果不及时更新自己，沉浸在以前拥有的东西中，最终就会被淘汰。\r\n**如果你的公司今天倒掉，你能凭什么能力找到下一份工作？**\r\n作为计算机行业的从业人员（还未入职），就我的认知来说，我未来发展有两个方向：第一就是我把自己的技术学的很厉害，再加上我工作中熟悉的某一领域业务的流程，或许我可以顺利的找到下一份工作：第二就是我要全面的学习各种业务，锻炼自己的管理能力，使自己在一个领域的业务中有深刻独到见解，再加上自己的管理能力，团队协作能力，也可以顺利找到下一份工作。','概念人的本性中，三大非理性行为我们总是对自己已经拥有的东西迷恋到不能自拔我们总是把注意力集中到自己会失去什么，而不是会得到什么，对于损失有一种强烈的恐惧我们经常假定别人看待问题的角度和自己一样所有权依赖症：无论是有形的东西（车子、房子……），还是无形的东西（观点、看法……），在拥有之后，人们对......','正常',47,'规划','规划'),('ARTICLE20180410053932027','TAX20180406053014072','2018-04-10 17:39:32','2019-01-07 00:30:00','设计模式入门：简单工厂','>文章中部分定义和解释性文字，都是引用百度百科，主要的代码及场景应用为本人原创\n\n**简单工厂模式是由一个工厂对象决定创建出哪一种产品类的实例。简单工厂模式是工厂模式家族中最简单实用的模式，可以理解为是不同工厂模式的一个特殊实现。**\n\n>场景：在一个管理系统中，有三种用户：管理员，一般用户，匿名用户。为了维护方便，该系统运行在维护时使用临时用户，所以需要一个可以创建三种类型的临时用户的功能。这里就可以使用简单工厂来创建临时用户，并进行相应初始化。\n\n**设计**\n\n![这里写图片描述](https://img-blog.csdn.net/2018041017250592?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RlbHVuZHVzaWpp/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n**构成**\n\n* 工厂（Creator）角色：简单工厂模式的核心，它负责实现创建所有实例的内部逻辑。工厂类的创建产品类的方法可以被外界直接调用，创建所需的产品对象。（SimpleFactory）\n* 抽象产品（Product）角色：简单工厂模式所创建的所有对象的父类，它负责描述所有实例所共有的公共接口。（User）\n* 具体产品（Concrete Product）角色：是简单工厂模式的创建目标，所有创建的对象都是充当这个角色的某个具体类的实例。（AdminUser，AnonymousUser，NormalUser）\n\n**实现**\n\n`代码地址：https://github.com/telundusiji/designpattern`\n\n抽象产品  User\n\n```\n@Data\npublic abstract class User {\n    private String name;\n    private String role;\n\n    public abstract void init();\n}\n```\n\n具体产品 管理员临时用户\n\n```\npublic class AdminUser extends User {\n    @Override\n    public void init() {\n        setName(\"临时用户：张三\");\n        setRole(\"管理员\");\n    }\n}\n```\n\n具体产品 匿名临时用户\n\n```\npublic class AnonymousUser extends User {\n    @Override\n    public void init() {\n        setName(\"临时用户：XX\");\n        setRole(\"匿名用户\");\n    }\n}\n```\n\n具体产品 一般临时用户\n\n```\npublic class NormalUser extends User {\n    @Override\n    public void init() {\n        setName(\"临时用户：李四\");\n        setRole(\"一般\");\n    }\n}\n```\n\n工厂\n\n```\npublic class SimpleFactory {\n    public enum Type{\n        ADMIN{\n            protected User getUser(){\n                return new AdminUser();\n            }\n        },\n        NORMAL{\n            protected User getUser(){\n               return new NormalUser();\n            }\n        },\n        ANONYMOUS{\n            protected User getUser(){\n                return new AnonymousUser();\n            }\n        };\n        protected User getUser(){\n            return null;\n        }\n    }\n\n    public static <T> T createUser(Type type,Class<T> tClass){\n        User user = type.getUser();\n        user.init();\n        return (T)user;\n    }\n}\n\n```\n\n**优缺点**\n\n优点：\n\n* 工厂类包含了真个类创建的逻辑，外界仅仅需要负责“消费”对象就可以了，而不必管创建及组织过程，明确了各自的职责和权利\n\n缺点：\n\n* 由于工厂类集中了所有实例的创建逻辑，违反了高内聚责任分配原则，所以如果需要添加新的类，则就需要改变工厂类了。\n* 当系统中的具体产品类增多，工厂类的创建实例的逻辑会变得复杂，对系统的维护和扩展非常不利；','文章中部分定义和解释性文字，都是引用百度百科，主要的代码及场景应用为本人原创简单工厂模式是由一个工厂对象决定创建出哪一种产品类的实例。简单工厂模式是工厂模式家族中最简单实用的模式，可以理解为是不同工厂模式的一个特殊实现。场景：在一个管理系统中，有三种用户：管理员，一般用户，匿名用户。为了维......','正常',59,'设计模式','设计模式,简单工厂'),('ARTICLE20180411032005619','TAX20180406053014072','2018-04-11 15:20:05','2019-01-07 00:30:00','设计模式入门：工厂方法模式','>文章中部分定义和解释性文字，都是引用百度百科，主要的代码及场景应用为本人原创\n\n**工厂方法模式的核心精神是封装类中不变的部分，提取其中个性化善变的部分为独立类，通过依赖注入以达到解耦、复用和方便后期维护拓展的目的**\n\n>场景：在简单工厂的场景上，有了新的需求：创建管理员用户时，需要指定ID：0~100，名字为：admin，有效时长：10分钟；创建一般用户时，需要指定ID：100~200，名字为：与ID相同，有效时长：5分钟；创建匿名用户时，需要指定ID：200~300，名字为：anonymous，有效时长：1分钟 。用户实例化完成后要激活用户。\n\n**设计**\n\n![这里写图片描述](https://img-blog.csdn.net/20180411150049422?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RlbHVuZHVzaWpp/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n**结构**\n\n* 抽象工厂(Creator)角色：任何在模式中创建的对象的工厂类必须实现这个接口。（UserFactory）\n* 具体工厂(Concrete Creator)角色：这是实现抽象工厂接口的具体工厂类，包含与应用程序密切相关的逻辑，并且受到应用程序调用以创建产品对象。（AdminUserFactory，AnonymousUserFactory，NormalUserFactory）\n* 抽象产品(Product)角色：工厂方法模式所创建的对象的超类型，也就是产品对象的共同父类或共同拥有的接口。（User）\n* 具体产品(Concrete Product)角色：这个角色实现了抽象产品角色所定义的接口。某具体产品有专门的具体工厂创建。（AdminUser，AnonymousUser，NormalUser）\n\n**实现**\n\n`代码地址：https://github.com/telundusiji/designpattern`\n\n抽象产品 抽象用户\n\n```\n@Data\npublic abstract class User {\n    private int id;\n    private String name;\n    private String role;\n    private long active;\n    private boolean status;\n\n    public abstract void init(int id,String name,long active);\n}\n```\n\n具体产品 管理员用户\n\n```\npublic class AdminUser extends User {\n\n    @Override\n    public void init(int id, String name, long active) {\n        setId(id);\n        setName(name);\n        setRole(\"管理员\");\n        setActive(active);\n    }\n}\n```\n\n具体产品 匿名用户\n\n```\npublic class AnonymousUser extends User {\n\n    @Override\n    public void init(int id, String name, long active) {\n        setId(id);\n        setName(name);\n        setRole(\"匿名用户\");\n        setActive(active);\n    }\n}\n\n```\n\n具体产品 一般用户\n\n```\npublic class NormalUser extends User {\n\n    @Override\n    public void init(int id, String name, long active) {\n        setId(id);\n        setName(name);\n        setRole(\"一般用户\");\n        setActive(active);\n    }\n}\n```\n\n抽象工厂 \n\n```\n@Slf4j\npublic abstract class UserFactory {\n    public abstract User createUser();\n    public void userActive(User user){\n        user.setStatus(true);\n        log.info(\"{}激活成功！\",user.toString());\n    }\n}\n```\n\n具体工厂 管理员工厂\n\n```\npublic class AdminUserFactory extends UserFactory {\n    @Override\n    public User createUser() {\n        AdminUser adminUser = new AdminUser();\n        adminUser.init((int)(Math.random()*100),\"admin\",1000*60*10);\n        userActive(adminUser);\n        return adminUser;\n    }\n}\n```\n\n具体工厂  匿名用户工厂\n\n```\npublic class AnonymousUserFactory extends UserFactory{\n    @Override\n    public User createUser() {\n        AnonymousUser anonymousUser = new AnonymousUser();\n        anonymousUser.init((int)(Math.random()*100+200),\"anonymous\",1000*60*1);\n        userActive(anonymousUser);\n        return anonymousUser;\n    }\n}\n```\n\n具体工厂 一般用户工厂\n\n```\npublic class NormalUserFactory extends UserFactory {\n    @Override\n    public User createUser() {\n        NormalUser normalUser = new NormalUser();\n        int id = (int)(Math.random()*100+100);\n        normalUser.init(id,String.valueOf(id),1000*60*5);\n        userActive(normalUser);\n        return normalUser;\n    }\n}\n\n```\n\n**经典应用**\n\njava.net.URLStreamHandlerFactory 是一个工厂方法的典型应用：\n\n* 抽象工厂：java.net.URLStreamHandlerFactory \n* 具体工厂：实现URLStreamHandlerFactory 接口的类\n* 抽象产品：java.net.URLStreamHandler\n* 具体产品：继承URLStreamHandler抽象类并实现其抽象方法的类\n\n**总结**\n\n* 工厂方法(Factory Method)模式的意义是定义一个创建产品对象的工厂接口，将实际创建工作推迟到子类当中。核心工厂类不再负责产品的创建，仅负责具体工厂子类必须实现的接口，可以使系统在不修改具体工厂角色的情况下引进新的产品。\n* 工厂方法模式是简单工厂模式的衍生，实现‘开－闭 原则’，实现了可扩展。其次更复杂的层次结构，可以应用于产品结果复杂的场合。','文章中部分定义和解释性文字，都是引用百度百科，主要的代码及场景应用为本人原创工厂方法模式的核心精神是封装类中不变的部分，提取其中个性化善变的部分为独立类，通过依赖注入以达到解耦、复用和方便后期维护拓展的目的场景：在简单工厂的场景上，有了新的需求：创建管理员用户时，需要指定ID：0~100，......','正常',87,'设计模式','设计模式,工厂方法模式'),('ARTICLE20180411105551940','TAX20180329053014072','2018-04-11 10:55:51','2019-01-07 00:30:00','你和物品的关系','###概念\r\n\r\n`断舍离`：是通过收拾物品来了解自己，整理自己内心的混沌，让人生活更舒适的行为技术\r\n\r\n* 断：断绝不需要的东西——少买（入口）\r\n* 舍：舍弃多余的废物——多扔（出口）\r\n* 离：脱离对物品的迷恋——不执迷于物欲（理想状态）\r\n\r\n整理改变自己的过程\r\n\r\n* 不断审视自己与物品的关系：发现身边所有“不需要、不合适、不舒服”的东西\r\n* 通过审视，将关注的重心从物品转移到自我。在对物品的整理中，重新认识、发现和肯定自我\r\n* 把物品替换为你自己“需要、适合、舒服”的东西。把真实的自我固化到生活中去，精神面貌也就随之改变\r\n\r\n###策略\r\n\r\n人们舍不得扔东西的原因大概分为三类：执着过去、逃避现实、担忧未来\r\n\r\n**执着过去**\r\n\r\n* 典型“所有权依赖症”患者\r\n* 保留着对现在和未来没有用的东西\r\n* 珍视过去没有错误，但不能因此丢掉未来\r\n\r\n**逃避现实**\r\n\r\n* 关注的事太多，每个都放不下，低效率的忙着\r\n* 不愿意面对今天现实的生活状况，就不面对，让东西堆在那里。东西越堆越多，人就越沮丧，就越不愿面对。\r\n\r\n**担忧未来**\r\n\r\n* 思维模式“这些东西迟早要用到”\r\n* 对来充满恐惧，把东西都屯着\r\n\r\n###我的观点\r\n\r\n我通过观察自己的生活发现自己的心智模式三种都有。\r\n\r\n* 执着过去：我收拾自己的东西时，总是不舍得把以前的东西扔掉，比如以前的火车票，出去旅游的一些门票，总是觉得这些东西是自己经历的凭证，不舍得扔掉\r\n* 逃避现实：我遇整理我的东西时总是喜欢拖延，然后让一大堆东西堆在那里，一直想着等有时间再整理，等到想整理了，就堆积了一大堆，看着就就会崩溃\r\n* 担忧未来：我新买的东西里面带的一些配件，或者是之前坏掉的东西，我总是觉得以后还有用不舍得扔，保存了一大堆\r\n\r\n所以我要先从整理自己的身边的东西开始，慢慢改变自己的观念，先从自己的书桌开始，然后是自己的衣物吗，然后是房间，扔掉没有用的，留下有价值的为未来腾出空间。','概念断舍离：是通过收拾物品来了解自己，整理自己内心的混沌，让人生活更舒适的行为技术断：断绝不需要的东西——少买（入口）舍：舍弃多余的废物——多扔（出口）离：脱离对物品的迷恋——不执迷于物欲（理想状态）整理改变自己的过程不断审视自己与物品的关系：发现身边所有“不需要、不合适、不舒服”的东西通......','正常',35,'规划','规划'),('ARTICLE20180412012457502','TAX20180329053014072','2018-04-12 13:24:57','2019-01-07 00:30:00','清理的四个策略','###策略\r\n\r\n**明确一个观念，清理的主角不是物品，而是现在的自己**\r\n\r\n* 考虑的重点不是“很可惜”、“还能用吗”、“不能用了吗”，而是“这个东西需要吗？适合吗？舒服吗？”\r\n* “已自己而不是物品”为主角，“以现在而不是过去或者遥远的未来”去思考什么东西最合适自己\r\n\r\n**从“怎么看都不合适不舒服的东西”开始下手，单点突破**\r\n\r\n* 减少、分类、归纳\r\n* 从自己看不顺眼的东西开始处理，阻力最小，最容易下手，收拾到人一看就神清气爽的程度\r\n\r\n**更好更聪明的舍弃**\r\n\r\n* 利用网络App转手一些对别人有价值的东西\r\n* 和朋友互换有价值的物品\r\n* 每天丢掉，或者送掉一两件小物品\r\n\r\n**通过总量限制和“每次主义”，从源头上防止物品泛滥**\r\n\r\n* 降低自己库存量，每次都只在必需的时候再购入这次所需要的物品\r\n* 清理物品，就是清理自己，让自己进入一种自动自发，利用物品又不会执迷的境界\r\n\r\n###我的观点\r\n\r\n对于本次的主题来说，主要是行动，所以在写这个我的观点时，其实我已经把我的桌面给清理了一下，虽然有舍不得扔的东西，但是仔细一想，确实没有什么用处，还占空间，每次要找东西，都得花很长时间，清理后舒适了很多。\r\n所以对于这个主题关键是行动，清理身边的每一个方面，自己的手机桌面，电脑桌面，文件，书桌，衣柜...','策略明确一个观念，清理的主角不是物品，而是现在的自己考虑的重点不是“很可惜”、“还能用吗”、“不能用了吗”，而是“这个东西需要吗？适合吗？舒服吗？”“已自己而不是物品”为主角，“以现在而不是过去或者遥远的未来”去思考什么东西最合适自己从“怎么看都不合适不舒服的东西”开始下手，单点突破减少、......','正常',46,'规划','规划'),('ARTICLE20180412064841698','TAX20180406053014072','2018-04-12 18:48:41','2019-01-07 00:30:00','设计模式入门：抽象工厂模式','>文章中部分定义和解释性文字，都是引用百度百科，主要的代码及场景应用为本人原创\r\n\r\n**抽象工厂模式是指当有多个抽象角色时，使用的一种工厂模式。抽象工厂模式可以向客户端提供一个接口，使客户端在不必指定产品的具体的情况下，创建多个产品族中的产品对象。**\r\n\r\n>场景：在工厂方法的场景上，新增需求：创建的管理员用户，使用密码认证，权限为rwx；创建的一般用户，使用随机4位数字认证，权限rw-;创建的匿名用户，无需认证，权限为r--。用户，认证方式，权限就成为了向关联的产品族，可以使用抽象工厂模式\r\n\r\n**设计**\r\n\r\n![这里写图片描述](https://img-blog.csdn.net/20180412183138300?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RlbHVuZHVzaWpp/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\r\n\r\n**实现**\r\n\r\n`代码地址：https://github.com/telundusiji/designpattern`\r\n\r\n由于这次设计的类比较多，所以在这里只附上部分代码，完整代码打开上面链接\r\n\r\n抽象产品 用户\r\n\r\n```\r\n@Data\r\npublic abstract class User {\r\n    private int id;\r\n    private String name;\r\n    private String role;\r\n    private long active;\r\n\r\n    public abstract void init(int id,String name,long active);\r\n}\r\n```\r\n\r\n抽象产品 认证方式\r\n\r\n```\r\n@Data\r\npublic abstract class Credentials {\r\n\r\n    private String credentials;\r\n\r\n    public abstract void initCredentials();\r\n\r\n    public abstract boolean confirm(String credentials);\r\n}\r\n```\r\n\r\n抽象产品 系统权限\r\n\r\n```\r\n@Data\r\npublic abstract class SystemPermission {\r\n    private boolean read;\r\n    private boolean write;\r\n    private boolean execute;\r\n\r\n    public SystemPermission(boolean read, boolean write, boolean execute) {\r\n        this.read = read;\r\n        this.write = write;\r\n        this.execute = execute;\r\n    }\r\n\r\n    public String getPermission(){\r\n        return (read?\"r\":\"-\")+(write?\"w\":\"-\")+(execute?\"x\":\"-\");\r\n    }\r\n}\r\n```\r\n\r\n抽象工厂\r\n\r\n```\r\npublic interface Factory {\r\n    User createUser();\r\n\r\n    Credentials createCredentials();\r\n\r\n    SystemPermission createSystemPermission();\r\n}\r\n```\r\n\r\n具体工厂 管理员产品族工厂\r\n\r\n```\r\npublic class AdminAccountFactory implements Factory {\r\n    @Override\r\n    public User createUser() {\r\n        AdminUser adminUser = new AdminUser();\r\n        adminUser.init((int)(Math.random()*100),\"admin\",1000*60*10);\r\n        return adminUser;\r\n    }\r\n\r\n    @Override\r\n    public Credentials createCredentials() {\r\n        Credentials credentials = new PasswordCredentials();\r\n        credentials.initCredentials();\r\n        return credentials;\r\n    }\r\n\r\n    @Override\r\n    public SystemPermission createSystemPermission() {\r\n        return new AllSystemPermission();\r\n    }\r\n}\r\n\r\n```\r\n\r\n具体工厂 一般用户产品族工厂\r\n\r\n```\r\npublic class NormalAccountFactory implements Factory {\r\n    @Override\r\n    public User createUser() {\r\n        NormalUser normalUser = new NormalUser();\r\n        int id = (int)(Math.random()*100+100);\r\n        normalUser.init(id,String.valueOf(id),1000*60*5);\r\n        return normalUser;\r\n    }\r\n\r\n    @Override\r\n    public Credentials createCredentials() {\r\n        Credentials credentials = new RandomNumCredentials();\r\n        credentials.initCredentials();\r\n        return credentials;\r\n    }\r\n\r\n    @Override\r\n    public SystemPermission createSystemPermission() {\r\n        return new RWSystemPermission();\r\n    }\r\n}\r\n\r\n```\r\n\r\n具体工厂 匿名用户产品族工厂\r\n\r\n```\r\npublic class AnonymousAccountFactory implements Factory{\r\n    @Override\r\n    public User createUser() {\r\n        AnonymousUser anonymousUser = new AnonymousUser();\r\n        anonymousUser.init((int)(Math.random()*100+200),\"anonymous\",1000*60*1);\r\n        return anonymousUser;\r\n    }\r\n\r\n    @Override\r\n    public Credentials createCredentials() {\r\n        return new NoneCredentials();\r\n    }\r\n\r\n    @Override\r\n    public SystemPermission createSystemPermission() {\r\n        return new RSystemPermission();\r\n    }\r\n}\r\n\r\n```\r\n\r\n\r\n**使用场景**\r\n\r\n* 系统不依赖于产品类实例如何被创建，组合和表达的细节。\r\n* 系统的产品有多于一个的产品族，而系统只消费其中某一族的产品\r\n* 同属于同一个产品族是在一起使用的。这一约束必须在系统的设计中体现出来。\r\n* 系统提供一个产品类的库，所有产品以同样的接口出现，从而使客户端不依赖于实现。\r\n\r\n**经典使用**\r\n\r\nspring的两个特性IOC和AOP，其中IOC特性就是工厂模式+反射机制+单例模式的结合应用，这个设计很经典，感兴趣可以深入了解一下','文章中部分定义和解释性文字，都是引用百度百科，主要的代码及场景应用为本人原创抽象工厂模式是指当有多个抽象角色时，使用的一种工厂模式。抽象工厂模式可以向客户端提供一个接口，使客户端在不必指定产品的具体的情况下，创建多个产品族中的产品对象。场景：在工厂方法的场景上，新增需求：创建的管理员用户，......','正常',87,'设计模式','设计模式,抽象工厂'),('ARTICLE20180413032436894','TAX20180329053014072','2018-04-13 15:24:36','2019-01-07 00:30:00','别让梦想阻碍你的成功','###一个问题\r\n\r\n`**告诉为，你狂野而宝贵的一生，准备用来做什么？**`\r\n\r\n###概念\r\n\r\n梦想是一种对自己未来的积极期待，这种期待蕴含着神奇的力量。\r\n\r\n神奇的一面：\r\n\r\n* 我们大脑，对现实和幻想无法明确区分，对两者会做出同样的反应\r\n* 幻想一个积极乐观的结果时，你等于在跨越现实，直接体验到一个最好的未来\r\n* 想最好的一面，坚持到底，最后就有神奇的结果\r\n\r\n不利的一面：\r\n\r\n* 单纯的乐观对于成功也许是一种阻碍，除非这种乐观来自于这个人的实力以及过去生活经验的评估\r\n* 乐观的幻想在我们的脑子中形成美梦成真的假象，也消耗着我们的动力\r\n* 乐观的幻想让你专注好的部分，而容易忽略现实的障碍，一但在现实中遇到意外或者打击，这个人就会彻底崩溃\r\n\r\n让你开始启动的，一定是梦想和希望，但是并不仅仅是乐观的期待，还需要背后的实力和坚持行动，才能最终梦想成真\r\n\r\n###策略\r\n\r\n如何让梦想帮助你成功\r\n\r\n**有了目标先行动**\r\n\r\n* 有了梦想先行动，至少90天以后再公布，以免丧失行动的动力\r\n* 可以自己做愿景板，但是尽量不要告诉别人，以免让周围的社会认同降低你的行动欲望\r\n* 稳定以后可以向大家讲述，再获取持续的动力\r\n\r\n**尽快找的梦想的现实投影——榜样**\r\n\r\n* 在现实中找一个标杆人物，学习他走向成功道路上克服了那些阻碍\r\n* 思考自己如果遇到这些问题，该如何处理\r\n\r\n**尽快从幻想中醒来，找到与目标配套的障碍解决办法和行动方案**\r\n\r\n* 实际行动才是走向成功的方法，梦想只是给你行动的开始指明了方向\r\n\r\n###我的观点\r\n\r\n很想做但是没有做成的事：\r\n\r\n* 减肥：这或许是我上大学以来一直伴随着我的问题吧，每次减肥开始，我都容易幻想如果我瘦下来了会怎么样，渐渐的坚持的运动，坚持的习惯就慢慢忘了，最后都无疾而终\r\n* 进入知名大型的互联网公司：我从找工作开始就一直奔着这个方向，但是在应对笔试面试时，自己刚开始还好，一直认真准备复习知识，但是后面慢慢的就懒了，准备的不认真了，虽然最后签的公司也不错，但是不是我曾经幻想的企业','一个问题**告诉为，你狂野而宝贵的一生，准备用来做什么？**概念梦想是一种对自己未来的积极期待，这种期待蕴含着神奇的力量。神奇的一面：我们大脑，对现实和幻想无法明确区分，对两者会做出同样的反应幻想一个积极乐观的结果时，你等于在跨越现实，直接体验到一个最好的未来想最好的一面，坚持到底，最后就有......','正常',42,'规划','规划'),('ARTICLE20180413050833779','TAX20180406053014072','2018-04-13 17:08:33','2019-01-07 00:30:00','设计模式入门：命令模式','>文章中部分定义和解释性文字，都是引用百度百科，主要的代码及场景应用为本人原创\r\n\r\n**命令模式尝试以物件来代表实际行动。“行为请求者”与“行为实现者”通常呈现一种“紧耦合”，命令模式将一组行为抽象为对象，实现二者之间的松耦合**\r\n\r\n>场景：系统的中有多个任务，都有开关功能，而且系统中任务的数量类型都不固定，要求控制所有任务开关的这个控制器，有比较好的扩展性。所以使用命令模式，就可以比较好的解决这个问题\r\n\r\n**结构**\r\n\r\n* Command：定义命令的接口，声明执行的方法。（Command）\r\n* ConcreteCommand：命令接口实现对象，是“虚”的实现；通常会持有接收者，并调用接收者的功能来完成命令要执行的操作。（TaskStartCommand，TaskStopCommand）\r\n* Receiver：接收者，真正执行命令的对象。任何类都可能成为一个接收者，只要它能够实现命令要求实现的相应功能。（抽象接受者：Task，具体接受者：CleanTask，StatisticsTask）\r\n* Invoker：通常会持有命令对象，这个是客户端真正触发命令并要求命令执行相应操作的地方，相当于使用命令对象的入口。（Control）\r\n\r\n**设计**\r\n\r\n![这里写图片描述](https://img-blog.csdn.net/20180413165947828?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RlbHVuZHVzaWpp/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\r\n\r\n**实现**\r\n\r\n`代码地址：https://github.com/telundusiji/designpattern`\r\n\r\n接受者 抽象任务\r\n\r\n```\r\n@Data\r\npublic abstract class Task {\r\n    private String status;\r\n    public abstract void start();\r\n    public abstract void  stop();\r\n}\r\n```\r\n\r\n接受者 具体任务 清理任务\r\n\r\n```\r\n@Slf4j\r\npublic class CleanTask extends Task{\r\n    @Override\r\n    public void start() {\r\n        setStatus(\"UP\");\r\n        log.info(\"CleanTask is working...\");\r\n    }\r\n\r\n    @Override\r\n    public void stop() {\r\n        log.info(\"CleanTask is shutdown!\");\r\n        setStatus(\"DOWN\");\r\n    }\r\n\r\n}\r\n\r\n```\r\n\r\n接受者 具体任务 统计任务\r\n\r\n```\r\n@Slf4j\r\npublic class StatisticsTask extends Task {\r\n    @Override\r\n    public void start() {\r\n        setStatus(\"UP\");\r\n        log.info(\"StatisticsTask is working...\");\r\n    }\r\n\r\n    @Override\r\n    public void stop() {\r\n        log.info(\"StatisticsTask is shutdown!\");\r\n        setStatus(\"DOWN\");\r\n    }\r\n}\r\n```\r\n\r\n抽象命令\r\n\r\n```\r\npublic abstract class Command {\r\n    public abstract void execute();\r\n}\r\n```\r\n\r\n具体命令 任务开始命令\r\n\r\n```\r\npublic class TaskStartCommand extends Command {\r\n    private Task task;\r\n\r\n    public TaskStartCommand(Task task) {\r\n        this.task = task;\r\n    }\r\n\r\n    @Override\r\n    public void execute() {\r\n        task.start();\r\n    }\r\n}\r\n\r\n```\r\n\r\n具体命令 任务停止命令\r\n\r\n\r\n```\r\npublic class TaskStopCommand extends Command {\r\n    private Task task;\r\n\r\n    public TaskStopCommand(Task task) {\r\n        this.task = task;\r\n    }\r\n\r\n    @Override\r\n    public void execute() {\r\n        task.stop();\r\n    }\r\n}\r\n\r\n```\r\n\r\n命令入口 \r\n\r\n```\r\npublic class Control {\r\n    private Command command;\r\n\r\n    public void setCommand(Command command){\r\n        this.command = command;\r\n    }\r\n\r\n    public void action() {\r\n        if(command==null){\r\n            return;\r\n        }\r\n        this.command.execute();\r\n    }\r\n}\r\n```\r\n\r\n**优缺点**\r\n\r\n优点：\r\n\r\n* 降低对象之间的耦合度。\r\n* 新的命令可以很容易地加入到系统中。\r\n* 可以比较容易地设计一个组合命令。\r\n\r\n缺点：\r\n\r\n* 命令类型太多就会导致命令类膨胀，所以使用该模式之前要经过全面思考，避免命令类太多膨胀，不便维护','文章中部分定义和解释性文字，都是引用百度百科，主要的代码及场景应用为本人原创命令模式尝试以物件来代表实际行动。“行为请求者”与“行为实现者”通常呈现一种“紧耦合”，命令模式将一组行为抽象为对象，实现二者之间的松耦合场景：系统的中有多个任务，都有开关功能，而且系统中任务的数量类型都不固定，要......','正常',64,'设计模式','设计模式,命令模式'),('ARTICLE20180414010340614','TAX20180329053014072','2018-04-14 13:03:40','2019-01-07 00:30:00','心里比对','###概念\r\n\r\n心里比对：在积极乐观的想象自己目标后，马上把现实中最大的障碍放到面前\r\n\r\n心里比对通过预演未来评估了这个事情成功的可能性，对于可行性高的事情，会投入更多的时间精力，而对于可行底的事情，就会投入少的时间作为尝试，或者直接放弃。\r\n\r\n心里对比，就是聚拢资源在可行之事，快速放下不可为之事的区分的智慧\r\n\r\n###策略\r\n\r\n在制定计划，思考目标时，思考以下问题：\r\n\r\n* 你最期待什么\r\n* 在当前情况下，这个期待的最好的结果是什么？\r\n* 在当前情况下，最大的实现障碍是什么？\r\n\r\n看见就是改变的开始，行动才是改变的抵达\r\n\r\n###我的观点\r\n\r\n这个方法其实听起来比较简单，就是在制定计划，目标之前要想一想好的地方，在想一想障碍，做一下对比，思考这个事的可行性。\r\n虽然听起来很简单，但是真正能行动吗？\r\n所以说看见就是改变的开始，行动才是改变的抵达\r\n \r\n 三个期待的目标\r\n\r\n**减肥**\r\n\r\n* 最好结果是到六月份拍毕业照是，我体重可以瘦到80kg\r\n* 最大的障碍，就是我减肥计划的坚持。运动：天气变化，可能会影响运动的评率和次数，同时如果长期坏天气，容易中断太久，难以重新开始；饮食：容易经不住诱惑，而食用太多高脂，高热量食物。\r\n* 解决方案：天气不好的情况下，不能户外运动，可以做一下室内运动，只要保持运动的评率，不中断太长时间即可；对于饮食，每天早上（或者中午要正确饮食），晚餐以水果为主，禁不住诱惑时，想一想XX（我的一个同学）从100kg减到75kg，自己就有动力了。\r\n\r\n**完成四级考试**\r\n\r\n* 最好的结果，通过今年的四级考试，同时也提高自己的英语水平\r\n* 最大障碍：自己懒惰，对于背单词，做试题容易疲倦。每天固定词汇识记，时间上容易往后拖，导致，拖到晚上，最终无法完成。周末做往年真题，周末事情繁杂，容易出现意外情况，导致任务不能完成。\r\n\r\n**学习专业技能**\r\n\r\n* 最好的结果：在毕业前，我就把基础知识和架构知识学习一遍，在入职时可以在众人中脱颖而出\r\n* 最大障碍：每天要完成毕业设计的相关事情，而毕业设计很容易拖，每天时间容易不固定导致，不够连续，出现懈怠。学习完成后，不能够及时练习，学过的知识不牢固容易忘记','概念心里比对：在积极乐观的想象自己目标后，马上把现实中最大的障碍放到面前心里比对通过预演未来评估了这个事情成功的可能性，对于可行性高的事情，会投入更多的时间精力，而对于可行底的事情，就会投入少的时间作为尝试，或者直接放弃。心里对比，就是聚拢资源在可行之事，快速放下不可为之事的区分的智慧策略在制......','正常',44,'规划','规划'),('ARTICLE20180414032907213','TAX20180406053014072','2018-04-14 15:29:07','2019-01-07 00:30:00','设计模式入门：适配器模式','>文章中部分定义和解释性文字，都是引用百度百科，主要的代码及场景应用为本人原创\n\n**配器模式将一个类的接口适配成用户所期待的**\n\n>场景：现在手机的数据接口有两种type-c和micro-usb，加入你现在有一个micro-usb的数据线，想给一个type-c接口的手机充电或者传输数据，这时你就需要一个适配器了；\n\n**方式**\n\n这里介绍两种适配器设计方式：\n\n* 对象适配器模式\n-- 在这种适配器模式中，适配器容纳一个它包裹的类的实例。适配器调用被包裹对象的物理实体。\n* 类适配器模式\n-- 这种适配器模式下，适配器继承自已实现的类（一般多重继承）。\n\n**设计**\n\n对象适配器\n\n![这里写图片描述](https://img-blog.csdn.net/20180414151643669?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RlbHVuZHVzaWpp/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n类适配器\n\n![这里写图片描述](https://img-blog.csdn.net/20180414151652985?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RlbHVuZHVzaWpp/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n\n**实现**\n\n`代码地址：https://github.com/telundusiji/designpattern`\n\n公共代码：\n\n目标接口 TypeC接口\n\n```\npublic interface TypeC {\n    void usb3Data();\n    void electric();\n}\n```\n\n源接口 MicroUSB\n\n```\npublic interface MicroUSB {\n    void usb2Data();\n    void electric();\n}\n```\n\n源 MicroUSB数据线 \n\n```\n@Slf4j\npublic class MicroUSBCable implements MicroUSB {\n    @Override\n    public void usb2Data() {\n        log.info(\"我是MicroUSB数据传输\");\n    }\n\n    @Override\n    public void electric() {\n        log.info(\"我是MicroUSB充电\");\n    }\n}\n\n```\n\n使用者 TypeC接口手机\n\n```\npublic class TypeCPhone {\n    public void charging(TypeC typeC){\n        typeC.electric();\n    }\n\n    public void dataTransfer(TypeC typeC){\n        typeC.usb3Data();\n    }\n}\n```\n\n######1、类适配器\n\n```\npublic class MicroUSBToTypeCAdapter extends MicroUSBCable implements TypeC {\n    @Override\n    public void usb3Data() {\n        super.usb2Data();\n    }\n\n    @Override\n    public void electric() {\n        super.electric();\n    }\n}\n\n```\n\n######2、对象适配器\n\n```\npublic class MicroUSBToTypeCAdapter implements TypeC {\n\n    private MicroUSB microUSB;\n\n    public MicroUSBToTypeCAdapter(MicroUSB microUSB) {\n        this.microUSB = microUSB;\n    }\n\n    @Override\n    public void usb3Data() {\n        microUSB.usb2Data();\n    }\n\n    @Override\n    public void electric() {\n        microUSB.electric();\n    }\n}\n\n```\n\n**经典使用**\n\nJDK中InputStreamReader和OutputStreamWriter分别实现了，Reader和Writer接口，创建实例时，分别需要传入InputStream和OutputStream对象，这是一个典型的对象适配器；\n\n* Reader和Writer时目标接口\n* InputStreamReader和OutputStreamWriter是对象适配器\n* InputStream和OutputStream是源接口\n\n将InputStream和OutputStream的源适配成Reader和Writer的目标','文章中部分定义和解释性文字，都是引用百度百科，主要的代码及场景应用为本人原创配器模式将一个类的接口适配成用户所期待的场景：现在手机的数据接口有两种type-c和micro-usb，加入你现在有一个micro-usb的数据线，想给一个type-c接口的手机充电或者传输数据，这时你就需要一个适......','正常',74,'设计模式','设计模式,适配器模式'),('ARTICLE20180415012246250','TAX20180329053014072','2018-04-15 13:22:46','2019-01-07 00:30:00','执行意图','###观察\n\n如何解决这些问题？\n\n* 在家想好的工作计划，一旦遇到具体的打断，情绪上来，就会完全懵了\n* 想好的回报总结，一遇到真人，就紧张，彻底崩溃\n* 制定好的节食计划，在饭桌面前就失效了\n\n###概念\n\n`执行意图`：针对某个愿望的明确意图——具体你要怎么做\n\n仅仅有目标是没有用的，目标执行一旦遇到障碍，往往计划就会纸上谈兵，所以需要执行具体的应急预案，帮助计划顺利执行。\n\n* 如果【if】（某个情景、状态）......那么【then】（某个反应）\n\n在执行计划前，给自己设计执行意图，将可能遇到的障碍和对应的解决方案进行预演。\n\n执行意图相当于在潜意识里给糟糕的情况做了一个预案，一旦遇到障碍，这个预案就会被唤醒，解决相应问题。\n\n###策略\n\nWOOP （心里比对）\n\n`W(愿望，Wish)——>O(结果，Outcome)——>O(障碍，Obstacle)——>P(计划，Plan)`\n\n* Wish：[寻找一个你内心的愿望，设定一件你最想完成的事](http://te-amo.site/user/article/info/ARTICLE20180413032436894)\n* Outcome：[如果达成，最好的结果是什么？](http://te-amo.site/user/article/info/ARTICLE20180414010340614)\n* Obstacle：[实现目标的过程中，你最担心发生的障碍是什么？](http://te-amo.site/user/article/info/ARTICLE20180414010340614)\n* Plan：在脑子里预演最好和最坏的情况，找到平衡点，制定计划\n\n最后给自己设计执行意图：\n如果（发生什么情况）......那么（我要真么做）\n\n**按最好的预期，做最坏的打算**\n\n###我的观点\n\n我会制定我自己的的WOOP，完成后会把连接附在这里。\n\n[WOOP：减肥](http://te-amo.site/user/article/info/ARTICLE20180416120804547)','观察如何解决这些问题？在家想好的工作计划，一旦遇到具体的打断，情绪上来，就会完全懵了想好的回报总结，一遇到真人，就紧张，彻底崩溃制定好的节食计划，在饭桌面前就失效了概念执行意图：针对某个愿望的明确意图——具体你要怎么做仅仅有目标是没有用的，目标执行一旦遇到障碍，往往计划就会纸上谈兵，所以需要......','正常',49,'规划','规划'),('ARTICLE20180415023014903','TAX20180406053014072','2018-04-15 14:30:14','2019-01-07 00:30:00','设计模式入门：外观模式','>文章中部分定义和解释性文字，都是引用百度百科，主要的代码及场景应用为本人原创\r\n\r\n**外观模式，为子系统中的一组接口提供一个一致的界面，定义一个高层接口，这个接口使得这一子系统更加容易使用。**\r\n\r\n>场景：系统有个清理的任务，需要清理三个地方的缓存：本地缓存，数据库缓存，FTP服务器缓存。如果让客户端直接调用三个清理系统，耦合性太高，不便于以后扩展，所以可以使用外观模式。\r\n\r\n**结果**\r\n\r\n* Facade：外观类为子系统提供一个共同的对外接口（Clean）\r\n* Clients：客户对象通过一个外观接口读写子系统中各接口的数据资源。（Main）\r\n\r\n**设计**\r\n\r\n![这里写图片描述](https://img-blog.csdn.net/2018041514191362?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RlbHVuZHVzaWpp/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\r\n\r\n\r\n**实现**\r\n\r\n 代码地址：[`https://github.com/telundusiji/designpattern`](https://github.com/telundusiji/designpattern) \r\n\r\n数据库清理\r\n\r\n```\r\n@Slf4j\r\npublic class DBClean {\r\n    public void clean(){\r\n        log.info(\"数据库缓存清理成功\");\r\n    }\r\n}\r\n\r\n```\r\n\r\nFTP服务器清理\r\n\r\n```\r\n@Slf4j\r\npublic class FtpClean {\r\n    public void clean(){\r\n        log.info(\"Ftp缓存清理成功\");\r\n    }\r\n}\r\n```\r\n\r\n本地清理\r\n\r\n```\r\n@Slf4j\r\npublic class LocalClean {\r\n    public void clean(){\r\n        log.info(\"本地缓存清理成功\");\r\n    }\r\n}\r\n```\r\n\r\n清理外观类\r\n\r\n```\r\npublic class Clean {\r\n    private DBClean dbClean;\r\n    private FtpClean ftpClean;\r\n    private LocalClean localClean;\r\n\r\n    public Clean(){\r\n        dbClean = new DBClean();\r\n        ftpClean = new FtpClean();\r\n        localClean = new LocalClean();\r\n    }\r\n\r\n    public void clean(){\r\n        dbClean.clean();\r\n        localClean.clean();\r\n        ftpClean.clean();\r\n    }\r\n}\r\n```\r\n\r\n**优点**\r\n\r\n* 实现了子系统与客户端之间的松耦合关系。\r\n* 客户端屏蔽了子系统组件，减少了客户端所需处理的对象数目，并使得子系统使用起来更加容易。\r\n\r\n**经典应用**\r\n\r\nSLF4J（Simple Logging Facade for Java）就是一个外观模式的实际应用。\r\n想了解更多可以去查询SLF4J相关资料','文章中部分定义和解释性文字，都是引用百度百科，主要的代码及场景应用为本人原创外观模式，为子系统中的一组接口提供一个一致的界面，定义一个高层接口，这个接口使得这一子系统更加容易使用。场景：系统有个清理的任务，需要清理三个地方的缓存：本地缓存，数据库缓存，FTP服务器缓存。如果让客户端直接调用......','正常',75,'设计模式','设计模式,外观模式'),('ARTICLE20180416010939282','TAX20180406053014072','2018-04-16 13:09:39','2019-01-07 00:30:00','设计模式入门：模板方法模式','**模板方法模式就是定义一个算法的骨架，而将具体的算法延迟到子类中实现**\r\n\r\n>场景：系统中有个创建资源的功能，分为四步：创建资源，上传到FTP服务器，保存到数据库，清理本地缓存。可以创建图片类型资源和文本类型资源，这样一来思考一下，其实就是创建的过程不同，而上传、保存，清理都是相同的算法处理，所以可以使用模板方法模式\r\n\r\n**结构**\r\n\r\n* 抽象类：实现了模板方法，定义了算法的骨架。（ResourceTemplate）\r\n* 具体类：实现抽象类中的抽象方法，实现完整的算法。（ImgResource,TextResource）\r\n\r\n**设计**\r\n\r\n![这里写图片描述](https://img-blog.csdn.net/20180416125954144?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RlbHVuZHVzaWpp/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\r\n\r\n\r\n**实现**\r\n\r\n代码地址:[`https://github.com/telundusiji/designpattern`](https://github.com/telundusiji/designpattern)\r\n\r\n资源创建的模板\r\n\r\n```\r\n@Slf4j\r\n@Data\r\npublic abstract class ResourceTemplate {\r\n\r\n    private String type;\r\n\r\n    protected abstract void create();\r\n\r\n    private final void uploadToFTP(){\r\n        String serverHost = null;\r\n        if(\"text\".equals(type)){\r\n            serverHost = \"text.ftp.xxxx.com\";\r\n        }else if(\"img\".equals(type)){\r\n            serverHost = \"img.ftp.xxxx.com\";\r\n        }else {\r\n            throw new RuntimeException();\r\n        }\r\n        log.info(\"上传到FTP服务器({})成功！\",serverHost);\r\n    }\r\n\r\n    private final void saveToDB(){\r\n        log.info(\"保存到数据库成功！\");\r\n    }\r\n\r\n    private final void clean(){\r\n        log.info(\"清理本地缓存成功！\");\r\n    }\r\n\r\n    public final void execute(){\r\n        create();\r\n        uploadToFTP();\r\n        saveToDB();\r\n        clean();\r\n    }\r\n}\r\n\r\n```\r\n\r\n图像类型资源创建\r\n\r\n```\r\n@Slf4j\r\npublic class ImgResource extends ResourceTemplate {\r\n    @Override\r\n    public void create() {\r\n        setType();\r\n        log.info(\"创建text资源！\");\r\n    }\r\n\r\n    public void setType(){\r\n        super.setType(\"img\");\r\n    }\r\n}\r\n\r\n```\r\n\r\n文本类型资源创建\r\n\r\n```\r\n@Slf4j\r\npublic class TextResource extends ResourceTemplate {\r\n    @Override\r\n    public void create() {\r\n        setType();\r\n        log.info(\"创建text资源！\");\r\n    }\r\n\r\n    public void setType(){\r\n        super.setType(\"text\");\r\n    }\r\n\r\n}\r\n\r\n```\r\n\r\n**优缺点**\r\n\r\n优点：\r\n\r\n* 把不变的行为搬移到超类，变化的行为由子类自行扩展，有助于算法的扩展。\r\n\r\n缺点：\r\n\r\n* 每个不同的实现都需要定义一个子类，当子类数量庞大时，如果超类的骨架需要变动时，子类都需要修改。','模板方法模式就是定义一个算法的骨架，而将具体的算法延迟到子类中实现场景：系统中有个创建资源的功能，分为四步：创建资源，上传到FTP服务器，保存到数据库，清理本地缓存。可以创建图片类型资源和文本类型资源，这样一来思考一下，其实就是创建的过程不同，而上传、保存，清理都是相同的算法处理，所以可以使用模......','正常',87,'设计模式','设计模式,模板模式'),('ARTICLE20180416120328712','TAX20180329053014072','2018-04-16 12:03:28','2019-01-07 00:30:00','三种提升效率的能力','###概念\r\n\r\n时间流\r\n\r\n* 农业时代的时间流：天人合一，日出而作，日落而息\r\n* 工业时代的时间流：在同一时间，同一地点，重复的做同一件事情\r\n* 互联网时代的时间流：永远在线，随时干扰，信息多变， 阅读变浅\r\n\r\n###策略\r\n\r\n**碎片整合能力**\r\n\r\n* 每天收集到的信息充斥着大脑，乱七八糟，没法理清思路\r\n* 整合就是找到碎片化信息直接的联系，形成系统框架，并解决问题的能力\r\n\r\n**单线程到多线程的能力**\r\n\r\n* 计算机时多线程的，但是当前激活的窗口只有一个，多任务切换，但仍需保持手头任务的专注\r\n* 多任务后台处理，单任务前台专注\r\n\r\n**放空能力**\r\n\r\n* 做决定：信息——>感受——>思考——>处理\r\n* 放空自己，从思考的层面回退到信息和感受的层面\r\n* 放空自己，会让自己感觉到舒服、放松，很多直觉会逐渐出现，很多决定会越来越明确\r\n\r\n**我的观点**\r\n\r\n我们平常做事之所以效率不高，就是我们不会管理时间，使用工业化时代的方式，管理互联网时代的时间\r\n\r\n* 我的碎片整理能力比较差，每次接触学习零碎的东西，都不喜欢去总结，导致隔一段时间，这些零碎的知识变得模糊，相互干扰\r\n* 多线程能力的话，我会在一段时间内做出两到三个目标的计划，同时执行，并且分清楚主次，这样的话，可以比较好的提高自己的效率\r\n* 放空能力的话，我基本每天晚上都会去运动，一般都是一个人去，这样可以听着音乐，想一想一些白天没解决的问题，或者看看天空，看看周围人的行为状态，都可以减轻一些压力','概念时间流农业时代的时间流：天人合一，日出而作，日落而息工业时代的时间流：在同一时间，同一地点，重复的做同一件事情互联网时代的时间流：永远在线，随时干扰，信息多变， 阅读变浅策略碎片整合能力每天收集到的信息充斥着大脑，乱七八糟，没法理清思路整合就是找到碎片化信息直接的联系，形成系统框架，并......','正常',43,'规划','规划'),('ARTICLE20180416120804547','TAX20180416120614072','2018-04-16 12:08:04','2019-01-07 00:30:00','一、WOOP：减肥','***`Wish`***\r\n\r\n* 在未来的两个月体重瘦到85kg以下\r\n\r\n***`Outcame`***\r\n\r\n* 瘦下来了，首先会有更加健康，至少会减少肥胖疾病发生的概率\r\n* 越快的瘦越好，这样在拍毕业照时，我就不会因为胖而把大学这个结束的纪念给毁了\r\n* 瘦了我会变得自信一些，不会因为自己肥胖而感到自卑，至少在夏天穿衣服上，不会再显得那么丑了\r\n* 瘦了以后，走在人群中，不会感觉有人在嘲笑或者议论（虽然现实中大家都很忙，没人有闲时间议论自己，但是心里上总感觉被人嫌弃）\r\n\r\n***`Obstacle`***\r\n\r\n* 一到饭点经不住食物的诱惑\r\n* 自己无聊时，很容易想起吃东西，一旦吃一点就停不下来\r\n* 喜欢吃高热量的食品，心里上比较讨厌吃蔬菜，水果之类的食物\r\n* 制定每天的跑步计划，容易因为天气原因暂停\r\n* 长时间坏天气会导致跑步运动计划暂停时间太长，导致不能坚持运动\r\n* 到晚上，容易由于其他杂事，感觉比较累，会有不去运动的思想\r\n* 到运动的时间时，容易心情不好、烦躁，不愿意去运动\r\n* 心情烦躁、焦虑会激发吃东西的欲望\r\n\r\n***`Plan`***\r\n\r\n1、每天吃好早饭，午饭和晚饭吃水果蔬菜\r\n\r\n* 如果因为前一天晚上熬夜，导致睡的晚，早上不想起床吃早饭，那么我会告诉自己可以先起床去吃饭，吃完发回来可以再休息一下\r\n* 如果因为懒，不想起床，吃不成早饭，那么我定两个闹钟，将另一个放在离床远的地方而且设置持续响铃，必须下床去关闭，让自己起床\r\n* 如果我起床了，洗刷完成，那么我就去早饭\r\n* 如果我懒得动，不想去餐厅吃早饭，那么我就想一想瘦下来的自己，然后打开这个WOOP看看\r\n* 如果我到午饭或晚饭时间，因为思想松懈，不想吃水果蔬菜，那么我就想想我的身边一个同学（从100kg瘦到75kg）减肥的事迹\r\n* 如果其他同学叫我一起去吃饭，那么我就直接告诉他们我吃过了或者我不饿不想吃饭\r\n\r\n2、每天晚上8-10点之间，抽出至少半小时做运动\r\n\r\n* 如果我晚上感觉类，不想去运动，那么我告诉自己可以先去操场走走散散步，然后在缓解疲劳后尝试在运动\r\n* 如果天气不好，不能到操场户外运动，那么我就做一些室内运动（仰卧起坐，俯卧撑等）\r\n* 如果晚上有其他的事情，不能去运动，那么我就等办完事情看时间早不早，时间早的话，再去操场做运动，如果时间晚的话，就做室内运动\r\n* 如果我因为心里上想偷懒，不去运动，那么我就要告诉自己想想那个减同学的事迹\r\n\r\n`如果一段时间内效果不明显，不想坚持了，那么我会让自己看看这个WOOP，想一想为什么，再修改一下`','Wish在未来的两个月体重瘦到85kg以下Outcame瘦下来了，首先会有更加健康，至少会减少肥胖疾病发生的概率越快的瘦越好，这样在拍毕业照时，我就不会因为胖而把大学这个结束的纪念给毁了瘦了我会变得自信一些，不会因为自己肥胖而感到自卑，至少在夏天穿衣服上，不会再显得那么丑了瘦了以后，走在人......','正常',58,'WOOP','WOOP'),('ARTICLE20180417031324361','TAX20180406053014072','2018-04-17 15:13:24','2019-01-07 00:30:00','设计模式入门：迭代器模式','>文章中部分定义和解释性文字，都是引用百度百科，主要的代码及场景应用为本人原创\r\n\r\n**迭代器模式，提供一种方法顺序访问一个聚合对象中的各种元素，而又不暴露该对象的内部表示。**\r\n\r\n>场景：现在系统中的文章分为两种：原创、转载。在系统中有一个文章的包，在这个包中可以放入原创文章，也可以放入转载文章，但是在包中这两种类型的文章是区分开的，可以分别取出，现在有一个遍历整个包的需求，就可以使用迭代器了\r\n\r\n**结构**\r\n\r\n* Iterator（迭代器）：迭代器定义访问和遍历元素的接口（Iterator：JDK提供）\r\n* ConcreteIterator （具体迭代器）：具体迭代器实现迭代器接口对该聚合遍历时跟踪当前位置（ArticleIterator）\r\n* Aggregate （聚合）：聚合定义创建相应迭代器对象的接口（本示例未使用）\r\n* ConcreteAggregate （具体聚合）：具体聚合实现创建相应迭代器的接口，该操作返回ConcreteIterator的一个适当的实例（ArticlePackage）\r\n\r\n**设计**\r\n\r\n![这里写图片描述](https://img-blog.csdn.net/20180417150227124?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RlbHVuZHVzaWpp/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\r\n\r\n**实现**\r\n\r\n代码地址：[`https://github.com/telundusiji/designpattern`](https://github.com/telundusiji/designpattern)\r\n\r\nIterator接口使用的是JDK中设计的，所以不再附上源码了\r\n\r\n文章实体类\r\n\r\n```\r\n@Data\r\n@NoArgsConstructor\r\n@AllArgsConstructor\r\n@Builder\r\npublic class Article{\r\n    private String type;\r\n}\r\n```\r\n\r\n具体聚合 文章包\r\n\r\n```\r\n@Slf4j\r\n@Data\r\npublic class ArticlePackage{\r\n\r\n    private List<Article> originalArticle;\r\n    private List<Article> reprintArticle;\r\n\r\n    public ArticlePackage() {\r\n        originalArticle = new ArrayList<>();\r\n        reprintArticle = new ArrayList<>();\r\n    }\r\n\r\n    public void addArticle(Article article){\r\n        if(article == null){\r\n            return;\r\n        }\r\n        if(\"original\".equals(article.getType())){\r\n            originalArticle.add(article);\r\n            return;\r\n        }\r\n        if(\"reprint\".equals(article.getType())){\r\n            reprintArticle.add(article);\r\n            return;\r\n        }\r\n    }\r\n\r\n    public Iterator getIterator(){\r\n        return new ArticleIterator();\r\n    }\r\n	//具体迭代器 文章迭代器\r\n    private class ArticleIterator implements Iterator<Article>{\r\n\r\n        private Iterator<Article> originalIterator;\r\n        private Iterator<Article> reprintIterator;\r\n\r\n        public ArticleIterator() {\r\n            originalIterator = originalArticle.iterator();\r\n            reprintIterator = reprintArticle.iterator();\r\n        }\r\n\r\n        @Override\r\n        public boolean hasNext() {\r\n            if(originalIterator.hasNext()||reprintIterator.hasNext()){\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n\r\n        @Override\r\n        public Article next() {\r\n            if(originalIterator.hasNext()){\r\n                return originalIterator.next();\r\n            }else if (reprintIterator.hasNext()){\r\n                return reprintIterator.next();\r\n            }else {\r\n                return null;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n```\r\n\r\n**适用性**\r\n\r\n* 访问一个聚合对象的内容而无需暴露它的内部表示\r\n* 支持对聚合对象的多种遍历\r\n* 为遍历不同的聚合结构提供一个统一的接口\r\n* java本身在内部就已经设计有迭代器，所以使用时可以直接使用，在内置的迭代器，不满足当前业务需求时，可以自己重新设计','文章中部分定义和解释性文字，都是引用百度百科，主要的代码及场景应用为本人原创迭代器模式，提供一种方法顺序访问一个聚合对象中的各种元素，而又不暴露该对象的内部表示。场景：现在系统中的文章分为两种：原创、转载。在系统中有一个文章的包，在这个包中可以放入原创文章，也可以放入转载文章，但是在包中这......','正常',49,'设计模式','设计模式,迭代器模式'),('ARTICLE20180417124401328','TAX20180329053014072','2018-04-17 12:44:01','2019-01-07 00:30:00','四种高效能策略','###策略\r\n\r\n**加：提前列出“碎片时间清单”，增加碎片化价值**\r\n\r\n* 我们每天都基本有两个小时的碎片时间不知道用来干什么，就浪费掉了\r\n* 在没有安排的时候，碎片时间默认就用来刷微信，新闻之类的了\r\n* 提前列出一个“碎片时间清单”\r\n\r\n![这里写图片描述](https://img-blog.csdn.net/20180417121944718?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RlbHVuZHVzaWpp/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\r\n<center>图片来源：得到《超级个体》</center>\r\n\r\n\r\n**减：把同样场景的碎片化任务放在一起出来，减少切换陈本**\r\n\r\n* 集中所有需要切换的动作，尽量一次性解决\r\n* 把同一场景或者相近场景下需要解决的问题，放在一起解决\r\n* 比如：找领导汇报工作的时候，把需要领导签字的文件一并带上解决，把提出的建议修改计划也一并说出来，一次性解决\r\n\r\n![这里写图片描述](https://img-blog.csdn.net/20180417122529368?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RlbHVuZHVzaWpp/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\r\n<center>图片来源：得到《超级个体》</center>\r\n\r\n**乘：叠加不同类型工作，形成叠加效应**\r\n\r\n* 每个一段时间就变换一下工作内容，就会产生新的优势兴奋灶，而原来的兴奋灶就得到抑制，这样人的脑力和体力就可以得到有效地调剂和放松\r\n* 按抽象与形象来分配时间：独立思考分析一段时间后，画画思维导图\r\n* 按研究问题的不同角度：自己思考一段时间，再找三个人一起碰撞\r\n* 按动静交替分配时间：坐着工作一段时间后，起来休息一下\r\n* 体力与脑力相互交替分配时间：工作之余，打扫卫生洗衣服\r\n\r\n**除：主动把大任务拆分成碎片化任务**\r\n\r\n* 主动碎片化大型任务，将所有事情分为：思考和执行\r\n* 碎片化思考，大块时间执行\r\n\r\n###我的观点\r\n\r\n时间和事情都有碎片化和整块（费碎片化）两种，加减乘除其实就对应两种 的组合。\r\n\r\n* 加：碎片化时间，碎片化事情，两种进行组合，把碎片化的事情，安排到碎片化时间完成\r\n* 减：整块时间，碎片化事情，将同一情景的碎片化事情，放在一个整块时间里完成\r\n* 乘：整块时间，整个任务，在一个整块里执行第一件事情，再在下一个整块的时间，进行下一个任务，轮询交替\r\n* 除：碎片化时间，整个任务，将一个完整任务，拆分成思考和执行，有碎片化时间进行思考\r\n\r\n我在后续会把我的碎片化时间清单附在这里','策略加：提前列出“碎片时间清单”，增加碎片化价值我们每天都基本有两个小时的碎片时间不知道用来干什么，就浪费掉了在没有安排的时候，碎片时间默认就用来刷微信，新闻之类的了提前列出一个“碎片时间清单”<center>图片来源：得到《超级个体》</center>减：把同样场景的碎片化任务放在......','正常',42,'规划','规划'),('ARTICLE20180419101918246','TAX20180329053014072','2018-04-19 10:19:18','2019-01-07 00:30:00','超越碎片化时代','###策略\r\n\r\n**抵御干扰**\r\n\r\n让我们时间变得碎片化的各种干扰。\r\n干扰分为两种：`内部干扰`和`外部干扰`\r\n\r\n抵御内部干扰：\r\n\r\n* 念头收纳：当你专注后，突然被你脑子里的其他想法打断时，把脑袋里想到的事情都写在旁边的纸上\r\n* 三秒禅：当你在专注后，准备离开情景做其他任何事情的时候，让自己先停下来三秒再行动，冲动就会慢慢降低\r\n\r\n抵御外部干扰：\r\n\r\n* 电子静默：主动关掉大部分的手机和桌面推送\r\n* 物理隔绝：尽可能让自己待在一个不被干扰的空间、时间\r\n* 调整期待：不要对方已说话，就马上回复，每次都留出足够的时间集中处理\r\n* 学习拒绝：学习沟通技巧，懂得拒绝、协商、中断和管理各种关系\r\n\r\n**投资时间，获得自由**\r\n\r\n* 很多人时间碎片是因为他是一个雇员，将时间卖给了老板，时间没法自己控制\r\n* 投资回报率越高的人，时间自由度就越大，有越有可能获得大块的、不受干扰的时间\r\n* 持续投资优势和趋势，让自己进入自由职业态，创建系统甚至投资\r\n\r\n**为自己设定一个主题**\r\n\r\n* 把看似不相关的东西拼在一起，创造一个你喜欢的人生\r\n* 创建一个人生主题，连点成线，吸附碎片化\r\n\r\n###我的观点\r\n\r\n针对这三个策略，其中第一个策略是最现实，最实际，最容易行动的策略。对第二个和第三个策略来说，则需要你达到一定的理解和境界，才能参透其中的真谛。所以，就从第一个策略开始练习，在专注做一件事时，学会屏蔽干扰：念头收纳，三秒禅。','策略抵御干扰让我们时间变得碎片化的各种干扰。干扰分为两种：内部干扰和外部干扰抵御内部干扰：念头收纳：当你专注后，突然被你脑子里的其他想法打断时，把脑袋里想到的事情都写在旁边的纸上三秒禅：当你在专注后，准备离开情景做其他任何事情的时候，让自己先停下来三秒再行动，冲动就会慢慢降低抵御外部干扰：......','正常',41,'规划','规划'),('ARTICLE20180419125727477','TAX20180406053014072','2018-04-19 12:57:27','2019-01-07 00:30:00','设计模式入门：组合模式','>文章中部分定义和解释性文字，都是引用百度百科，主要的代码及场景应用为本人原创\r\n\r\n**组合模式，将对象组合成树形结构以表示“部分-整体”的层次结构，组合模式使得用户对单个对象和组合对象的使用具有一致性。**\r\n\r\n>场景：在以前做的一个系统中是一个志愿者服务系统，其中有个组织关系的需求，学校->(学院->(部门->志愿者组织)||志愿者组织)||志愿者组织。这个需求的层次结构就是树形的，当时不了解组合模式，直接设计了四种不同的实体来封装四种组织类型，现在使用组合模式进行设计\r\n\r\n**结构**\r\n\r\n* Component 是组合中的对象声明接口，在适当的情况下，实现所有类共有接口的默认行为。(Organization)\r\n* Leaf 在组合中表示叶子结点对象，叶子结点没有子结点。(Team)\r\n* Composite 定义有枝节点行为，用来存储子部件。(Department)\r\n\r\n**设计**\r\n\r\n![这里写图片描述](https://img-blog.csdn.net/20180419124809244?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RlbHVuZHVzaWpp/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\r\n\r\n**实现**\r\n\r\n代码地址：[`https://github.com/telundusiji/designpattern`](https://github.com/telundusiji/designpattern)\r\n\r\n抽象构件 组织抽象类\r\n\r\n```\r\n@Data\r\npublic abstract class Organization {\r\n    private String name;\r\n\r\n    public Organization(String name) {\r\n        this.name = name;\r\n    }\r\n\r\n    public abstract void add(Organization organization);\r\n    public abstract void print();\r\n}\r\n\r\n```\r\n\r\n容器构件 部门\r\n\r\n```\r\n@Slf4j\r\npublic class Department extends Organization{\r\n\r\n    private List<Organization> organizations;\r\n\r\n    public Department(String name) {\r\n        super(name);\r\n        organizations = new ArrayList<>();\r\n    }\r\n\r\n    @Override\r\n    public void add(Organization organization) {\r\n        organizations.add(organization);\r\n    }\r\n\r\n    @Override\r\n    public void print() {\r\n        log.info(\"部门：{}\",getName());\r\n        for(Organization o: organizations){\r\n            o.print();\r\n        }\r\n    }\r\n}\r\n\r\n```\r\n\r\n叶子构件 团队\r\n\r\n```\r\n@Slf4j\r\npublic class Team extends Organization {\r\n\r\n    public Team(String name) {\r\n        super(name);\r\n    }\r\n\r\n    @Override\r\n    public void add(Organization organization) {\r\n        throw new RuntimeException(\"团队下不可添加组织\");\r\n    }\r\n\r\n    @Override\r\n    public void print() {\r\n        log.info(\"团队：{}\",getName());\r\n    }\r\n}\r\n\r\n```\r\n\r\n**适用性**\r\n\r\n* 表示对象的部分-整体层次结构\r\n* 忽略组合对象与单个对象的不同，用户将统一地使用组合结构中的所有对象。','文章中部分定义和解释性文字，都是引用百度百科，主要的代码及场景应用为本人原创组合模式，将对象组合成树形结构以表示“部分-整体”的层次结构，组合模式使得用户对单个对象和组合对象的使用具有一致性。场景：在以前做的一个系统中是一个志愿者服务系统，其中有个组织关系的需求，学校->(学院->(部门-......','正常',62,'设计模式','设计模式,组合模式'),('ARTICLE20180420023307373','TAX20180329053014072','2018-04-20 14:33:07','2019-01-07 00:30:00','认识管理精力','###观察\r\n\r\n* 月初定的计划，到月底发现，根本做不完\r\n* 一直很希望做好某件事，可是总是也开始不了\r\n* 有了自己的时间，好好学习提升，可是根本学不进去\r\n\r\n也许你缺乏的不是时间管理，而是精力管理\r\n\r\n###策略\r\n\r\n精力管理金字塔，四个彼此关联的精力：`体能、情绪、思维、意志`\r\n\r\n* 精力由四部分构成，越底层的越基础\r\n* 底层的精力会会影响上层的精力\r\n* 体能->情绪：身体不舒服的时候，心情也不好\r\n* 思维->意志力：情绪不佳的时候，做判断容易失误\r\n\r\n**`全情投入=体能充沛+情感链接+思维清晰+意志坚定`**\r\n\r\n###我的观点\r\n\r\n本次只是对精力管理有个了解，先认识什么是精力管理。\r\n有了以上的了解，在以后我们再想做什么事情进行不下去时，可以尝试分析一下，自己是哪一方面的精力缺乏，可以通过对应的调整来使事情顺利的进行。\r\n\r\n* 体能不足，可以加强锻炼，增强体能，同时合理休息来调节\r\n* 没有情感，分析一下是不是自己真的不喜欢做这件事，如果这件事不是必须完成的可以放弃，如果是外界压力下，必须完成的，思考一下有没有办法让自己尽量对这件事情感兴趣\r\n* 思维疲倦，长期做一件事，感觉枯燥，脑子转不动，可以试着换一换心情，散步、读书、吃东西，转移一下注意力\r\n* 缺乏意志力，对做的事情缺乏意义感，觉得做的工作毫无意义，没有作用，就无法坚持，可以尝试重新解读你要做的事情，分析一下做这件事对你来说意味这什么，换个角度，获取又有了坚持的动力','观察月初定的计划，到月底发现，根本做不完一直很希望做好某件事，可是总是也开始不了有了自己的时间，好好学习提升，可是根本学不进去也许你缺乏的不是时间管理，而是精力管理策略精力管理金字塔，四个彼此关联的精力：体能、情绪、思维、意志精力由四部分构成，越底层的越基础底层的精力会会影响上层的精力体能......','正常',50,'规划','规划'),('ARTICLE20180420073600309','TAX20180406053014072','2018-04-20 19:36:00','2019-01-07 00:30:00','设计模式入门：状态模式','>文章中部分定义和解释性文字，都是引用百度百科，主要的代码及场景应用为本人原创\n\n**状态模式允许一个对象的内在状态改变时改变其行为，这个对象看起来像是改变了其类。把状态的判断逻辑转移到表示不同状态的一系列类中，可以把复杂的判断逻辑简化。**\n\n>场景：我的个人网站中的文章管理的一个需求，文章的状态有：待发布、正常、封禁、置顶、删除。这五个状态之间可以装换，但是有一定限制：\n\n>* 待发布的文章，可以发布（正常状态），可以删除（删除状态）\n> * 正常的文章，可以封禁（封禁状态），可以置顶（置顶状态），可以删除（删除状态）\n> * 封禁的文章，可以解封（正常状态），可以删除（删除状态）\n> * 置顶的文章，可以取消置顶（正常状态），可以封禁（封禁状态），可以删除（删除状态）\n> * 删除的文章，什么都不可做\n\n**设计**\n\n![这里写图片描述](https://img-blog.csdn.net/20180420192814964?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RlbHVuZHVzaWpp/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n**实现**\n\n代码地址：[`https://github.com/telundusiji/designpattern`](https://github.com/telundusiji/designpattern)\n\n状态接口\n\n```\npublic interface ArticleState {\n    void publish(Article article);\n    void ban(Article article);\n    void pick(Article article);\n    void sticky(Article article);\n    void off(Article article);\n    void delete(Article article);\n}\n```\n\n封禁状态\n\n```\n@Slf4j\npublic class BanState implements ArticleState {\n    @Override\n    public void publish(Article article) {\n\n    }\n\n    @Override\n    public void ban(Article article) {\n\n    }\n\n    @Override\n    public void pick(Article article) {\n        log.info(\"文章：{}----解封成功！\",article.getTitle());\n        article.setCurrentState(Article.normalState);\n    }\n\n    @Override\n    public void sticky(Article article) {\n\n    }\n\n    @Override\n    public void off(Article article) {\n\n    }\n\n    @Override\n    public void delete(Article article) {\n        log.info(\"文章：{}----删除成功！\",article.getTitle());\n        article.setCurrentState(Article.deleteState);\n    }\n}\n\n```\n\n删除状态\n\n```\npublic class DeleteState implements ArticleState {\n    @Override\n    public void publish(Article article) {\n\n    }\n\n    @Override\n    public void ban(Article article) {\n\n    }\n\n    @Override\n    public void pick(Article article) {\n\n    }\n\n    @Override\n    public void sticky(Article article) {\n\n    }\n\n    @Override\n    public void off(Article article) {\n\n    }\n\n    @Override\n    public void delete(Article article) {\n\n    }\n}\n\n```\n\n正常状态\n\n```\n@Slf4j\npublic class NormalState implements ArticleState {\n    @Override\n    public void publish(Article article) {\n\n    }\n\n    @Override\n    public void ban(Article article) {\n        log.info(\"文章：{}----封禁成功！\",article.getTitle());\n        article.setCurrentState(Article.banState);\n    }\n\n    @Override\n    public void pick(Article article) {\n\n    }\n\n    @Override\n    public void sticky(Article article) {\n        log.info(\"文章：{}----置顶成功！\",article.getTitle());\n        article.setCurrentState(Article.stickyState);\n    }\n\n    @Override\n    public void off(Article article) {\n\n    }\n\n    @Override\n    public void delete(Article article) {\n        log.info(\"文章：{}----删除成功！\",article.getTitle());\n        article.setCurrentState(Article.deleteState);\n    }\n}\n\n```\n\n待发布状态\n\n```\n@Slf4j\npublic class ReadyState implements ArticleState {\n\n    @Override\n    public void publish(Article article) {\n        log.info(\"文章：{}----发布成功！\",article.getTitle());\n        article.setCurrentState(Article.normalState);\n    }\n\n    @Override\n    public void ban(Article article) {\n\n    }\n\n    @Override\n    public void pick(Article article) {\n\n    }\n\n    @Override\n    public void sticky(Article article) {\n\n    }\n\n    @Override\n    public void off(Article article) {\n\n    }\n\n    @Override\n    public void delete(Article article) {\n        log.info(\"文章：{}----删除成功！\",article.getTitle());\n        article.setCurrentState(Article.deleteState);\n    }\n}\n\n```\n\n置顶状态\n\n```\n@Slf4j\npublic class StickyState implements ArticleState {\n\n    @Override\n    public void publish(Article article) {\n\n    }\n\n    @Override\n    public void ban(Article article) {\n        log.info(\"文章：{}----封禁成功！\",article.getTitle());\n        article.setCurrentState(Article.banState);\n    }\n\n    @Override\n    public void pick(Article article) {\n\n    }\n\n    @Override\n    public void sticky(Article article) {\n\n    }\n\n    @Override\n    public void off(Article article) {\n        log.info(\"文章：{}----取消置顶成功！\",article.getTitle());\n        article.setCurrentState(Article.normalState);\n    }\n\n    @Override\n    public void delete(Article article) {\n        log.info(\"文章：{}----删除成功！\",article.getTitle());\n        article.setCurrentState(Article.deleteState);\n    }\n}\n\n```\n\n文章容器\n\n```\n@Data\npublic class Article{\n\n    private String title;\n\n    public final static BanState banState = new BanState();\n\n    public final static NormalState normalState = new NormalState();\n\n    public final static ReadyState readyState = new ReadyState();\n\n    public final static StickyState stickyState = new StickyState();\n\n    public final static DeleteState deleteState = new DeleteState();\n\n    private ArticleState currentState;\n\n    public void setState(ArticleState articleState){\n        currentState = articleState;\n    }\n\n    public void publish() {\n        currentState.publish(this);\n    }\n\n    public void ban() {\n        currentState.ban(this);\n    }\n\n    public void pick() {\n        currentState.pick(this);\n    }\n\n    public void sticky() {\n        currentState.sticky(this);\n    }\n\n    public void off() {\n        currentState.off(this);\n    }\n\n    public void delete() {\n        currentState.delete(this);\n    }\n}\n\n```\n\n**适用场景**\n\n* 一个对象的行为取决于它的状态，并且它必须在运行时刻根据状态改变它的行为。\n* 一个操作中含有庞大的多分支结构，并且这些分支决定于对象的状态。','文章中部分定义和解释性文字，都是引用百度百科，主要的代码及场景应用为本人原创状态模式允许一个对象的内在状态改变时改变其行为，这个对象看起来像是改变了其类。把状态的判断逻辑转移到表示不同状态的一系列类中，可以把复杂的判断逻辑简化。场景：我的个人网站中的文章管理的一个需求，文章的状态有：待发布......','正常',65,'设计模式','设计模式,状态模式'),('ARTICLE20180421043424516','TAX20180329053014072','2018-04-21 16:34:24','2019-01-07 00:30:00','精力充沛是一种自我管理能力','###概念\r\n\r\n**直线型管理**\r\n\r\n这是一种传统且普遍的管理精力的方式。直线型管理是采用消耗性方式——一直工作，累到停为止，然后休息到不累，继续工作累到停......\r\n\r\n精力就像是一块电池，这种循环使得，这块电池被消耗的越来越多，越来越不耐用，峰值也就随之下降，精力充沛的时间也就越来越短\r\n\r\n**钟摆型管理**\r\n\r\n掌握节奏，主动休息，保持高效能工作方式。精力充沛时主动工作，工作一定时长，主动休息，钟摆的幅度也就越来越大，精力就呈上升趋势\r\n\r\n###策略\r\n\r\n精力节奏\r\n\r\n**60分钟节奏**\r\n\r\n大脑的注意力只能保持45-90分钟，最长不超过120分钟，所以每小时主动休息一次，可以保持精力在高水准。\r\n\r\n休息并不是指一定要停止工作，而是可以切换工作内容，可以切换自己思考的事......\r\n\r\n**一天的节奏**\r\n\r\n* 早上——计划性工作\r\n* 上午——创造性工作\r\n* 下午——沟通性工作\r\n* 晚上——学习性工作\r\n\r\n![这里写图片描述](https://img-blog.csdn.net/20180421162122449?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RlbHVuZHVzaWpp/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\r\n<center>图片来源：得到《超级个体》</center>\r\n\r\n\r\n**一周的节奏**\r\n\r\n* 星期一：规划日。分派任务，进行规划，设置目标\r\n* 星期二：攻关日。工作效率高，产出大，难解决的问题适合此时解决\r\n* 星期三：会议日。思路活跃，适合制定战略，也是决策技能最能发挥的时候\r\n* 星期四：谈判日。雄心和精力开始下降，人容易通融，容易说话，对事情妥协的概率增加\r\n* 星期五：决断日。喜欢一周的事情，一周清，对一周的事来个了断\r\n\r\n###我的观点\r\n\r\n自己本来的管理策略就是直线型的，每次学习或者工作，就会一直进行，然后中间从不停止，一直持续很长时间，但是每有过一次持续时间长的工作或学习后，下次的工作或者学习，就会推迟很久才开始，导致两次工作或学习之间的间隔很长时间，又时隔好几天都无心学习。所以，了解了以上三个策略，可以参照对自己的工作生活安排做适当的调整。','概念直线型管理这是一种传统且普遍的管理精力的方式。直线型管理是采用消耗性方式——一直工作，累到停为止，然后休息到不累，继续工作累到停……精力就像是一块电池，这种循环使得，这块电池被消耗的越来越多，越来越不耐用，峰值也就随之下降，精力充沛的时间也就越来越短钟摆型管理掌握节奏，主动休息，保持高效......','正常',58,'规划','规划'),('ARTICLE20180422025546244','TAX20180329053014072','2018-04-22 14:55:46','2019-01-07 00:30:00','四种提升精力的方式','提升自己的精力有一个办法——长期、主动地突破压力极限，并且用高效率的方式迅速恢复\r\n\r\n###策略\r\n\r\n**提升身体能量**\r\n\r\n提升体能的最好方式是吃、睡、运动\r\n\r\n* 少吃多餐，让自己保持在稳定的血糖水平\r\n* 碳水化合物的零食，可以帮助你快速集中注意力\r\n* 每天保证足够的饮水。缺水时，人会易怒、疲惫和难以集中注意力\r\n* 中等强度的有氧运动对于大脑供氧和主动休息有很大的好处（运动不要过度）\r\n\r\n**提升情绪精力**\r\n\r\n积极的情绪是重要的情绪精力\r\n\r\n* 工作中有一个好朋友，可以相互赞赏相互倾听\r\n* 与积极思考、快乐的人待在一起\r\n* 找到一个欣赏你的圈子，培养一项让你放松快乐的爱好\r\n\r\n**养成精力习惯**\r\n\r\n规律化的生活，自动化的执行，可以省下许多决策精力\r\n\r\n* 提前对简单的事情做好决策（比如：明天出门穿什么衣服...）\r\n* 对要做的事，提前进行思考、决策（可以认为就是执行意图）\r\n\r\n**提升精神动力**\r\n\r\n精神动力区别与前三条，这是一个质的区别。\r\n\r\n强大的精神能量来自于坚定的价值观和超越眼前、怦然心动的目标。\r\n所以说这是一个质的区别，并不是你加强训练就可以找到一个令你怦然心动的目标，而是要来自你内心最真切的渴望。\r\n\r\n\r\n###我的观点\r\n\r\n提升精力就像锻炼肌肉，要现将自己原来不坚固的肌肉纤维拉断，在训练重新生成，成为更多更坚固的纤维。\r\n精力就类似于肌肉，在需要提高训练时，就需要让自己承受超过一般限度的压力，然后再进行充分恢复\r\n\r\n以上四个策略很好，其中的第一个策略和第二个策略，在我的生活中已经在默默起着作用，第三个策略我还不知道如何来作，不过也会进行尝试。\r\n坦白的说第四个策略，到目前为止，对我自己完全是没有概念的。目前对我来说还没有找到一个能让我怦然心动的目标，没有一个能让我早上主动起床，动力十足去做的一件事情。我的理解是这种目标或许是可遇不可求的，没有经历过什么大风大浪，目前的追求就是生活的柴米油盐，所有这种精神的能量，我还是没有真切的体会过。不过，未来充满着很多不确定性，说不准某一天，这个目标就忽然涌上心头，让我为之奋斗。','提升自己的精力有一个办法——长期、主动地突破压力极限，并且用高效率的方式迅速恢复策略提升身体能量提升体能的最好方式是吃、睡、运动少吃多餐，让自己保持在稳定的血糖水平碳水化合物的零食，可以帮助你快速集中注意力每天保证足够的饮水。缺水时，人会易怒、疲惫和难以集中注意力中等强度的有氧运动对于大脑供......','正常',42,'规划','规划'),('ARTICLE20180422043104194','TAX20180406053014072','2018-04-22 16:31:04','2019-01-07 00:30:00','设计模式入门：代理模式','>文章中部分定义和解释性文字，都是引用百度百科，主要的代码及场景应用为本人原创\r\n\r\n**代理模式为其他对象提供一种代理以控制对这个对象的访问。代理对象在客户端和目标对象之间起到中介的作用。**\r\n\r\n>场景：在一个系统中有个统计服务，当进行统计服务之前需要检查并开启需要统计的资源，统计完成后需要关闭不必要的资源，避免浪费服务器资源。对于这一个需求可以使用代理模式来设计，在统计之前和之后所做的事情很统计服务本身没有太多关系，采用这种模式可以解耦，同时也使得需要统计的资源可配置，提高灵活性。\r\n\r\n**构成**\r\n\r\n* 抽象角色：通过接口或抽象类声明真实角色实现的业务方法。（Statistics）\r\n* 代理角色：实现抽象角色，是真实角色的代理，通过真实角色的业务逻辑方法来实现抽象方法，并可以附加自己的操作。（ProxyStatistics）\r\n* 真实角色：实现抽象角色，定义真实角色所要实现的业务逻辑，供代理角色调用。（RealStatistics）\r\n\r\n**设计**\r\n\r\n![这里写图片描述](https://img-blog.csdn.net/20180422162110633?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RlbHVuZHVzaWpp/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\r\n\r\n\r\n**实现**\r\n\r\n代码地址：[`https://github.com/telundusiji/designpattern`](https://github.com/telundusiji/designpattern)\r\n\r\n抽象角色 统计接口\r\n\r\n```\r\npublic interface Statistics {\r\n    void statistics();\r\n}\r\n```\r\n\r\n真实角色 统计实现\r\n\r\n```\r\n@Slf4j\r\npublic class RealStatistics implements Statistics {\r\n    @Override\r\n    public void statistics() {\r\n        log.info(\"开始统计......\");\r\n        log.info(\"统计完成！\");\r\n    }\r\n}\r\n```\r\n\r\n静态代理的方式 代理角色 统计代理\r\n\r\n```\r\n@Slf4j\r\npublic class ProxyStatistics implements Statistics{\r\n\r\n    private RealStatistics realStatistics;\r\n\r\n    public ProxyStatistics(RealStatistics realStatistics){\r\n        this.realStatistics = realStatistics;\r\n    }\r\n\r\n    @Override\r\n    public void statistics() {\r\n        log.info(\"统计前，开启需要统计的服务\");\r\n        realStatistics.statistics();\r\n        log.info(\"统计结束，关闭服务！\");\r\n    }\r\n}\r\n\r\n```\r\n\r\n动态代理方式（代理角色是动态生成，所以这并不是代理角色）\r\n\r\n```\r\n@Slf4j\r\npublic class DynamicProxyStatisticsHandler implements InvocationHandler {\r\n\r\n    private RealStatistics realStatistics;\r\n\r\n    public DynamicProxyStatisticsHandler(RealStatistics realStatistics) {\r\n        this.realStatistics = realStatistics;\r\n    }\r\n\r\n    @Override\r\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\r\n        before();\r\n        Object result = method.invoke(realStatistics,args);\r\n        after();\r\n        return null;\r\n    }\r\n\r\n    private void before() {\r\n        log.info(\"统计前，开启需要统计的服务\");\r\n    }\r\n\r\n    private void after() {\r\n        log.info(\"统计结束，关闭服务！\");\r\n    }\r\n}\r\n\r\n```\r\n\r\n**优点**\r\n\r\n* 职责清晰：真实的角色是实现实际的业务逻辑，不用关心其他非本职责的事务。\r\n* 代理对象可以在客户端和目标对象之间起到中介的作用，这样起到了中介的作用和保护了目标对象的作用。\r\n\r\njava中的静态代理和动态代理可以阅读以下文章：\r\n\r\n* [Java的代理模式（一）静态代理](http://te-amo.site/user/article/info/ARTICLE20180210042609451)\r\n* [Java的代理模式（二）jDK的动态代理](http://te-amo.site/user/article/info/ARTICLE20180129072747294)','文章中部分定义和解释性文字，都是引用百度百科，主要的代码及场景应用为本人原创代理模式为其他对象提供一种代理以控制对这个对象的访问。代理对象在客户端和目标对象之间起到中介的作用。场景：在一个系统中有个统计服务，当进行统计服务之前需要检查并开启需要统计的资源，统计完成后需要关闭不必要的资源，避......','正常',87,'设计模式','设计模式,代理模式'),('ARTICLE20180423010613455','TAX20180329053014072','2018-04-23 13:06:13','2019-01-07 00:30:00','最简单的自我管理工具——三件事','###观察\r\n\r\n已经学习了这么多工具，为什么都不能长久坚持\r\n\r\n* 没有自知之明\r\n* 贪多\r\n* 工具太复杂\r\n\r\n###策略\r\n\r\n`每天三件事：第一件事+第二件事+第三件事+让自己感到幸福的小事+昨日收获`\r\n\r\n**早上想**\r\n\r\n* 早上起床，大脑没有被新的信息刷屏\r\n* 繁忙的昨天已经过去\r\n* 也可以在前一天晚上写，可以减少早上决策精力的损耗\r\n\r\n**写下来**\r\n\r\n* 写下来可以减少“目标损耗”\r\n* 真正重要的事被一拖再拖而带来的内疚感，比本身不做这个事的损失更大\r\n* 如果当天没完成，需要思考这件事的重要性，是不是必须完成的\r\n\r\n**发出去**\r\n\r\n* 发出去的首收益就是公众承诺带来的执行力\r\n* 获得协作和资源，别人在看到你的事情时可能会有共鸣，或者给你提出建议\r\n* 可以获得领导力，用自己的行动号召了身边的人，跟着自己一起做\r\n* 并不是，一开始执行就要发出来，这样会减少自己的期待，执行力会降低。可以自己先进行一段时间，待自己的执行频率稳定后，再发出来分享给大家\r\n\r\n###我的观点\r\n\r\n三件事这个小工具很简单，最主要的是注重执行。通过每天制定三件重要的事，可以帮助我们分辨每天自己计划的轻重缓急，有助于提高自己的决断力。同时这又是一个长期行为，所以对于长期的目标来说，算是日拱一卒，不期速成。','观察已经学习了这么多工具，为什么都不能长久坚持没有自知之明贪多工具太复杂策略每天三件事：第一件事+第二件事+第三件事+让自己感到幸福的小事+昨日收获早上想早上起床，大脑没有被新的信息刷屏繁忙的昨天已经过去也可以在前一天晚上写，可以减少早上决策精力的损耗写下来写下来可以减少“目标损耗......','正常',48,'规划','规划'),('ARTICLE20180423081637711','TAX20180406053014072','2018-04-23 20:16:37','2019-01-07 00:30:00','设计模式入门：桥接模式','>文章中部分定义和解释性文字，都是引用百度百科，主要的代码及场景应用为本人原创\r\n\r\n**桥接模式是将抽象部分与它的实现部分分离，使它们都可以独立地变化**\r\n\r\n>场景：在一个文件管理系统中，文件来源有两个一个本地文件源，一个FTP文件源，而需要开发的客户端因功能不同，有多中文件客户端。客户端和文件源都是可以变化的，而且文件源也会随着系统复杂化，不断增加，为了保证客户端和文件源的多变灵活性，可以使用桥接模式\r\n\r\n**结构**\r\n\r\n* 抽象化角色：抽象化给出的定义，并保存一个对实现化对象的引用。（FileClient）\r\n* 修正抽象化角色：扩展抽象化角色，改变和修正父类对抽象化的定义。（SimpleFileClient，MultifunctionalFileClient）\r\n* 实现化角色：这个角色给出实现化角色的接口，但不给出具体的实现。（FileSource）\r\n* 具体实现化角色：这个角色给出实现化角色接口的具体实现。（FtpFileSource，LocalFileSource）\r\n\r\n**设计**\r\n\r\n![这里写图片描述](https://img-blog.csdn.net/20180423200322505?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RlbHVuZHVzaWpp/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\r\n\r\n\r\n**实现**\r\n\r\n代码地址：[`https://github.com/telundusiji/designpattern`](https://github.com/telundusiji/designpattern)\r\n\r\n实现化角色 文件源接口\r\n\r\n```\r\npublic interface FileSource {\r\n    List<String> searchFile(String name);\r\n    List<String> list();\r\n    void delete(String name);\r\n}\r\n\r\n```\r\n\r\n具体实现化角色 FTP文件源\r\n\r\n```\r\n@Slf4j\r\npublic class FtpFileSource implements FileSource {\r\n\r\n    private List<String> files;\r\n\r\n    public FtpFileSource() {\r\n        files = new ArrayList<>();\r\n        files.add(\"test1.txt\");\r\n        files.add(\"test2.txt\");\r\n        files.add(\"test4.txt\");\r\n        files.add(\"test17.txt\");\r\n        files.add(\"test3.txt\");\r\n        files.add(\"test15.txt\");\r\n        files.add(\"test8.txt\");\r\n        files.add(\"other.txt\");\r\n    }\r\n\r\n    @Override\r\n    public List<String> searchFile(String name) {\r\n        log.info(\"登录Ftp服务器...\");\r\n        log.info(\"开始搜索...\");\r\n        List<String> result = new ArrayList<>();\r\n        for(String s : files){\r\n            if(s.contains(name)){\r\n                result.add(s);\r\n            }\r\n        }\r\n        log.info(\"搜索完成!\");\r\n        return result;\r\n\r\n    }\r\n\r\n    @Override\r\n    public List<String> list() {\r\n        log.info(\"登录Ftp服务器...\");\r\n        log.info(\"获取所有文件完毕!\");\r\n        return files;\r\n    }\r\n\r\n    @Override\r\n    public void delete(String name) {\r\n        log.info(\"登录Ftp服务器...\");\r\n        log.info(\"开始删除文件...\");\r\n        Iterator<String> iterator = files.iterator();\r\n        while (iterator.hasNext()){\r\n            if(iterator.next().equals(name)){\r\n                iterator.remove();\r\n            }\r\n        }\r\n        log.info(\"删除完成\");\r\n    }\r\n\r\n\r\n}\r\n\r\n```\r\n\r\n具体实现化角色 本地文件源\r\n\r\n```\r\n@Slf4j\r\npublic class LocalFileSource implements FileSource {\r\n\r\n    private List<String> files;\r\n\r\n    public LocalFileSource() {\r\n        files = new ArrayList<>();\r\n        files.add(\"test7.txt\");\r\n        files.add(\"test10.txt\");\r\n        files.add(\"test56.txt\");\r\n        files.add(\"test17.txt\");\r\n        files.add(\"test9.txt\");\r\n        files.add(\"test0.txt\");\r\n        files.add(\"test8.txt\");\r\n        files.add(\"other.txt\");\r\n    }\r\n\r\n    @Override\r\n    public List<String> searchFile(String name) {\r\n        log.info(\"开始搜索...\");\r\n        List<String> result = new ArrayList<>();\r\n        for(String s : files){\r\n            if(s.contains(name)){\r\n                result.add(s);\r\n            }\r\n        }\r\n        log.info(\"搜索完成!\");\r\n        return result;\r\n    }\r\n\r\n    @Override\r\n    public List<String> list() {\r\n        return files;\r\n    }\r\n\r\n    @Override\r\n    public void delete(String name) {\r\n        log.info(\"开始删除文件...\");\r\n        Iterator<String> iterator = files.iterator();\r\n        while (iterator.hasNext()){\r\n            if(iterator.next().equals(name)){\r\n                iterator.remove();\r\n            }\r\n        }\r\n        log.info(\"删除完成\");\r\n    }\r\n}\r\n\r\n```\r\n\r\n抽象化角色 文件客户端\r\n\r\n```\r\n@Data\r\npublic abstract class FileClient {\r\n\r\n    private FileSource fileSource;\r\n\r\n    public FileClient(FileSource fileSource) {\r\n        this.fileSource = fileSource;\r\n    }\r\n\r\n    public abstract void list();\r\n\r\n    public abstract void search(String name);\r\n\r\n    public abstract void delete(String name);\r\n}\r\n\r\n```\r\n\r\n修正抽象化角色 简单文件客户端\r\n\r\n```\r\n@Slf4j\r\npublic class SimpleFileClient extends FileClient {\r\n\r\n    public SimpleFileClient(FileSource fileSource) {\r\n        super(fileSource);\r\n    }\r\n\r\n    @Override\r\n    public void list() {\r\n        List<String> list = getFileSource().list();\r\n        for(String s: list){\r\n            log.info(\"文件：{}\",s);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void search(String name) {\r\n        List<String> list = getFileSource().searchFile(name);\r\n        log.info(\"---------------搜索{}结果--------------\",name);\r\n        for(String s: list){\r\n            log.info(\"文件：{}\",s);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void delete(String name) {\r\n        getFileSource().delete(name);\r\n        log.info(\"--------------{}文件删除-----------\",name);\r\n    }\r\n}\r\n\r\n```\r\n\r\n修正抽象化角色 多功能文件客户端\r\n\r\n```\r\n@Slf4j\r\npublic class MultifunctionalFileClient extends FileClient {\r\n\r\n    public MultifunctionalFileClient(FileSource fileSource) {\r\n        super(fileSource);\r\n    }\r\n\r\n    @Override\r\n    public void list() {\r\n        List<String> list = getFileSource().list();\r\n        for(String s: list){\r\n            log.info(\"文件：{}\",s);\r\n        }\r\n    }\r\n\r\n    public void listWithSort(){\r\n        List<String> list = getFileSource().list();\r\n        Collections.sort(list,String::compareTo);\r\n        for(String s: list){\r\n            log.info(\"文件：{}\",s);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void search(String name) {\r\n        List<String> list = getFileSource().searchFile(name);\r\n        log.info(\"---------------搜索{}结果--------------\",name);\r\n        for(String s: list){\r\n            log.info(\"文件：{}\",s);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void delete(String name) {\r\n        getFileSource().delete(name);\r\n        log.info(\"--------------{}文件删除-----------\",name);\r\n    }\r\n\r\n    public void delete(String... args){\r\n        for (String s : args){\r\n            getFileSource().delete(s);\r\n            log.info(\"--------------{}文件删除-----------\",s);\r\n        }\r\n    }\r\n}\r\n\r\n```\r\n\r\n\r\n**优缺点**\r\n\r\n优点：\r\n\r\n* 提高系统的可扩充性，在两个变化维度中任意扩展一个维度，都不需修改原有系统。\r\n* 将抽象化和实现化之间的耦合解脱开，将两个角色之间的继承关系改为聚合关系，从而使两者可以相对独立地变化。\r\n\r\n缺点：\r\n\r\n* 要求正确识别出系统中两个独立变化的维度，所以其使用范围具有一定的局限性。','文章中部分定义和解释性文字，都是引用百度百科，主要的代码及场景应用为本人原创桥接模式是将抽象部分与它的实现部分分离，使它们都可以独立地变化场景：在一个文件管理系统中，文件来源有两个一个本地文件源，一个FTP文件源，而需要开发的客户端因功能不同，有多中文件客户端。客户端和文件源都是可以变化的......','正常',79,'设计模式','设计模式,桥接模式'),('ARTICLE20180424030523690','TAX20180329053014072','2018-04-24 15:05:23','2019-01-07 00:30:00','结果思维','###概念\n\n`结果思维`是一种把自己的能力和行为转化为价值的思维方式\n\n**结果第一定律：结果>思维**\n\n* “我跟他沟通了，但是他不听”，这个沟通就是一个过程，对于别人来说，没有结果等于你什么也没有做\n* “我每天起床看专栏”，但是过了一天你还记得多少，你只是做了，但是没有什么改变，做这件事也没有给自己留下什么结果\n\n**结果第二定律：有交付价值的结果>无交付价值的结果**\n\n* 让结果变得可以交换——只有可以交换的结果才有价值\n* 学习这件事，大家都会写下自己的思考，能给别人带来思考，给别人提供观点，激励其他人，这一类的结果就产生了价值，而有些思考只是交付给自己的，只是自己的碎碎念，这些就是没有交换价值的结果\n\n**结果第三定律：能复制的结果>不能复制的结果**\n\n* 把自己做一件事的结果进行整理，思考，总结，最后形成经验、文字，分享给大家，你的结果在网络上传播，其他人可以根据你的经验总结复制出有价值的结果，这样就达成了可以复制的结果\n\n\n###练习\n\n对于结果不同程度的追求，决定了这个人的身价。\n\n小测试：假如领导吩咐你，要组织大家明天下午开会，你会怎么做？\n\n可以现思考，在对比下面的结果：\n\n![这里写图片描述](https://img-blog.csdn.net/20180424150634880?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RlbHVuZHVzaWpp/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n<center>图片来源：得到《超级个体》</center>\n\n###我的观点\n\n回想一下自己生活中做的各种事的结果是什么，睡觉的结果是什么？上班的结果是什么？学习的结果是什么？\n\n睡觉就是为了休息，想达到的结果也就是睡一觉醒来后自己会精力充沛，充满干劲，度过美好的一天。\n上班的结果首先就是获得经济收入，提高自己生活水平，再者上班可以在公司认识更多人，可以积累自己的经验，学习一些社会知识\n学习的结果就是自己的能力得到提高，处理事情的水平有所进步，增强自己的实力。\n\n其实大部分的人做的每一件事都是为了让自己更好，但是如果一直不思考结果的话，会让一些对你并没有帮助的事占用了你的时间精力，真正对自己有帮助的事情却没有时间完成，所以我们再做一件事前可以先想一想我们想要达到的结果是什么，在开始做','概念结果思维是一种把自己的能力和行为转化为价值的思维方式结果第一定律：结果>思维“我跟他沟通了，但是他不听”，这个沟通就是一个过程，对于别人来说，没有结果等于你什么也没有做“我每天起床看专栏”，但是过了一天你还记得多少，你只是做了，但是没有什么改变，做这件事也没有给自己留下什么结果结果第二定......','正常',79,'规划','规划'),('ARTICLE20180424051520856','TAX20180406053014072','2018-04-24 17:15:20','2019-01-07 00:30:00','设计模式入门：建造者模式','>文章中部分定义和解释性文字，都是引用百度百科，主要的代码及场景应用为本人原创\r\n\r\n**建造者模式是设计模式的一种，将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。**\r\n\r\n>场景：在某公司的管理系统中有一个生成财务报告的需求，要求报表中包含部门基本信息，财务收支信息，并对收支进行评估。对于产生报表这个实例的过程就是一个复杂的过程，所以生成报表实例可以使用建造者模式\r\n\r\n**结构**\r\n\r\n* Builder：为创建一个产品对象的各个部件指定抽象接口。（ReportBuilder）\r\n* ConcreteBuilder：实现Builder的接口以构造和装配该产品的各个部件，定义并明确它所创建的表示，并提供一个检索产品的接口。（PersonnelReport，TechnologyReport）\r\n* Director：构造一个使用Builder接口的对象。（ReportDirector）\r\n* Product：表示被构造的复杂对象。（Report）\r\n\r\n**设计**\r\n\r\n![这里写图片描述](https://img-blog.csdn.net/20180424170049765?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RlbHVuZHVzaWpp/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\r\n\r\n\r\n**实现**\r\n\r\n代码地址：[`https://github.com/telundusiji/designpattern`](https://github.com/telundusiji/designpattern)\r\n\r\nProduct 报告\r\n\r\n```\r\n@Data\r\npublic class Report {\r\n    private String no;\r\n    private Date date;\r\n    private String department;\r\n    private String author;\r\n    private double income;\r\n    private double outcome;\r\n    private String assessment;\r\n}\r\n\r\n```\r\n\r\nBuilder 报告建造者\r\n\r\n```\r\npublic abstract class ReportBuilder {\r\n   public abstract void setBaseInformation();\r\n   public abstract void setIncomeAndOutcome();\r\n   public abstract void assess();\r\n    public abstract Report getReport();\r\n}\r\n```\r\n\r\nConcreteBuilder 人事部报告建造者\r\n\r\n```\r\npublic class PersonnelReport extends ReportBuilder {\r\n\r\n    private Report report;\r\n\r\n    public PersonnelReport() {\r\n        report = new Report();\r\n    }\r\n\r\n\r\n    @Override\r\n    public void setBaseInformation() {\r\n        report.setNo(\"P.No.\"+System.currentTimeMillis());\r\n        report.setDepartment(\"Personnel\");\r\n        report.setAuthor(\"Personnel.张三\");\r\n        report.setDate(new Date());\r\n    }\r\n\r\n    @Override\r\n    public void setIncomeAndOutcome() {\r\n        report.setIncome(Math.random()*10000);\r\n        report.setOutcome(Math.random()*10000);\r\n    }\r\n\r\n    @Override\r\n    public void assess() {\r\n        double income = report.getIncome();\r\n        double outcome = report.getOutcome();\r\n        if (income>outcome){\r\n            report.setAssessment(\"人事部财务评估：收入大于支出，有收益，开心！\");\r\n        }else if(income==outcome){\r\n            report.setAssessment(\"人事部财务评估：收入等于支出，无收益，一般！\");\r\n        }else {\r\n            report.setAssessment(\"人事部财务评估：收入小于支出，无收益，悲伤！\");\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public Report getReport() {\r\n        return report;\r\n    }\r\n}\r\n\r\n```\r\n\r\nConcreteBuilder 技术部报告建造者\r\n\r\n```\r\npublic class TechnologyReport extends ReportBuilder {\r\n\r\n    private Report report;\r\n\r\n    public TechnologyReport() {\r\n        report = new Report();\r\n    }\r\n\r\n\r\n    @Override\r\n    public void setBaseInformation() {\r\n        report.setNo(\"T.No.\"+System.currentTimeMillis());\r\n        report.setDepartment(\"Technology\");\r\n        report.setAuthor(\"Technology.李四\");\r\n        report.setDate(new Date());\r\n    }\r\n\r\n    @Override\r\n    public void setIncomeAndOutcome() {\r\n        report.setIncome(Math.random()*1000000);\r\n        report.setOutcome(Math.random()*1000000);\r\n    }\r\n\r\n    @Override\r\n    public void assess() {\r\n        double income = report.getIncome();\r\n        double outcome = report.getOutcome();\r\n        double profit = income - outcome;\r\n        report.setAssessment(\"技术部财务评估：收益\"+profit+\"！\");\r\n    }\r\n\r\n    @Override\r\n    public Report getReport() {\r\n        return report;\r\n    }\r\n}\r\n\r\n```\r\n\r\nDirector 指导者\r\n\r\n```\r\npublic class ReportDirector {\r\n    public void produce(ReportBuilder reportBuilder){\r\n        reportBuilder.setBaseInformation();\r\n        reportBuilder.setIncomeAndOutcome();\r\n        reportBuilder.assess();\r\n    }\r\n}\r\n\r\n```\r\n\r\n\r\n**优点**\r\n\r\n* 将复杂对象的创建过程封装起来，隐藏内部结构\r\n* 指定特定生成器，就可以生成特定对象，可以更改创建过程\r\n\r\n**适用范围**\r\n\r\n*  当创建复杂对象的算法应该独立于该对象的组成部分以及它们的装配方式时。 \r\n*  当构造过程必须允许被构造的对象有不同表示时。\r\n\r\n对于建造者模式和工厂模式的区别：\r\n\r\n* 建造者模式用于创建大的复杂的对象，简单的对象可以使用工厂模式（至于这个度的问题还需自己把握）\r\n* 建造者模式强调是一步步创建对象，可以改变步骤生成不同对象','文章中部分定义和解释性文字，都是引用百度百科，主要的代码及场景应用为本人原创建造者模式是设计模式的一种，将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。场景：在某公司的管理系统中有一个生成财务报告的需求，要求报表中包含部门基本信息，财务收支信息，并对收支进行评估。......','正常',102,'设计模式','设计模式,建造者模式'),('ARTICLE20180425110954883','TAX20180329053014072','2018-04-25 11:09:54','2019-01-07 00:30:00','把自己能力产品化','###策略\n\n职业中提升自己的结果思维\n\n* 确认结果：在职业中我们大多情况只知道交付对方的动作，不知道结果，所以要反复确认结果。（例：领导让你对某一问题制定解决方案，你就直接去做了，你并没有确认这个解决方案要给谁看，解决问题到什么程度......你只关注制定的过程）\n* 多给选项：不要直接给出答案，要给选择题；不要给单选，要给多选。人们喜欢选择，这本身就是一种价值\n* 超出预期：尽可能地超出别人的预期一点点，就是这一点点就可以让别人永远记住你\n\n创业中提升自己的结果思维\n\n* 我做这件事情的结果是什么？\n* 这个结果对谁有价值？他们看到什么东西才觉得可交付？\n* 如何让这个结果易于复制，可以持续下去？\n\n简单的工具才是能坚持的，工具越发简单，背后的道理其实越深邃\n\n###我的观点\n\n其实这一次的内容也是对三件事的补充。做好三件事，要用到结果思维，而本次就是介绍如何提升结果思维。\n其实在说到结果思维时，大家都知道一句耳熟能详的话“成功不是结果，而是一个过程”，这与结果思维就是矛盾的，那该怎么理解呢？\n其实结果和过程并不对立，没有过程就不会有结果了，预先设定结果的目的是让你知道自己这件事做的如何，达到目的了没有。\n其实有三种情形的活动是需要谈过程的\n\n**心里活动，而非社会活动**\n比如：恋爱、思考、体验、旅游......\n这些真的不需要什么结果，幸福本身就是一种过程性的情绪。但是职业、社交、沟通这些都需要一个结果来衡量\n\n**成功以后**\n成功以后，结果已经拿到了，更加需要重视的过程，可以是对走向成功过程的思考，也可以是对自己成功后未来生活过程的展望，这是注重过程就是为得体验\n\n**终极思考**\n当自己站在时间的高度，看整个人生，看的就是过程，因为不论你是什么人，人生的结果就是死去，而能给你的死前加上标签的就是你人生的过程，你做了什么，经历了什么，就会得到不同的头衔，所有对人生的思考，是看重过程\n\n`如果你一开始就冲着过程去，这只是人生选择的不同，值得尊敬。如果你一开始就是冲着结果去的，最后失败了，却安慰自己说“过程才重要”，这就是自我欺骗`','策略职业中提升自己的结果思维确认结果：在职业中我们大多情况只知道交付对方的动作，不知道结果，所以要反复确认结果。（例：领导让你对某一问题制定解决方案，你就直接去做了，你并没有确认这个解决方案要给谁看，解决问题到什么程度……你只关注制定的过程）多给选项：不要直接给出答案，要给选择题；不要给单选，要......','正常',59,'规划','规划'),('ARTICLE20180501033308899','TAX20180406053014072','2018-05-01 15:33:08','2019-01-07 00:30:00','设计模式入门：目录','###设计模式入门\n\n* **[策略模式](http://te-amo.site/user/article/info/ARTICLE20180406081124977)**\n\n* **[观察者模式](http://te-amo.site/user/article/info/ARTICLE20180407063327367)**\n\n* **[装饰者模式](http://te-amo.site/user/article/info/ARTICLE20180408052716176)**\n\n* **[单例模式](http://te-amo.site/user/article/info/ARTICLE20180409023347108)**\n\n* **[简单工厂](http://te-amo.site/user/article/info/ARTICLE20180410053932027)**\n\n* **[工厂方法模式](http://te-amo.site/user/article/info/ARTICLE20180411032005619)**\n\n* **[抽象工厂模式](http://te-amo.site/user/article/info/ARTICLE20180412064841698)**\n\n* **[命令模式](http://te-amo.site/user/article/info/ARTICLE20180413050833779)**\n\n* **[适配器模式](http://te-amo.site/user/article/info/ARTICLE20180414032907213)**\n\n* **[外观模式](http://te-amo.site/user/article/info/ARTICLE20180415023014903)**\n\n* **[模板方法模式](http://te-amo.site/user/article/info/ARTICLE20180416010939282)**\n\n* **[迭代器模式](http://te-amo.site/user/article/info/ARTICLE20180417031324361)**\n\n* **[组合模式](http://te-amo.site/user/article/info/ARTICLE20180419125727477)**\n\n* **[状态模式](http://te-amo.site/user/article/info/ARTICLE20180420073600309)**\n\n* **[代理模式](http://te-amo.site/user/article/info/ARTICLE20180422043104194)**\n\n* **[桥接模式](http://te-amo.site/user/article/info/ARTICLE20180423081637711)**\n\n* **[建造者模式](http://te-amo.site/user/article/info/ARTICLE20180424051520856)**\n\n* **[责任链模式](http://te-amo.site/user/article/info/ARTICLE20180509060141975)**\n\n####代码地址\n\n**[https://github.com/telundusiji/designpattern](https://github.com/telundusiji/designpattern)**','设计模式入门策略模式观察者模式装饰者模式单例模式简单工厂工厂方法模式抽象工厂模式命令模式适配器模式外观模式模板方法模式迭代器模式组合模式状态模式代理模式桥接模式建造者模式责任链模式代码地址https://github.com/telundusiji/desig......','正常',166,'设计模式','设计模式'),('ARTICLE20180509044111954','TAX20180329053014072','2018-05-09 16:41:11','2019-01-07 00:30:00','结构思考力','###概念\r\n\r\n**结构**：是万物之本，是用来简化世界，认识世界，认识事物，认识事物规律的方式\r\n\r\n**结构思考力**：是通过结构的方式来系统思考的能力。\r\n\r\n当问题摆在面前时，依赖经验想答案，对错不好说，但是使用结构化思考，可以帮你有一个清晰的解决思路\r\n\r\n![这里写图片描述](https://img-blog.csdn.net/20180509160425280?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RlbHVuZHVzaWpp/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\r\n<center>图片来源：得到《超级个体》</center>\r\n\r\n这是一个结构化思考的树，在这个树上，每一层的观点都是下一层观点的概述，每一层中各个观点都是互不重合且有一定逻辑顺序的\r\n\r\n###策略\r\n\r\n**【论】结论先行，先说结果后说过程**\r\n\r\n从听者的角度来考虑，他特别希望在接受信息的时候最先听到对方总结的结论是什么、工作的结果是什么\r\n\r\n**【证】以下证上，下面的数据证明上面的观点**\r\n\r\n每个主论点都是下面的分论点和数据的概括，同时也受下一层的事实所支持\r\n\r\n**【类】归类分组**\r\n\r\n将同一类别相近类别的观点，数据归为一组进行概括，分完的类别最好不要交叉\r\n\r\n**【比】逻辑递进，有一定的逻辑顺序**\r\n\r\n有顺序东西，让人更容易理解和记忆，常见的逻辑顺序：时间，重要程度，结构顺序三种\r\n\r\n**`一个例子`**\r\n<center>年终总结</center>\r\n![这里写图片描述](https://img-blog.csdn.net/20180509161906486?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RlbHVuZHVzaWpp/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\r\n<center>图片来源：得到《超级个体》</center>\r\n\r\n###我的观点\r\n\r\n>这段时间弄了个新电脑，耽误了几天，后来学校又要搞毕业设计中期检查，又弄了个互联网+的比赛。总共大概断更了大概两周，今天开始继续更，不过明天还有参加一个全天的活动，看晚上回来的时间早晚了。\r\n\r\n 结构化思考可以认为是一种思考习惯，每个人都有不同的思考习惯，如果你目前的思考习惯就已经很好了，你大可不必去改变你现有的思考习惯，如果你现在的思考方式还是比较凌乱，面对问题考虑的比较琐碎，随意，那么你可以试试练习这种思考习惯。\r\n \r\n前两天参加互联网+比赛，有一个项目介绍的环节，我听了很多项目的项目介绍，有的项目一听就知道是做什么，会马上激起大家的兴趣，而有些项目讲解人，把背景讲了半天，还没说到我们做的是什么，这种讲解就比较令人厌烦，容易失去兴趣。所以我总记了一下，在介绍一个项目时，该如何介绍。\r\n\r\n* 首先要说明你们是谁（在学校里一般都是先说自己什么院的，搞得方向是什么），然后简短的介绍你们的项目是什么\r\n* 介绍做这个东西的意义、目的和市场价值，做这个的优势\r\n* 把你们的项目和产品展开来讲，具体做了什么，有什么功能（时间充足可以将一些细节，时间不充足就直接概括成大的方面）\r\n* 最后要是还有时间就可以讲一讲在这个项目的基础上，如果成功了，你们以后还有什么改进或者更多方面的应用\r\n\r\n使用上面几步，搞定一个项目介绍应该还是可以的（作为学生，就见识了这么多，都是个人见解，如有不妥，敬请指正）','概念结构：是万物之本，是用来简化世界，认识世界，认识事物，认识事物规律的方式结构思考力：是通过结构的方式来系统思考的能力。当问题摆在面前时，依赖经验想答案，对错不好说，但是使用结构化思考，可以帮你有一个清晰的解决思路<center>图片来源：得到《超级个体》</center>这是一个结......','正常',151,'规划','规划'),('ARTICLE20180509060141975','TAX20180406053014072','2018-05-09 18:01:41','2019-01-07 00:30:00','设计模式入门：责任链模式','>文章中部分定义和解释性文字，都是引用百度百科，主要的代码及场景应用为本人原创\r\n\r\n**责任链模式，很多对象由每一个对象对其下家的引用而连接起来形成一条链，请求在这个链上传递，直到链上的某一个对象决定处理此请求。**\r\n\r\n>场景：公司常见的事情——签字，一个待批准的任务，由管理者一层一层的批准\r\n\r\n**结构**\r\n\r\n* 抽象处理者(Handler)角色：定义出一个处理请求的接口，接口中定义有对下家的引用。\r\n* 具体处理者(ConcreteHandler)角色：具体处理者接到请求后，可以选择将请求处理掉，或者将请求传给下家。\r\n\r\n**设计**\r\n\r\n![这里写图片描述](https://img-blog.csdn.net/20180509175039806?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RlbHVuZHVzaWpp/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\r\n\r\n\r\n**实现**\r\n\r\n代码地址：[`https://github.com/telundusiji/designpattern`](https://github.com/telundusiji/designpattern)\r\n\r\n抽象处理者\r\n\r\n```\r\n@Data\r\npublic abstract class Handler {\r\n    private Handler handler;\r\n\r\n    public abstract boolean handleRequest(String task);\r\n}\r\n\r\n```\r\n\r\n具体处理者 小组长\r\n\r\n```\r\n@Slf4j\r\npublic class TeamLeader extends Handler{\r\n    @Override\r\n    public boolean handleRequest(String task) {\r\n        if(\"task\".equals(task)){\r\n            log.info(\"组长批准{}\",task);\r\n            return getHandler().handleRequest(task);\r\n        }\r\n        log.info(\"组长驳回{}请求\",task);\r\n        return false;\r\n    }\r\n}\r\n```\r\n\r\n具体处理者 部门长\r\n\r\n```\r\n@Slf4j\r\npublic class HeadOfDepartment extends Handler {\r\n    @Override\r\n    public boolean handleRequest(String task) {\r\n        if(\"task\".equals(task)){\r\n            log.info(\"部门长批准{}\",task);\r\n            return getHandler().handleRequest(task);\r\n        }\r\n        log.info(\"部门长驳回{}请求\",task);\r\n        return false;\r\n    }\r\n}\r\n\r\n```\r\n\r\n具体处理者 技术总监\r\n\r\n```\r\n@Slf4j\r\npublic class CTO extends Handler {\r\n    @Override\r\n    public boolean handleRequest(String task) {\r\n        if(\"task\".equals(task)){\r\n            log.info(\"CTO批准{}\",task);\r\n            return true;\r\n        }\r\n        log.info(\"CTO驳回{}请求\",task);\r\n        return false;\r\n    }\r\n}\r\n```\r\n\r\n**经典应用**\r\n\r\nFilter（过滤器）就是一个经典的责任链模式\r\n\r\n* 抽象处理者：Filter\r\n* 具体处理者：实现Filter的类','文章中部分定义和解释性文字，都是引用百度百科，主要的代码及场景应用为本人原创责任链模式，很多对象由每一个对象对其下家的引用而连接起来形成一条链，请求在这个链上传递，直到链上的某一个对象决定处理此请求。场景：公司常见的事情——签字，一个待批准的任务，由管理者一层一层的批准结构抽象处理......','正常',181,'设计模式','设计模式,责任链模式'),('ARTICLE20180512021257121','TAX20180329053014072','2018-05-12 14:12:57','2019-01-07 00:30:00','结构化说服法','###概念\r\n\r\n**自上而下的自问自答**\r\n\r\n自上而下的自问自答是一种想象对话技术。先选定主题，然后看对方会关注什么问题，提前设想好答案，并从上往下逐步搭建金字塔结构的方法。站在对方的角度看对方关心什么\r\n\r\n**自上而下的自问自答的好处**\r\n\r\n* 表达有吸引力，所讲的内容都是对方关心的问题\r\n* 表达有说服力，对方关心的问题都被你一个一个的解答了\r\n\r\n###策略\r\n\r\n**把一个结论作为主题**\r\n\r\n主题是基于谈话目标的，而且是一个有观点的结论。结论有可能回答别人的疑问，只有结论才能引发下一个层级新的论证。\r\n\r\n**设想问题，从对方的角度出发提问**\r\n\r\n* 站在对方角度换位思考。我们尽量放下自己对问题的认知，完全站在对方的角度去看，判断他们听到信息以后会有那些疑问。\r\n* 通过5w2h确保问题被全覆盖。\r\n<center>**5w2h原则**</center>![这里写图片描述](https://img-blog.csdn.net/20180512134641592?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RlbHVuZHVzaWpp/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)<center>图片来源：得到《超级个体》</center>\r\n\r\n<center>**2w1h原则(简化版)**</center>![这里写图片描述](https://img-blog.csdn.net/20180512134716343?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RlbHVuZHVzaWpp/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)<center>图片来源：得到《超级个体》</center>\r\n\r\n* 提前准备好答案。把对方关注的问题都设想好，成为话题的带领者，不用等他问，你就可以回答他脑中的问题，可以很大的提高说服的效率\r\n\r\n\r\n\r\n###我的观点\r\n\r\n**结构化说服法的核心思想就是换位思考，想他人所想。**\r\n	\r\n在说服别人接受你的一个想法时，首先要思考别人接受你的观点的难点所在和问题所在。依次回答了对方的疑问，让对方认同，那么接受你的观点也就轻而易举了。\r\n	\r\n其实在实际中，想别人所想并不是那么容易，就像我这个小短文，我想让看到这篇文章的人学会使用结构化说服法，但是大家在看之前首先就像知道这个标题是什么含义，我使用这个方法有什么好处，其次我要使用这种方法我该怎么做。所以这篇小短文就是使用这种结构来写的（如果我思考的有误，敬请指教），按照读者想了解的问题，一一解答。\r\n\r\n这里只是方法论，各种方法技巧的学习都是需要练习的，所以想要成为一个有说服力的人，还需要多加练习。','概念自上而下的自问自答自上而下的自问自答是一种想象对话技术。先选定主题，然后看对方会关注什么问题，提前设想好答案，并从上往下逐步搭建金字塔结构的方法。站在对方的角度看对方关心什么自上而下的自问自答的好处表达有吸引力，所讲的内容都是对方关心的问题表达有说服力，对方关心的问题都被你一个一个的解答......','正常',145,'规划','规划');
/*!40000 ALTER TABLE `article` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `dynamic`
--

DROP TABLE IF EXISTS `dynamic`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `dynamic` (
  `dynamic_id` varchar(32) NOT NULL,
  `content` varchar(512) DEFAULT NULL,
  `img` varchar(256) DEFAULT NULL,
  `gmt_create` datetime NOT NULL,
  `gmt_modified` datetime NOT NULL,
  `type` varchar(128) DEFAULT NULL,
  PRIMARY KEY (`dynamic_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `dynamic`
--

LOCK TABLES `dynamic` WRITE;
/*!40000 ALTER TABLE `dynamic` DISABLE KEYS */;
INSERT INTO `dynamic` VALUES ('DYNAMIC20180210044309065','《独白》</br>\n	                        	不是我性格开朗</br>\n	                        	其实我也有许多忧伤</br>\n	                        	也有许多失眠的日子</br>\n	                        	吞噬着我</br>\n	                        	生命从来不是只有辉煌</br>\n	                        	只是我喜欢欢笑</br>\n	                        	喜欢空气新鲜又明亮</br>\n	                        	我愿意像茶</br>\n	                        	把苦涩留在心里</br>\n	                        	散发出来的都是清香',NULL,'2018-02-10 16:43:09','2018-02-10 16:43:09','base'),('DYNAMIC20180210045523214','听到最扎心的一句话：<br/>\n写了一天的bug，累了吧',NULL,'2018-02-10 16:55:23','2018-02-10 16:55:23','base'),('DYNAMIC20180213082551624','不知道谁能干过谁！','/dynamic/DYNAMIC20180213082551624.jpg','2018-02-13 20:25:52','2018-02-13 20:25:52','img'),('DYNAMIC20180214055134130','猜乐视还有手机送，等到未来某一天猜京东的时候，可是没有手机奖励啊','/dynamic/DYNAMIC20180214055134130.jpg','2018-02-14 17:51:34','2018-02-14 17:51:34','img'),('DYNAMIC20180216045631677','我家的小狗祝大家狗年旺旺旺','/dynamic/DYNAMIC20180216045631677.jpg','2018-02-16 16:56:31','2018-02-16 16:56:31','img'),('DYNAMIC20180221093354500','但凡能找到可以倾诉的人，<br/>你也不会在朋友圈分享音乐了','/dynamic/DYNAMIC20180221093354500.jpeg','2018-02-21 21:33:54','2018-02-21 21:33:54','img'),('DYNAMIC20180223112212324','没有最终的成功，<br/>也没有致命的失败，<br/>最可贵的是继续前进的勇气。',NULL,'2018-02-23 23:22:12','2018-02-23 23:22:12','base'),('DYNAMIC20180302102410935','生活本无趣，凡事莫当真','/dynamic/DYNAMIC20180302102410935.jpeg','2018-03-02 22:24:11','2018-03-02 22:24:11','img');
/*!40000 ALTER TABLE `dynamic` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `homepage`
--

DROP TABLE IF EXISTS `homepage`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `homepage` (
  `homepage_id` varchar(32) NOT NULL,
  `location` varchar(32) DEFAULT NULL,
  `path` varchar(256) DEFAULT NULL,
  `width` int(10) unsigned DEFAULT NULL,
  `height` int(10) unsigned DEFAULT NULL,
  `gmt_create` datetime NOT NULL,
  `gmt_modified` datetime NOT NULL,
  `order_no` int(10) unsigned NOT NULL DEFAULT '0',
  `status` varchar(32) DEFAULT NULL,
  `description` varchar(256) DEFAULT NULL,
  PRIMARY KEY (`homepage_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `homepage`
--

LOCK TABLES `homepage` WRITE;
/*!40000 ALTER TABLE `homepage` DISABLE KEYS */;
INSERT INTO `homepage` VALUES ('HP20180206025026912','1024x683','/homepage/HP20180206025026912.jpg',1024,683,'2018-02-06 14:50:29','2018-02-06 14:50:29',0,'正常','<p>2017年4月20日<br/>西安理工大学<p>'),('HP20180206031049396','1024x683','/homepage/HP20180206031049396.jpg',1024,683,'2018-02-06 15:10:51','2018-02-06 15:10:51',1,'正常','<p>2017年11月8日<br/>西安大慈恩寺遗址公园<p>'),('HP20180206031743521','1024x683','/homepage/HP20180206031743521.jpg',1024,683,'2018-02-06 15:17:46','2018-02-06 15:17:46',0,'正常','<p>2017年8月12日<br/>杭州西湖<p>'),('HP20180206035343566','1024x683','/homepage/HP20180206035343566.jpg',1024,683,'2018-02-06 15:53:46','2018-02-06 15:53:46',3,'正常','<p>2018年1月8日<br/>西安大雁塔广场</p>'),('HP20180206035512631','1024x683','/homepage/HP20180206035512631.jpg',1024,683,'2018-02-06 15:55:18','2018-02-06 15:55:18',4,'正常','<p>2018年1月3日<br/>重庆洪崖洞</p>'),('HP20180206040110570','770x414','/homepage/HP20180206040110570.jpg',770,414,'2018-02-06 16:01:12','2018-03-27 13:35:34',0,'停用',''),('HP20180206040550288','770x414','/homepage/HP20180206040550288.jpg',770,414,'2018-02-06 16:05:52','2018-02-06 16:05:52',1,'正常',''),('HP20180206040601345','770x414','/homepage/HP20180206040601345.jpg',770,414,'2018-02-06 16:06:03','2018-02-06 16:06:49',0,'正常','2'),('HP20180206041524752','370x190','/homepage/HP20180206041524752.jpg',370,190,'2018-02-06 16:15:26','2018-02-06 16:15:26',0,'正常',''),('HP20180206041926798','370x190','/homepage/HP20180206041926798.jpg',370,190,'2018-02-06 16:19:28','2018-02-06 16:19:28',0,'正常',''),('HP20180206041936258','370x190','/homepage/HP20180206041936258.jpg',370,190,'2018-02-06 16:19:38','2018-02-06 16:19:38',0,'正常',''),('HP20180206041958701','370x190','/homepage/HP20180206041958701.jpg',370,190,'2018-02-06 16:20:00','2018-02-06 16:20:00',0,'正常',''),('HP20180206042010969','370x190','/homepage/HP20180206042010969.jpg',370,190,'2018-02-06 16:20:12','2018-02-06 16:20:12',0,'正常',''),('HP20180206042123683','370x190','/homepage/HP20180206042123683.jpg',370,190,'2018-02-06 16:21:25','2018-02-06 16:21:25',0,'正常',''),('HP20180327013156024','1024x683','/homepage/HP20180327013156024.jpg',1024,683,'2018-03-27 13:31:56','2018-03-27 13:31:56',0,'正常','<p>2018年3月24日<br/>西安曲江池</p>'),('HP20180327013506089','1024x683','/homepage/HP20180327013506089.jpg',1024,683,'2018-03-27 13:35:06','2018-03-27 13:35:06',0,'正常','<p>2018年3月24日<br/>西安曲江池</p>'),('HP20180327013701882','770x414','/homepage/HP20180327013701882.jpg',770,414,'2018-03-27 13:37:01','2018-03-27 13:37:01',0,'正常','');
/*!40000 ALTER TABLE `homepage` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `leave_message`
--

DROP TABLE IF EXISTS `leave_message`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `leave_message` (
  `leave_id` varchar(32) NOT NULL,
  `content` varchar(512) DEFAULT NULL,
  `email` varchar(64) DEFAULT NULL,
  `name` varchar(64) DEFAULT NULL,
  `status` varchar(32) DEFAULT NULL,
  `gmt_create` datetime NOT NULL,
  `gmt_modified` datetime NOT NULL,
  PRIMARY KEY (`leave_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `leave_message`
--

LOCK TABLES `leave_message` WRITE;
/*!40000 ALTER TABLE `leave_message` DISABLE KEYS */;
INSERT INTO `leave_message` VALUES ('LM20180213100141932','妈诶，你居然还备案了','liuxin8889@gmail.com','bwael','已处理','2018-02-13 22:01:41','2018-02-13 23:09:42'),('LM20180316041405435','哈哈~','123','遇见','已处理','2018-03-16 16:14:05','2018-03-31 17:29:24');
/*!40000 ALTER TABLE `leave_message` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `photo`
--

DROP TABLE IF EXISTS `photo`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `photo` (
  `photo_id` varchar(32) NOT NULL,
  `gmt_create` datetime NOT NULL,
  `gmt_modified` datetime NOT NULL,
  `path` varchar(256) NOT NULL,
  `title` varchar(256) DEFAULT NULL,
  `status` varchar(32) DEFAULT NULL,
  `tags` varchar(256) DEFAULT NULL,
  PRIMARY KEY (`photo_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `photo`
--

LOCK TABLES `photo` WRITE;
/*!40000 ALTER TABLE `photo` DISABLE KEYS */;
INSERT INTO `photo` VALUES ('PHOTO20180130071758719','2018-01-30 19:18:00','2018-01-30 19:21:17','/20180130/PHOTO20180130071758719.jpg','兵马俑','正常','西安,兵马俑'),('PHOTO20180130071759881','2018-01-30 19:18:02','2018-01-30 19:21:17','/20180130/PHOTO20180130071759881.jpg','兵马俑','正常','西安,兵马俑'),('PHOTO20180130071801544','2018-01-30 19:18:04','2018-01-30 19:21:17','/20180130/PHOTO20180130071801544.jpg','兵马俑','正常','西安,兵马俑'),('PHOTO20180130071822622','2018-01-30 19:18:24','2018-01-30 19:21:17','/20180130/PHOTO20180130071822622.jpg','兵马俑','正常','西安,兵马俑'),('PHOTO20180130071828708','2018-01-30 19:18:30','2018-01-30 19:21:17','/20180130/PHOTO20180130071828708.jpg','兵马俑','正常','西安,兵马俑'),('PHOTO20180130072243177','2018-01-30 19:22:46','2018-01-30 19:23:06','/20180130/PHOTO20180130072243177.jpg','兵马俑','正常','西安,兵马俑'),('PHOTO20180131034803068','2018-01-31 15:48:08','2018-01-31 15:48:35','/20180131/PHOTO20180131034803068.jpg','下班','正常','西安,下班,生活'),('PHOTO20180131034803175','2018-01-31 15:48:08','2018-01-31 15:48:33','/20180131/PHOTO20180131034803175.jpg','下班','正常','西安,下班,生活'),('PHOTO20180131034804589','2018-01-31 15:48:08','2018-01-31 15:48:32','/20180131/PHOTO20180131034804589.jpg','下班','正常','西安,下班,生活'),('PHOTO20180131034806769','2018-01-31 15:48:08','2018-01-31 15:48:31','/20180131/PHOTO20180131034806769.jpg','下班','正常','西安,下班,生活'),('PHOTO20180202081626704','2018-02-02 20:16:42','2018-02-02 20:17:04','/20180202/PHOTO20180202081626704.jpg','秋','正常','秋,西安,大雁塔'),('PHOTO20180202081629131','2018-02-02 20:16:42','2018-02-02 20:17:04','/20180202/PHOTO20180202081629131.jpg','秋','正常','秋,西安,大雁塔'),('PHOTO20180202081630021','2018-02-02 20:16:42','2018-02-02 20:17:04','/20180202/PHOTO20180202081630021.jpg','秋','正常','秋,西安,大雁塔'),('PHOTO20180202081632680','2018-02-02 20:16:42','2018-02-02 20:17:04','/20180202/PHOTO20180202081632680.jpg','秋','正常','秋,西安,大雁塔'),('PHOTO20180202081635241','2018-02-02 20:16:42','2018-02-02 20:17:04','/20180202/PHOTO20180202081635241.jpg','秋','正常','秋,西安,大雁塔'),('PHOTO20180202081635442','2018-02-02 20:16:42','2018-02-02 20:17:04','/20180202/PHOTO20180202081635442.jpg','秋','正常','秋,西安,大雁塔'),('PHOTO20180202081636774','2018-02-02 20:16:42','2018-02-02 20:17:04','/20180202/PHOTO20180202081636774.jpg','秋','正常','秋,西安,大雁塔'),('PHOTO20180202081639500','2018-02-02 20:16:42','2018-02-02 20:17:04','/20180202/PHOTO20180202081639500.jpg','秋','正常','秋,西安,大雁塔'),('PHOTO20180202081640680','2018-02-02 20:16:42','2018-02-02 20:17:04','/20180202/PHOTO20180202081640680.jpg','秋','正常','秋,西安,大雁塔'),('PHOTO20180202081935314','2018-02-02 20:20:00','2018-02-02 20:25:11','/20180202/PHOTO20180202081935314.jpg','上海','正常','上海'),('PHOTO20180202081936822','2018-02-02 20:20:00','2018-02-02 20:25:11','/20180202/PHOTO20180202081936822.jpg','上海','正常','上海'),('PHOTO20180202081936832','2018-02-02 20:20:00','2018-02-02 20:25:10','/20180202/PHOTO20180202081936832.jpg','上海','正常','上海'),('PHOTO20180202082147473','2018-02-02 20:22:08','2018-02-02 20:25:10','/20180202/PHOTO20180202082147473.jpg','杭州','正常','杭州,西湖,浙大,荷'),('PHOTO20180202082153299','2018-02-02 20:22:08','2018-02-02 20:25:10','/20180202/PHOTO20180202082153299.jpg','杭州','正常','杭州,西湖,浙大,荷'),('PHOTO20180202082153742','2018-02-02 20:22:08','2018-02-02 20:25:10','/20180202/PHOTO20180202082153742.jpg','杭州','正常','杭州,西湖,浙大,荷'),('PHOTO20180202082159412','2018-02-02 20:22:08','2018-02-02 20:25:10','/20180202/PHOTO20180202082159412.jpg','杭州','正常','杭州,西湖,浙大,荷'),('PHOTO20180202082200789','2018-02-02 20:22:08','2018-02-02 20:25:10','/20180202/PHOTO20180202082200789.jpg','杭州','正常','杭州,西湖,浙大,荷'),('PHOTO20180202082205347','2018-02-02 20:22:08','2018-02-02 20:25:06','/20180202/PHOTO20180202082205347.jpg','杭州','正常','杭州,西湖,浙大,荷'),('PHOTO20180202082207195','2018-02-02 20:22:08','2018-02-02 20:25:06','/20180202/PHOTO20180202082207195.jpg','杭州','正常','杭州,西湖,浙大,荷'),('PHOTO20180202082328343','2018-02-02 20:23:57','2018-02-02 20:25:06','/20180202/PHOTO20180202082328343.jpg','迪士尼','正常','上海,迪士尼'),('PHOTO20180202082331548','2018-02-02 20:23:57','2018-02-02 20:25:06','/20180202/PHOTO20180202082331548.jpg','迪士尼','正常','上海,迪士尼'),('PHOTO20180202082335398','2018-02-02 20:23:57','2018-02-02 20:25:06','/20180202/PHOTO20180202082335398.jpg','迪士尼','正常','上海,迪士尼'),('PHOTO20180202082336796','2018-02-02 20:23:57','2018-02-02 20:25:06','/20180202/PHOTO20180202082336796.jpg','迪士尼','正常','上海,迪士尼'),('PHOTO20180202082340352','2018-02-02 20:23:57','2018-02-02 20:25:06','/20180202/PHOTO20180202082340352.jpg','迪士尼','正常','上海,迪士尼'),('PHOTO20180202082342991','2018-02-02 20:23:57','2018-02-02 20:25:06','/20180202/PHOTO20180202082342991.jpg','迪士尼','正常','上海,迪士尼'),('PHOTO20180202082344870','2018-02-02 20:23:57','2018-02-02 20:25:06','/20180202/PHOTO20180202082344870.jpg','迪士尼','正常','上海,迪士尼'),('PHOTO20180202082345291','2018-02-02 20:23:57','2018-02-02 20:25:06','/20180202/PHOTO20180202082345291.jpg','迪士尼','正常','上海,迪士尼'),('PHOTO20180202082348028','2018-02-02 20:23:57','2018-02-02 20:25:05','/20180202/PHOTO20180202082348028.jpg','迪士尼','正常','上海,迪士尼'),('PHOTO20180202082350112','2018-02-02 20:23:57','2018-02-02 20:25:05','/20180202/PHOTO20180202082350112.jpg','迪士尼','正常','上海,迪士尼'),('PHOTO20180202082352659','2018-02-02 20:23:57','2018-02-02 20:25:05','/20180202/PHOTO20180202082352659.jpg','迪士尼','正常','上海,迪士尼'),('PHOTO20180202082354747','2018-02-02 20:23:57','2018-02-02 20:25:05','/20180202/PHOTO20180202082354747.jpg','迪士尼','正常','上海,迪士尼'),('PHOTO20180202082355223','2018-02-02 20:23:57','2018-02-02 20:25:05','/20180202/PHOTO20180202082355223.jpg','迪士尼','正常','上海,迪士尼'),('PHOTO20180202082737829','2018-02-02 20:27:46','2018-02-02 20:30:09','/20180202/PHOTO20180202082737829.jpg','外滩','正常','外滩,上海,夜'),('PHOTO20180202082738345','2018-02-02 20:27:46','2018-02-02 20:30:05','/20180202/PHOTO20180202082738345.jpg','外滩','正常','外滩,上海,夜'),('PHOTO20180202082740566','2018-02-02 20:27:46','2018-02-02 20:30:05','/20180202/PHOTO20180202082740566.jpg','外滩','正常','外滩,上海,夜'),('PHOTO20180202082740799','2018-02-02 20:27:46','2018-02-02 20:30:05','/20180202/PHOTO20180202082740799.jpg','外滩','正常','外滩,上海,夜'),('PHOTO20180202082741030','2018-02-02 20:27:46','2018-02-02 20:30:05','/20180202/PHOTO20180202082741030.jpg','外滩','正常','外滩,上海,夜'),('PHOTO20180202082743958','2018-02-02 20:27:46','2018-02-02 20:30:05','/20180202/PHOTO20180202082743958.jpg','外滩','正常','外滩,上海,夜'),('PHOTO20180202082851855','2018-02-02 20:29:20','2018-02-02 20:30:05','/20180202/PHOTO20180202082851855.jpg','曲江池','正常','曲江池,西安,夜'),('PHOTO20180202082855614','2018-02-02 20:29:20','2018-02-02 20:30:05','/20180202/PHOTO20180202082855614.jpg','曲江池','正常','曲江池,西安,夜'),('PHOTO20180202082858537','2018-02-02 20:29:20','2018-02-02 20:30:05','/20180202/PHOTO20180202082858537.jpg','曲江池','正常','曲江池,西安,夜'),('PHOTO20180202082858830','2018-02-02 20:29:20','2018-02-02 20:30:05','/20180202/PHOTO20180202082858830.jpg','曲江池','正常','曲江池,西安,夜'),('PHOTO20180202082859072','2018-02-02 20:29:20','2018-02-02 20:30:05','/20180202/PHOTO20180202082859072.jpg','曲江池','正常','曲江池,西安,夜'),('PHOTO20180202082903957','2018-02-02 20:29:20','2018-02-02 20:30:05','/20180202/PHOTO20180202082903957.jpg','曲江池','正常','曲江池,西安,夜'),('PHOTO20180202082908597','2018-02-02 20:29:20','2018-02-02 20:30:05','/20180202/PHOTO20180202082908597.jpg','曲江池','正常','曲江池,西安,夜'),('PHOTO20180202082908802','2018-02-02 20:29:20','2018-02-02 20:30:05','/20180202/PHOTO20180202082908802.jpg','曲江池','正常','曲江池,西安,夜'),('PHOTO20180202082910738','2018-02-02 20:29:20','2018-02-02 20:30:05','/20180202/PHOTO20180202082910738.jpg','曲江池','正常','曲江池,西安,夜'),('PHOTO20180202082914754','2018-02-02 20:29:20','2018-02-02 20:30:05','/20180202/PHOTO20180202082914754.jpg','曲江池','正常','曲江池,西安,夜'),('PHOTO20180202083124028','2018-02-02 20:31:26','2018-02-02 20:56:43','/20180202/PHOTO20180202083124028.jpg','西湖','正常','杭州,西湖'),('PHOTO20180202083223520','2018-02-02 20:32:36','2018-02-02 20:56:43','/20180202/PHOTO20180202083223520.jpg','外滩','正常','上海,外滩,夜'),('PHOTO20180202083228421','2018-02-02 20:32:36','2018-02-02 20:56:40','/20180202/PHOTO20180202083228421.jpg','外滩','正常','上海,外滩,夜'),('PHOTO20180202083231201','2018-02-02 20:32:36','2018-02-02 20:56:40','/20180202/PHOTO20180202083231201.jpg','外滩','正常','上海,外滩,夜'),('PHOTO20180202083233186','2018-02-02 20:32:36','2018-02-02 20:56:40','/20180202/PHOTO20180202083233186.jpg','外滩','正常','上海,外滩,夜'),('PHOTO20180202083346238','2018-02-02 20:34:03','2018-02-02 20:56:40','/20180202/PHOTO20180202083346238.jpg','春','正常','校园,春'),('PHOTO20180202083348742','2018-02-02 20:34:03','2018-02-02 20:56:40','/20180202/PHOTO20180202083348742.jpg','春','正常','校园,春'),('PHOTO20180202083350640','2018-02-02 20:34:03','2018-02-02 20:56:40','/20180202/PHOTO20180202083350640.jpg','春','正常','校园,春'),('PHOTO20180202083350814','2018-02-02 20:34:03','2018-02-02 20:56:40','/20180202/PHOTO20180202083350814.jpg','春','正常','校园,春'),('PHOTO20180202083357270','2018-02-02 20:34:03','2018-02-02 20:56:40','/20180202/PHOTO20180202083357270.jpg','春','正常','校园,春'),('PHOTO20180202083400958','2018-02-02 20:34:03','2018-02-02 20:56:40','/20180202/PHOTO20180202083400958.jpg','春','正常','校园,春'),('PHOTO20180202083508868','2018-02-02 20:35:52','2018-02-02 20:56:40','/20180202/PHOTO20180202083508868.jpg','华山','正常','日出,华山'),('PHOTO20180202083512898','2018-02-02 20:35:52','2018-02-02 20:56:40','/20180202/PHOTO20180202083512898.jpg','华山','正常','日出,华山'),('PHOTO20180202083513709','2018-02-02 20:35:52','2018-02-02 20:56:40','/20180202/PHOTO20180202083513709.jpg','华山','正常','日出,华山'),('PHOTO20180202083514992','2018-02-02 20:35:52','2018-02-02 20:56:40','/20180202/PHOTO20180202083514992.jpg','华山','正常','日出,华山'),('PHOTO20180202083516434','2018-02-02 20:35:52','2018-02-02 20:56:40','/20180202/PHOTO20180202083516434.jpg','华山','正常','日出,华山'),('PHOTO20180202083517364','2018-02-02 20:35:52','2018-02-02 20:56:40','/20180202/PHOTO20180202083517364.jpg','华山','正常','日出,华山'),('PHOTO20180202083519062','2018-02-02 20:35:52','2018-02-02 20:56:37','/20180202/PHOTO20180202083519062.jpg','华山','正常','日出,华山'),('PHOTO20180202083520913','2018-02-02 20:35:52','2018-02-02 20:56:37','/20180202/PHOTO20180202083520913.jpg','华山','正常','日出,华山'),('PHOTO20180202083523297','2018-02-02 20:35:52','2018-02-02 20:56:37','/20180202/PHOTO20180202083523297.jpg','华山','正常','日出,华山'),('PHOTO20180202083526227','2018-02-02 20:35:52','2018-02-02 20:56:37','/20180202/PHOTO20180202083526227.jpg','华山','正常','日出,华山'),('PHOTO20180202083527070','2018-02-02 20:35:52','2018-02-02 20:56:37','/20180202/PHOTO20180202083527070.jpg','华山','正常','日出,华山'),('PHOTO20180202083527377','2018-02-02 20:35:52','2018-02-02 20:56:37','/20180202/PHOTO20180202083527377.jpg','华山','正常','日出,华山'),('PHOTO20180202083528229','2018-02-02 20:35:52','2018-02-02 20:56:37','/20180202/PHOTO20180202083528229.jpg','华山','正常','日出,华山'),('PHOTO20180202083529519','2018-02-02 20:35:52','2018-02-02 20:56:37','/20180202/PHOTO20180202083529519.jpg','华山','正常','日出,华山'),('PHOTO20180202083532416','2018-02-02 20:35:52','2018-02-02 20:56:37','/20180202/PHOTO20180202083532416.jpg','华山','正常','日出,华山'),('PHOTO20180202083535284','2018-02-02 20:35:52','2018-02-02 20:56:37','/20180202/PHOTO20180202083535284.jpg','华山','正常','日出,华山'),('PHOTO20180202083535597','2018-02-02 20:35:52','2018-02-02 20:56:37','/20180202/PHOTO20180202083535597.jpg','华山','正常','日出,华山'),('PHOTO20180202083536350','2018-02-02 20:35:52','2018-02-02 20:56:37','/20180202/PHOTO20180202083536350.jpg','华山','正常','日出,华山'),('PHOTO20180202083536891','2018-02-02 20:35:52','2018-02-02 20:56:37','/20180202/PHOTO20180202083536891.jpg','华山','正常','日出,华山'),('PHOTO20180202083547779','2018-02-02 20:35:52','2018-02-02 20:56:37','/20180202/PHOTO20180202083547779.jpg','华山','正常','日出,华山'),('PHOTO20180202083700869','2018-02-02 20:37:12','2018-02-02 20:56:37','/20180202/PHOTO20180202083700869.jpg','校园','正常','校园'),('PHOTO20180202083701601','2018-02-02 20:37:12','2018-02-02 20:54:43','/20180202/PHOTO20180202083701601.jpg','校园','正常','校园'),('PHOTO20180202083702662','2018-02-02 20:37:12','2018-02-02 20:54:43','/20180202/PHOTO20180202083702662.jpg','校园','正常','校园'),('PHOTO20180202083703740','2018-02-02 20:37:13','2018-02-02 20:54:43','/20180202/PHOTO20180202083703740.jpg','校园','正常','校园'),('PHOTO20180202083705283','2018-02-02 20:37:12','2018-02-02 20:54:43','/20180202/PHOTO20180202083705283.jpg','校园','正常','校园'),('PHOTO20180202083706060','2018-02-02 20:37:12','2018-02-02 20:54:43','/20180202/PHOTO20180202083706060.jpg','校园','正常','校园'),('PHOTO20180202083709752','2018-02-02 20:37:13','2018-02-02 20:54:43','/20180202/PHOTO20180202083709752.jpg','校园','正常','校园'),('PHOTO20180202083710507','2018-02-02 20:37:13','2018-02-02 20:54:43','/20180202/PHOTO20180202083710507.jpg','校园','正常','校园'),('PHOTO20180202083710583','2018-02-02 20:37:12','2018-02-02 20:54:43','/20180202/PHOTO20180202083710583.jpg','校园','正常','校园'),('PHOTO20180202083919931','2018-02-02 20:40:10','2018-02-02 20:54:43','/20180202/PHOTO20180202083919931.jpg','龙门石窟','正常','洛阳,龙门石窟'),('PHOTO20180202083920185','2018-02-02 20:40:10','2018-02-02 20:54:43','/20180202/PHOTO20180202083920185.jpg','龙门石窟','正常','洛阳,龙门石窟'),('PHOTO20180202083922558','2018-02-02 20:40:10','2018-02-02 20:54:43','/20180202/PHOTO20180202083922558.jpg','龙门石窟','正常','洛阳,龙门石窟'),('PHOTO20180202083924418','2018-02-02 20:40:10','2018-02-02 20:54:43','/20180202/PHOTO20180202083924418.jpg','龙门石窟','正常','洛阳,龙门石窟'),('PHOTO20180202083929936','2018-02-02 20:40:10','2018-02-02 20:54:43','/20180202/PHOTO20180202083929936.jpg','龙门石窟','正常','洛阳,龙门石窟'),('PHOTO20180202083931589','2018-02-02 20:40:10','2018-02-02 20:54:43','/20180202/PHOTO20180202083931589.jpg','龙门石窟','正常','洛阳,龙门石窟'),('PHOTO20180202083933606','2018-02-02 20:40:10','2018-02-02 20:54:31','/20180202/PHOTO20180202083933606.jpg','龙门石窟','正常','洛阳,龙门石窟'),('PHOTO20180202083935448','2018-02-02 20:40:10','2018-02-02 20:54:31','/20180202/PHOTO20180202083935448.jpg','龙门石窟','正常','洛阳,龙门石窟'),('PHOTO20180202083938052','2018-02-02 20:40:10','2018-02-02 20:54:31','/20180202/PHOTO20180202083938052.jpg','龙门石窟','正常','洛阳,龙门石窟'),('PHOTO20180202083938786','2018-02-02 20:40:10','2018-02-02 20:54:31','/20180202/PHOTO20180202083938786.jpg','龙门石窟','正常','洛阳,龙门石窟'),('PHOTO20180202083943123','2018-02-02 20:40:10','2018-02-02 20:54:31','/20180202/PHOTO20180202083943123.jpg','龙门石窟','正常','洛阳,龙门石窟'),('PHOTO20180202083945274','2018-02-02 20:40:10','2018-02-02 20:54:31','/20180202/PHOTO20180202083945274.jpg','龙门石窟','正常','洛阳,龙门石窟'),('PHOTO20180202083949550','2018-02-02 20:40:10','2018-02-02 20:54:31','/20180202/PHOTO20180202083949550.jpg','龙门石窟','正常','洛阳,龙门石窟'),('PHOTO20180202083950394','2018-02-02 20:40:10','2018-02-02 20:54:31','/20180202/PHOTO20180202083950394.jpg','龙门石窟','正常','洛阳,龙门石窟'),('PHOTO20180202083953334','2018-02-02 20:40:10','2018-02-02 20:54:31','/20180202/PHOTO20180202083953334.jpg','龙门石窟','正常','洛阳,龙门石窟'),('PHOTO20180202083954498','2018-02-02 20:40:10','2018-02-02 20:54:31','/20180202/PHOTO20180202083954498.jpg','龙门石窟','正常','洛阳,龙门石窟'),('PHOTO20180202083954804','2018-02-02 20:40:10','2018-02-02 20:54:31','/20180202/PHOTO20180202083954804.jpg','龙门石窟','正常','洛阳,龙门石窟'),('PHOTO20180202083958808','2018-02-02 20:40:10','2018-02-02 20:54:31','/20180202/PHOTO20180202083958808.jpg','龙门石窟','正常','洛阳,龙门石窟'),('PHOTO20180202084008137','2018-02-02 20:40:10','2018-02-02 20:54:31','/20180202/PHOTO20180202084008137.jpg','龙门石窟','正常','洛阳,龙门石窟'),('PHOTO20180202084356133','2018-02-02 20:44:28','2018-02-02 20:54:31','/20180202/PHOTO20180202084356133.jpg','校园','正常','校园'),('PHOTO20180202084357598','2018-02-02 20:44:28','2018-02-02 20:54:31','/20180202/PHOTO20180202084357598.jpg','校园','正常','校园'),('PHOTO20180202084400984','2018-02-02 20:44:28','2018-02-02 20:54:26','/20180202/PHOTO20180202084400984.jpg','校园','正常','校园'),('PHOTO20180202084402008','2018-02-02 20:44:28','2018-02-02 20:54:26','/20180202/PHOTO20180202084402008.jpg','校园','正常','校园'),('PHOTO20180202084404397','2018-02-02 20:44:28','2018-02-02 20:54:26','/20180202/PHOTO20180202084404397.jpg','校园','正常','校园'),('PHOTO20180202084406244','2018-02-02 20:44:28','2018-02-02 20:54:26','/20180202/PHOTO20180202084406244.jpg','校园','正常','校园'),('PHOTO20180202084410035','2018-02-02 20:44:28','2018-02-02 20:54:26','/20180202/PHOTO20180202084410035.jpg','校园','正常','校园'),('PHOTO20180202084415222','2018-02-02 20:44:28','2018-02-02 20:54:26','/20180202/PHOTO20180202084415222.jpg','校园','正常','校园'),('PHOTO20180202084415762','2018-02-02 20:44:28','2018-02-02 20:54:26','/20180202/PHOTO20180202084415762.jpg','校园','正常','校园'),('PHOTO20180202084424407','2018-02-02 20:44:28','2018-02-02 20:54:26','/20180202/PHOTO20180202084424407.jpg','校园','正常','校园'),('PHOTO20180202084425361','2018-02-02 20:44:28','2018-02-02 20:54:26','/20180202/PHOTO20180202084425361.jpg','校园','正常','校园'),('PHOTO20180202084559739','2018-02-02 20:46:46','2018-02-02 20:54:26','/20180202/PHOTO20180202084559739.jpg','春','正常','校园,春,花'),('PHOTO20180202084600139','2018-02-02 20:46:46','2018-02-02 20:54:26','/20180202/PHOTO20180202084600139.jpg','春','正常','校园,春,花'),('PHOTO20180202084604390','2018-02-02 20:46:46','2018-02-02 20:54:26','/20180202/PHOTO20180202084604390.jpg','春','正常','校园,春,花'),('PHOTO20180202084612249','2018-02-02 20:46:46','2018-02-02 20:54:26','/20180202/PHOTO20180202084612249.jpg','春','正常','校园,春,花'),('PHOTO20180202084617672','2018-02-02 20:46:46','2018-02-02 20:54:26','/20180202/PHOTO20180202084617672.jpg','春','正常','校园,春,花'),('PHOTO20180202084620560','2018-02-02 20:46:46','2018-02-02 20:54:26','/20180202/PHOTO20180202084620560.jpg','春','正常','校园,春,花'),('PHOTO20180202084624557','2018-02-02 20:46:46','2018-02-02 20:54:23','/20180202/PHOTO20180202084624557.jpg','春','正常','校园,春,花'),('PHOTO20180202084627584','2018-02-02 20:46:46','2018-02-02 20:54:23','/20180202/PHOTO20180202084627584.jpg','春','正常','校园,春,花'),('PHOTO20180202084630577','2018-02-02 20:46:46','2018-02-02 20:54:23','/20180202/PHOTO20180202084630577.jpg','春','正常','校园,春,花'),('PHOTO20180202084630819','2018-02-02 20:46:46','2018-02-02 20:54:23','/20180202/PHOTO20180202084630819.jpg','春','正常','校园,春,花'),('PHOTO20180202084633423','2018-02-02 20:46:46','2018-02-02 20:54:23','/20180202/PHOTO20180202084633423.jpg','春','正常','校园,春,花'),('PHOTO20180202084634887','2018-02-02 20:46:46','2018-02-02 20:54:23','/20180202/PHOTO20180202084634887.jpg','春','正常','校园,春,花'),('PHOTO20180202084900988','2018-02-02 20:49:08','2018-02-02 20:54:23','/20180202/PHOTO20180202084900988.jpg','生活','正常','生活'),('PHOTO20180202084901375','2018-02-02 20:49:08','2018-02-02 20:54:23','/20180202/PHOTO20180202084901375.jpg','生活','正常','生活'),('PHOTO20180202084906875','2018-02-02 20:49:08','2018-02-02 20:54:23','/20180202/PHOTO20180202084906875.jpg','生活','正常','生活'),('PHOTO20180202085036681','2018-02-02 20:50:48','2018-02-02 20:54:23','/20180202/PHOTO20180202085036681.jpg','大雁塔','正常','大雁塔,夜,西安'),('PHOTO20180202085037537','2018-02-02 20:50:48','2018-02-02 20:54:23','/20180202/PHOTO20180202085037537.jpg','大雁塔','正常','大雁塔,夜,西安'),('PHOTO20180202085039471','2018-02-02 20:50:48','2018-02-02 20:54:23','/20180202/PHOTO20180202085039471.jpg','大雁塔','正常','大雁塔,夜,西安'),('PHOTO20180202085039676','2018-02-02 20:50:48','2018-02-02 20:54:23','/20180202/PHOTO20180202085039676.jpg','大雁塔','正常','大雁塔,夜,西安'),('PHOTO20180202085040714','2018-02-02 20:50:48','2018-02-02 20:54:23','/20180202/PHOTO20180202085040714.jpg','大雁塔','正常','大雁塔,夜,西安'),('PHOTO20180202085042239','2018-02-02 20:50:48','2018-02-02 20:54:23','/20180202/PHOTO20180202085042239.jpg','大雁塔','正常','大雁塔,夜,西安'),('PHOTO20180202085129864','2018-02-02 20:51:31','2018-02-02 20:56:33','/20180202/PHOTO20180202085129864.jpg','生活','正常','生活,书'),('PHOTO20180202085130389','2018-02-02 20:51:31','2018-02-02 20:56:33','/20180202/PHOTO20180202085130389.jpg','生活','正常','生活,书'),('PHOTO20180202085257291','2018-02-02 20:53:36','2018-02-02 20:56:33','/20180202/PHOTO20180202085257291.jpg','春','正常','校园,春,花'),('PHOTO20180202085303057','2018-02-02 20:53:36','2018-02-02 20:56:33','/20180202/PHOTO20180202085303057.jpg','春','正常','校园,春,花'),('PHOTO20180202085303128','2018-02-02 20:53:36','2018-02-02 20:56:33','/20180202/PHOTO20180202085303128.jpg','春','正常','校园,春,花'),('PHOTO20180202085306248','2018-02-02 20:53:36','2018-02-02 20:56:33','/20180202/PHOTO20180202085306248.jpg','春','正常','校园,春,花'),('PHOTO20180202085309617','2018-02-02 20:53:36','2018-02-02 20:56:33','/20180202/PHOTO20180202085309617.jpg','春','正常','校园,春,花'),('PHOTO20180202085311673','2018-02-02 20:53:36','2018-02-02 20:56:33','/20180202/PHOTO20180202085311673.jpg','春','正常','校园,春,花'),('PHOTO20180202085315866','2018-02-02 20:53:36','2018-02-02 20:56:33','/20180202/PHOTO20180202085315866.jpg','春','正常','校园,春,花'),('PHOTO20180202085317905','2018-02-02 20:53:36','2018-02-02 20:56:33','/20180202/PHOTO20180202085317905.jpg','春','正常','校园,春,花'),('PHOTO20180202085319390','2018-02-02 20:53:36','2018-02-02 20:56:33','/20180202/PHOTO20180202085319390.jpg','春','正常','校园,春,花'),('PHOTO20180202085321441','2018-02-02 20:53:36','2018-02-02 20:56:33','/20180202/PHOTO20180202085321441.jpg','春','正常','校园,春,花'),('PHOTO20180202085325441','2018-02-02 20:53:36','2018-02-02 20:56:33','/20180202/PHOTO20180202085325441.jpg','春','正常','校园,春,花'),('PHOTO20180202085325857','2018-02-02 20:53:36','2018-02-02 20:56:33','/20180202/PHOTO20180202085325857.jpg','春','正常','校园,春,花'),('PHOTO20180202085326507','2018-02-02 20:53:36','2018-02-02 20:56:33','/20180202/PHOTO20180202085326507.jpg','春','正常','校园,春,花'),('PHOTO20180202090647892','2018-02-02 21:06:52','2018-02-02 21:07:16','/20180202/PHOTO20180202090647892.jpg','人民公园','正常','成都,人民公园'),('PHOTO20180202090650003','2018-02-02 21:06:52','2018-02-02 21:07:01','/20180202/PHOTO20180202090650003.jpg','人民公园','正常','成都,人民公园'),('PHOTO20180210044910391','2018-02-10 16:49:38','2018-02-10 16:50:27','/20180210/PHOTO20180210044910391.jpg','雪','正常','家乡,雪'),('PHOTO20180210044913534','2018-02-10 16:49:38','2018-02-10 16:50:27','/20180210/PHOTO20180210044913534.jpg','雪','正常','家乡,雪'),('PHOTO20180210044914730','2018-02-10 16:49:38','2018-02-10 16:50:27','/20180210/PHOTO20180210044914730.jpg','雪','正常','家乡,雪'),('PHOTO20180210044915067','2018-02-10 16:49:38','2018-02-10 16:50:27','/20180210/PHOTO20180210044915067.jpg','雪','正常','家乡,雪'),('PHOTO20180210044916975','2018-02-10 16:49:38','2018-02-10 16:50:27','/20180210/PHOTO20180210044916975.jpg','雪','正常','家乡,雪'),('PHOTO20180210044917536','2018-02-10 16:49:38','2018-02-10 16:50:27','/20180210/PHOTO20180210044917536.jpg','雪','正常','家乡,雪'),('PHOTO20180210044918773','2018-02-10 16:49:38','2018-02-10 16:50:27','/20180210/PHOTO20180210044918773.jpg','雪','正常','家乡,雪'),('PHOTO20180210044919616','2018-02-10 16:49:38','2018-03-27 13:26:47','/20180210/PHOTO20180210044919616.jpg','雪','正常','家乡,雪'),('PHOTO20180210044924868','2018-02-10 16:49:38','2018-03-27 13:26:47','/20180210/PHOTO20180210044924868.jpg','雪','正常','家乡,雪'),('PHOTO20180210044926178','2018-02-10 16:49:38','2018-03-27 13:26:47','/20180210/PHOTO20180210044926178.jpg','雪','正常','家乡,雪'),('PHOTO20180210044934670','2018-02-10 16:49:38','2018-03-27 13:26:47','/20180210/PHOTO20180210044934670.jpg','雪','正常','家乡,雪'),('PHOTO20180210053235838','2018-02-10 17:32:37','2018-03-27 13:26:47','/20180210/PHOTO20180210053235838.jpg','星轨','正常','家乡,夜，星'),('PHOTO20180317091537880','2018-03-17 21:15:40','2018-03-27 13:23:00','/20180317/PHOTO20180317091537880.jpg','','回收站',''),('PHOTO20180327012627004','2018-03-27 13:26:31','2018-03-27 13:26:47','/20180327/PHOTO20180327012627004.jpg','花','正常','春,花,西安'),('PHOTO20180327012627210','2018-03-27 13:26:31','2018-03-27 13:26:47','/20180327/PHOTO20180327012627210.jpg','花','正常','春,花,西安'),('PHOTO20180327012627337','2018-03-27 13:26:31','2018-03-27 13:26:47','/20180327/PHOTO20180327012627337.jpg','花','正常','春,花,西安'),('PHOTO20180327012628069','2018-03-27 13:26:31','2018-03-27 13:26:47','/20180327/PHOTO20180327012628069.jpg','花','正常','春,花,西安'),('PHOTO20180327012628276','2018-03-27 13:26:31','2018-05-10 22:32:15','/20180327/PHOTO20180327012628276.jpg','花','正常','春,花,西安'),('PHOTO20180327012628495','2018-03-27 13:26:31','2018-05-10 22:32:15','/20180327/PHOTO20180327012628495.jpg','花','正常','春,花,西安'),('PHOTO20180327012628834','2018-03-27 13:26:31','2018-05-10 22:32:15','/20180327/PHOTO20180327012628834.jpg','花','正常','春,花,西安'),('PHOTO20180327012628955','2018-03-27 13:26:31','2018-05-10 22:32:15','/20180327/PHOTO20180327012628955.jpg','花','正常','春,花,西安'),('PHOTO20180327012629167','2018-03-27 13:26:31','2018-05-10 22:32:15','/20180327/PHOTO20180327012629167.jpg','花','正常','春,花,西安'),('PHOTO20180327012629542','2018-03-27 13:26:31','2018-05-10 22:32:15','/20180327/PHOTO20180327012629542.jpg','花','正常','春,花,西安'),('PHOTO20180510103112813','2018-05-10 22:31:15','2018-05-10 22:32:15','/20180510/PHOTO20180510103112813.jpg','大唐芙蓉园','正常','西安,大唐芙蓉园'),('PHOTO20180510103112906','2018-05-10 22:31:15','2018-05-10 22:32:15','/20180510/PHOTO20180510103112906.jpg','大唐芙蓉园','正常','西安,大唐芙蓉园'),('PHOTO20180510103113150','2018-05-10 22:31:15','2018-05-10 22:32:15','/20180510/PHOTO20180510103113150.jpg','大唐芙蓉园','正常','西安,大唐芙蓉园'),('PHOTO20180510103113315','2018-05-10 22:31:14','2018-05-10 22:32:15','/20180510/PHOTO20180510103113315.jpg','大唐芙蓉园','正常','西安,大唐芙蓉园'),('PHOTO20180510103113422','2018-05-10 22:31:14','2018-05-10 22:32:15','/20180510/PHOTO20180510103113422.jpg','大唐芙蓉园','正常','西安,大唐芙蓉园'),('PHOTO20180510103159970','2018-05-10 22:32:02','2018-05-10 22:32:15','/20180510/PHOTO20180510103159970.jpg','西安','正常','西安'),('PHOTO20180510103200149','2018-05-10 22:32:02','2018-05-10 22:32:15','/20180510/PHOTO20180510103200149.jpg','西安','正常','西安'),('PHOTO20180510103200481','2018-05-10 22:32:02','2018-05-10 22:32:15','/20180510/PHOTO20180510103200481.jpg','西安','正常','西安'),('PHOTO20180510103200485','2018-05-10 22:32:02','2018-05-10 22:32:15','/20180510/PHOTO20180510103200485.jpg','西安','正常','西安');
/*!40000 ALTER TABLE `photo` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `recycle`
--

DROP TABLE IF EXISTS `recycle`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `recycle` (
  `recycle_id` varchar(32) NOT NULL,
  `gmt_create` datetime DEFAULT NULL,
  `gmt_modified` datetime DEFAULT NULL,
  `type` varchar(128) DEFAULT NULL,
  `target_id` varchar(32) DEFAULT NULL,
  PRIMARY KEY (`recycle_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `recycle`
--

LOCK TABLES `recycle` WRITE;
/*!40000 ALTER TABLE `recycle` DISABLE KEYS */;
/*!40000 ALTER TABLE `recycle` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `statistics`
--

DROP TABLE IF EXISTS `statistics`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `statistics` (
  `days` date NOT NULL,
  `article_count` int(10) unsigned DEFAULT '0',
  `photo_count` int(10) unsigned DEFAULT '0',
  `ip_count` int(10) unsigned DEFAULT '0',
  `pv_count` int(10) unsigned DEFAULT '0',
  `gmt_create` datetime DEFAULT NULL,
  `gmt_modified` datetime DEFAULT NULL,
  PRIMARY KEY (`days`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `statistics`
--

LOCK TABLES `statistics` WRITE;
/*!40000 ALTER TABLE `statistics` DISABLE KEYS */;
INSERT INTO `statistics` VALUES ('2018-01-30',0,15,14,56,'2018-01-31 00:10:00','2018-01-31 00:10:00'),('2018-01-31',0,4,7,47,'2018-02-01 00:10:00','2018-02-01 00:10:00'),('2018-02-01',0,1,40,163,'2018-02-02 00:10:00','2018-02-02 00:10:00'),('2018-02-02',0,156,10,149,'2018-02-03 00:10:00','2018-02-03 00:10:00'),('2018-02-03',0,0,36,163,'2018-02-04 00:10:00','2018-02-04 00:10:00'),('2018-02-04',0,0,27,110,'2018-02-05 00:10:00','2018-02-05 00:10:00'),('2018-02-05',0,0,30,215,'2018-02-06 00:10:00','2018-02-06 00:10:00'),('2018-02-06',0,0,14,71,'2018-02-07 00:10:00','2018-02-07 00:10:00'),('2018-02-07',0,0,34,204,'2018-02-08 00:10:00','2018-02-08 00:10:00'),('2018-02-08',0,0,32,120,'2018-02-09 00:10:00','2018-02-09 00:10:00'),('2018-02-09',0,0,77,94,'2018-02-10 00:10:00','2018-02-10 00:10:00'),('2018-02-10',3,12,28,186,'2018-02-11 00:10:00','2018-02-11 00:10:00'),('2018-02-11',0,0,32,103,'2018-02-12 00:10:00','2018-02-12 00:10:00'),('2018-02-12',0,0,72,198,'2018-02-13 00:10:00','2018-02-13 00:10:00'),('2018-02-13',0,0,62,197,'2018-02-14 00:10:00','2018-02-14 00:10:00'),('2018-02-14',0,0,12,86,'2018-02-15 00:10:00','2018-02-15 00:10:00'),('2018-02-15',0,0,38,96,'2018-02-16 00:10:00','2018-02-16 00:10:00'),('2018-02-16',0,0,33,144,'2018-02-17 00:10:00','2018-02-17 00:10:00'),('2018-02-17',0,0,47,325,'2018-02-18 00:10:00','2018-02-18 00:10:00'),('2018-02-18',0,0,68,231,'2018-02-19 00:10:00','2018-02-19 00:10:00'),('2018-02-19',0,0,39,97,'2018-02-20 00:10:00','2018-02-20 00:10:00'),('2018-02-20',1,0,54,189,'2018-02-21 00:10:00','2018-02-21 00:10:00'),('2018-02-21',1,0,61,195,'2018-02-22 00:10:00','2018-02-22 00:10:00'),('2018-02-22',1,0,39,163,'2018-02-23 00:10:00','2018-02-23 00:10:00'),('2018-02-23',1,0,42,178,'2018-02-24 00:10:00','2018-02-24 00:10:00'),('2018-02-24',0,0,49,156,'2018-02-25 00:10:00','2018-02-25 00:10:00'),('2018-02-25',1,0,55,136,'2018-02-26 00:10:00','2018-02-26 00:10:00'),('2018-02-26',0,0,45,92,'2018-02-27 00:10:00','2018-02-27 00:10:00'),('2018-02-27',1,0,51,114,'2018-02-28 00:10:00','2018-02-28 00:10:00'),('2018-02-28',1,0,49,106,'2018-03-01 00:10:00','2018-03-01 00:10:00'),('2018-03-01',0,0,52,140,'2018-03-02 00:10:00','2018-03-02 00:10:00'),('2018-03-02',0,0,42,89,'2018-03-03 00:10:00','2018-03-03 00:10:00'),('2018-03-03',0,0,48,123,'2018-03-04 00:10:00','2018-03-04 00:10:00'),('2018-03-04',0,0,57,89,'2018-03-05 00:10:00','2018-03-05 00:10:00'),('2018-03-05',0,0,80,264,'2018-03-06 00:10:00','2018-03-06 00:10:00'),('2018-03-06',0,0,53,83,'2018-03-07 00:10:00','2018-03-07 00:10:00'),('2018-03-07',0,0,60,93,'2018-03-08 00:10:00','2018-03-08 00:10:00'),('2018-03-08',0,0,49,123,'2018-03-09 00:10:00','2018-03-09 00:10:00'),('2018-03-09',0,0,48,66,'2018-03-10 00:10:00','2018-03-10 00:10:00'),('2018-03-10',0,0,51,84,'2018-03-11 00:10:00','2018-03-11 00:10:00'),('2018-03-11',0,0,48,103,'2018-03-12 00:10:00','2018-03-12 00:10:00'),('2018-03-12',0,0,46,68,'2018-03-13 00:10:00','2018-03-13 00:10:00'),('2018-03-13',0,0,50,91,'2018-03-14 00:10:00','2018-03-14 00:10:00'),('2018-03-14',0,0,52,146,'2018-03-15 00:10:00','2018-03-15 00:10:00'),('2018-03-15',0,0,37,56,'2018-03-16 00:10:00','2018-03-16 00:10:00'),('2018-03-16',0,0,51,138,'2018-03-17 00:10:00','2018-03-17 00:10:00'),('2018-03-17',0,1,39,156,'2018-03-18 00:10:00','2018-03-18 00:10:00'),('2018-03-18',0,0,37,58,'2018-03-19 00:10:00','2018-03-19 00:10:00'),('2018-03-19',0,0,38,102,'2018-03-20 00:10:00','2018-03-20 00:10:00'),('2018-03-20',0,0,54,123,'2018-03-21 00:10:00','2018-03-21 00:10:00'),('2018-03-21',0,0,48,89,'2018-03-22 00:10:00','2018-03-22 00:10:00'),('2018-03-22',0,0,41,70,'2018-03-23 00:10:00','2018-03-23 00:10:00'),('2018-03-23',0,0,48,170,'2018-03-24 00:10:00','2018-03-24 00:10:00'),('2018-03-24',0,0,57,100,'2018-03-25 00:10:00','2018-03-25 00:10:00'),('2018-03-25',0,0,69,136,'2018-03-26 00:10:00','2018-03-26 00:10:00'),('2018-03-26',0,0,49,111,'2018-03-27 00:10:00','2018-03-27 00:10:00'),('2018-03-27',0,10,25,81,'2018-03-28 00:10:00','2018-03-28 00:10:00'),('2018-03-28',0,0,50,121,'2018-03-29 00:10:00','2018-03-29 00:10:00'),('2018-03-29',2,0,52,142,'2018-03-30 00:10:00','2018-03-30 00:10:00'),('2018-03-30',1,0,58,156,'2018-03-31 00:10:00','2018-03-31 00:10:00'),('2018-03-31',1,0,47,102,'2018-04-01 00:10:00','2018-04-01 00:10:00'),('2018-04-01',1,0,92,265,'2018-04-02 00:10:00','2018-04-02 00:10:00'),('2018-04-02',1,0,43,140,'2018-04-03 00:10:00','2018-04-03 00:10:00'),('2018-04-03',1,0,47,83,'2018-04-04 00:10:00','2018-04-04 00:10:00'),('2018-04-04',1,0,59,118,'2018-04-05 00:10:00','2018-04-05 00:10:00'),('2018-04-05',1,0,45,130,'2018-04-06 00:10:00','2018-04-06 00:10:00'),('2018-04-06',2,0,53,141,'2018-04-07 00:10:00','2018-04-07 00:10:00'),('2018-04-07',2,0,71,203,'2018-04-08 00:10:00','2018-04-08 00:10:00'),('2018-04-08',2,0,58,165,'2018-04-09 00:10:00','2018-04-09 00:10:00'),('2018-04-09',2,0,62,136,'2018-04-10 00:10:00','2018-04-10 00:10:00'),('2018-04-10',2,0,69,205,'2018-04-11 00:10:00','2018-04-11 00:10:00'),('2018-04-11',2,0,71,189,'2018-04-12 00:10:00','2018-04-12 00:10:00'),('2018-04-12',2,0,68,182,'2018-04-13 00:10:00','2018-04-13 00:10:00'),('2018-04-13',2,0,96,222,'2018-04-14 00:10:00','2018-04-14 00:10:00'),('2018-04-14',2,0,70,190,'2018-04-15 00:10:00','2018-04-15 00:10:00'),('2018-04-15',2,0,63,229,'2018-04-16 00:10:00','2018-04-16 00:10:00'),('2018-04-16',3,0,93,391,'2018-04-17 00:10:00','2018-04-17 00:10:00'),('2018-04-17',2,0,101,211,'2018-04-18 00:10:00','2018-04-18 00:10:00'),('2018-04-18',0,0,74,201,'2018-04-19 00:10:00','2018-04-19 00:10:00'),('2018-04-19',2,0,91,216,'2018-04-20 00:10:00','2018-04-20 00:10:00'),('2018-04-20',2,0,78,197,'2018-04-21 00:10:00','2018-04-21 00:10:00'),('2018-04-21',1,0,79,127,'2018-04-22 00:10:00','2018-04-22 00:10:00'),('2018-04-22',2,0,86,173,'2018-04-23 00:10:00','2018-04-23 00:10:00'),('2018-04-23',2,0,78,188,'2018-04-24 00:10:00','2018-04-24 00:10:00'),('2018-04-24',2,0,97,355,'2018-04-25 00:10:00','2018-04-25 00:10:00'),('2018-04-25',1,0,107,291,'2018-04-26 00:10:00','2018-04-26 00:10:00'),('2018-04-26',0,0,97,152,'2018-04-27 00:10:00','2018-04-27 00:10:00'),('2018-04-27',0,0,73,134,'2018-04-28 00:10:00','2018-04-28 00:10:00'),('2018-04-28',0,0,81,217,'2018-04-29 00:10:00','2018-04-29 00:10:00'),('2018-04-29',0,0,69,144,'2018-04-30 00:10:00','2018-04-30 00:10:00'),('2018-04-30',0,0,67,156,'2018-05-01 00:10:00','2018-05-01 00:10:00'),('2018-05-01',1,0,74,215,'2018-05-02 00:10:00','2018-05-02 00:10:00'),('2018-05-02',0,0,74,112,'2018-05-03 00:10:00','2018-05-03 00:10:00'),('2018-05-03',0,0,105,286,'2018-05-04 00:10:00','2018-05-04 00:10:00'),('2018-05-04',0,0,73,117,'2018-05-05 00:10:00','2018-05-05 00:10:00'),('2018-05-05',0,0,62,89,'2018-05-06 00:10:00','2018-05-06 00:10:00'),('2018-05-06',0,0,62,130,'2018-05-07 00:10:00','2018-05-07 00:10:00'),('2018-05-07',0,0,71,211,'2018-05-08 00:10:00','2018-05-08 00:10:00'),('2018-05-08',0,0,92,164,'2018-05-09 00:10:00','2018-05-09 00:10:00'),('2018-05-09',2,0,123,290,'2018-05-10 00:10:00','2018-05-10 00:10:00'),('2018-05-10',0,9,137,235,'2018-05-11 00:10:00','2018-05-11 00:10:00'),('2018-05-11',0,0,129,197,'2018-05-12 00:10:00','2018-05-12 00:10:00'),('2018-05-12',1,0,167,320,'2018-05-13 00:10:00','2018-05-13 00:10:00'),('2018-05-13',0,0,116,195,'2018-05-14 00:10:00','2018-05-14 00:10:00'),('2018-05-14',0,0,109,165,'2018-05-15 00:10:00','2018-05-15 00:10:00'),('2018-05-15',0,0,115,267,'2018-05-16 00:10:00','2018-05-16 00:10:00'),('2018-05-16',0,0,121,172,'2018-05-17 00:10:00','2018-05-17 00:10:00'),('2018-05-17',0,0,81,129,'2018-05-18 00:10:00','2018-05-18 00:10:00'),('2018-05-18',0,0,98,196,'2018-05-19 00:10:00','2018-05-19 00:10:00'),('2018-05-19',0,0,108,231,'2018-05-20 00:10:00','2018-05-20 00:10:00'),('2018-05-20',0,0,90,161,'2018-05-21 00:10:00','2018-05-21 00:10:00'),('2018-05-21',0,0,97,238,'2018-05-22 00:10:00','2018-05-22 00:10:00'),('2018-05-22',0,0,125,187,'2018-05-23 00:10:00','2018-05-23 00:10:00'),('2018-05-23',0,0,104,153,'2018-05-24 00:10:00','2018-05-24 00:10:00'),('2018-05-24',0,0,105,218,'2018-05-25 00:10:00','2018-05-25 00:10:00'),('2018-05-25',0,0,107,165,'2018-05-26 00:10:00','2018-05-26 00:10:00'),('2018-05-26',0,0,99,176,'2018-05-27 00:10:00','2018-05-27 00:10:00'),('2018-05-27',0,0,101,239,'2018-05-28 00:10:00','2018-05-28 00:10:00'),('2018-05-28',0,0,99,200,'2018-05-29 00:10:00','2018-05-29 00:10:00'),('2018-05-29',0,0,108,225,'2018-05-30 00:10:00','2018-05-30 00:10:00'),('2018-05-30',0,0,100,157,'2018-05-31 00:10:00','2018-05-31 00:10:00'),('2018-05-31',0,0,108,152,'2018-06-01 00:10:00','2018-06-01 00:10:00'),('2018-06-01',0,0,123,237,'2018-06-02 00:10:00','2018-06-02 00:10:00'),('2018-06-02',0,0,110,206,'2018-06-03 00:10:00','2018-06-03 00:10:00'),('2018-06-03',0,0,105,141,'2018-06-04 00:10:00','2018-06-04 00:10:00'),('2018-06-04',0,0,110,160,'2018-06-05 00:10:00','2018-06-05 00:10:00'),('2018-06-05',0,0,99,246,'2018-06-06 00:10:00','2018-06-06 00:10:00'),('2018-06-06',0,0,101,203,'2018-06-07 00:10:00','2018-06-07 00:10:00'),('2018-06-07',0,0,115,206,'2018-06-08 00:10:00','2018-06-08 00:10:00'),('2018-06-08',0,0,108,215,'2018-06-09 00:10:00','2018-06-09 00:10:00'),('2018-06-09',0,0,94,151,'2018-06-10 00:10:00','2018-06-10 00:10:00'),('2018-06-10',0,0,117,227,'2018-06-11 00:10:00','2018-06-11 00:10:00'),('2018-06-11',0,0,161,272,'2018-06-12 00:10:00','2018-06-12 00:10:00'),('2018-06-12',0,0,165,243,'2018-06-13 00:10:00','2018-06-13 00:10:00'),('2018-06-13',0,0,206,289,'2018-06-14 00:10:00','2018-06-14 00:10:00'),('2018-06-14',0,0,203,305,'2018-06-15 00:10:00','2018-06-15 00:10:00'),('2018-06-15',0,0,237,334,'2018-06-16 00:10:00','2018-06-16 00:10:00'),('2018-06-16',0,0,207,358,'2018-06-17 00:10:00','2018-06-17 00:10:00'),('2018-06-17',0,0,167,235,'2018-06-18 00:10:00','2018-06-18 00:10:00'),('2018-06-18',0,0,170,297,'2018-06-19 00:10:00','2018-06-19 00:10:00'),('2018-06-19',0,0,158,279,'2018-06-20 00:10:00','2018-06-20 00:10:00'),('2018-06-20',0,0,122,243,'2018-06-21 00:10:00','2018-06-21 00:10:00'),('2018-06-21',0,0,132,204,'2018-06-22 00:10:00','2018-06-22 00:10:00'),('2018-06-22',0,0,169,232,'2018-06-23 00:10:00','2018-06-23 00:10:00'),('2018-06-23',0,0,212,266,'2018-06-24 00:10:00','2018-06-24 00:10:00'),('2018-06-24',0,0,193,277,'2018-06-25 00:10:00','2018-06-25 00:10:00'),('2018-06-25',0,0,242,353,'2018-06-26 00:10:00','2018-06-26 00:10:00'),('2018-06-26',0,0,178,268,'2018-06-27 00:10:00','2018-06-27 00:10:00'),('2018-06-27',0,0,146,220,'2018-06-28 00:10:00','2018-06-28 00:10:00'),('2018-06-28',0,0,144,263,'2018-06-29 00:10:00','2018-06-29 00:10:00'),('2018-06-29',0,0,129,216,'2018-06-30 00:10:00','2018-06-30 00:10:00'),('2018-06-30',0,0,118,241,'2018-07-01 00:10:00','2018-07-01 00:10:00'),('2018-07-01',0,0,106,162,'2018-07-02 00:10:00','2018-07-02 00:10:00'),('2018-07-02',0,0,112,204,'2018-07-03 00:10:00','2018-07-03 00:10:00'),('2018-07-03',0,0,120,253,'2018-07-04 00:10:00','2018-07-04 00:10:00'),('2018-07-04',0,0,116,176,'2018-07-05 00:10:00','2018-07-05 00:10:00'),('2018-07-05',0,0,116,194,'2018-07-06 00:10:00','2018-07-06 00:10:00'),('2018-07-06',0,0,118,303,'2018-07-07 00:10:00','2018-07-07 00:10:00'),('2018-07-07',0,0,91,131,'2018-07-08 00:10:00','2018-07-08 00:10:00'),('2018-07-08',0,0,102,216,'2018-07-09 00:10:00','2018-07-09 00:10:00'),('2018-07-09',0,0,95,170,'2018-07-10 00:10:00','2018-07-10 00:10:00'),('2018-07-10',0,0,96,129,'2018-07-11 00:10:00','2018-07-11 00:10:00'),('2018-07-11',0,0,96,167,'2018-07-12 00:10:00','2018-07-12 00:10:00'),('2018-07-12',0,0,111,210,'2018-07-13 00:10:00','2018-07-13 00:10:00'),('2018-07-13',0,0,97,256,'2018-07-14 00:10:00','2018-07-14 00:10:00'),('2018-07-14',0,0,108,246,'2018-07-15 00:10:00','2018-07-15 00:10:00'),('2018-07-15',0,0,84,161,'2018-07-16 00:10:00','2018-07-16 00:10:00'),('2018-07-16',0,0,102,235,'2018-07-17 00:10:00','2018-07-17 00:10:00'),('2018-07-17',0,0,101,139,'2018-07-18 00:10:00','2018-07-18 00:10:00'),('2018-07-18',0,0,108,214,'2018-07-19 00:10:00','2018-07-19 00:10:00'),('2018-07-19',0,0,115,178,'2018-07-20 00:10:00','2018-07-20 00:10:00'),('2018-07-20',0,0,124,221,'2018-07-21 00:10:00','2018-07-21 00:10:00'),('2018-07-21',0,0,122,219,'2018-07-22 00:10:00','2018-07-22 00:10:00'),('2018-07-22',0,0,102,160,'2018-07-23 00:10:00','2018-07-23 00:10:00'),('2018-07-23',0,0,107,145,'2018-07-24 00:10:00','2018-07-24 00:10:00'),('2018-07-24',0,0,105,178,'2018-07-25 00:10:00','2018-07-25 00:10:00'),('2018-07-25',0,0,106,150,'2018-07-26 00:10:00','2018-07-26 00:10:00'),('2018-07-26',0,0,124,179,'2018-07-27 00:10:00','2018-07-27 00:10:00'),('2018-07-27',0,0,121,250,'2018-07-28 00:10:00','2018-07-28 00:10:00'),('2018-07-28',0,0,126,238,'2018-07-29 00:10:00','2018-07-29 00:10:00'),('2018-07-29',0,0,122,347,'2018-07-30 00:10:00','2018-07-30 00:10:00'),('2018-07-30',0,0,106,265,'2018-07-31 00:10:00','2018-07-31 00:10:00'),('2018-07-31',0,0,108,175,'2018-08-01 00:10:00','2018-08-01 00:10:00'),('2018-08-01',0,0,112,178,'2018-08-02 00:10:00','2018-08-02 00:10:00'),('2018-08-02',0,0,93,204,'2018-08-03 00:10:00','2018-08-03 00:10:00'),('2018-08-03',0,0,99,163,'2018-08-04 00:10:00','2018-08-04 00:10:00'),('2018-08-04',0,0,111,176,'2018-08-05 00:10:00','2018-08-05 00:10:00'),('2018-08-05',0,0,124,404,'2018-08-06 00:10:00','2018-08-06 00:10:00'),('2018-08-06',0,0,121,363,'2018-08-07 00:10:00','2018-08-07 00:10:00'),('2018-08-07',0,0,118,185,'2018-08-08 00:10:00','2018-08-08 00:10:00'),('2018-08-08',0,0,93,207,'2018-08-09 00:10:00','2018-08-09 00:10:00'),('2018-08-09',0,0,107,133,'2018-08-10 00:10:00','2018-08-10 00:10:00'),('2018-08-10',0,0,97,133,'2018-08-11 00:10:00','2018-08-11 00:10:00'),('2018-08-11',0,0,109,186,'2018-08-12 00:10:00','2018-08-12 00:10:00'),('2018-08-12',0,0,101,162,'2018-08-13 00:10:00','2018-08-13 00:10:00'),('2018-08-13',0,0,95,152,'2018-08-14 00:10:00','2018-08-14 00:10:00'),('2018-08-14',0,0,76,182,'2018-08-15 00:10:00','2018-08-15 00:10:00'),('2018-08-15',0,0,89,229,'2018-08-16 00:10:00','2018-08-16 00:10:00'),('2018-08-16',0,0,105,144,'2018-08-17 00:10:00','2018-08-17 00:10:00'),('2018-08-17',0,0,119,161,'2018-08-18 00:10:00','2018-08-18 00:10:00'),('2018-08-18',0,0,119,220,'2018-08-19 00:10:00','2018-08-19 00:10:00'),('2018-08-19',0,0,102,130,'2018-08-20 00:10:00','2018-08-20 00:10:00'),('2018-08-20',0,0,106,158,'2018-08-21 00:10:00','2018-08-21 00:10:00'),('2018-08-21',0,0,134,210,'2018-08-22 00:10:00','2018-08-22 00:10:00'),('2018-08-22',0,0,128,195,'2018-08-23 00:10:00','2018-08-23 00:10:00'),('2018-08-23',0,0,139,246,'2018-08-24 00:10:00','2018-08-24 00:10:00'),('2018-08-24',0,0,178,345,'2018-08-25 00:10:00','2018-08-25 00:10:00'),('2018-08-25',0,0,181,318,'2018-08-26 00:10:00','2018-08-26 00:10:00'),('2018-08-26',0,0,180,689,'2018-08-27 00:10:00','2018-08-27 00:10:00'),('2018-08-27',0,0,155,289,'2018-08-28 00:10:00','2018-08-28 00:10:00'),('2018-08-28',0,0,209,415,'2018-08-29 00:10:00','2018-08-29 00:10:00'),('2018-08-29',0,0,237,513,'2018-08-30 00:10:00','2018-08-30 00:10:00'),('2018-08-30',0,0,213,365,'2018-08-31 00:10:00','2018-08-31 00:10:00'),('2018-08-31',0,0,142,197,'2018-09-01 00:10:00','2018-09-01 00:10:00'),('2018-09-01',0,0,118,157,'2018-09-02 00:10:00','2018-09-02 00:10:00'),('2018-09-02',0,0,84,192,'2018-09-03 00:10:00','2018-09-03 00:10:00'),('2018-09-03',0,0,92,473,'2018-09-04 00:10:00','2018-09-04 00:10:00'),('2018-09-04',0,0,105,357,'2018-09-05 00:10:00','2018-09-05 00:10:00'),('2018-09-05',0,0,95,217,'2018-09-06 00:10:00','2018-09-06 00:10:00'),('2018-09-06',0,0,122,207,'2018-09-07 00:10:00','2018-09-07 00:10:00'),('2018-09-07',0,0,133,188,'2018-09-08 00:10:00','2018-09-08 00:10:00'),('2018-09-08',0,0,129,528,'2018-09-09 00:10:00','2018-09-09 00:10:00'),('2018-09-09',0,0,100,278,'2018-09-10 00:10:00','2018-09-10 00:10:00'),('2018-09-10',0,0,87,132,'2018-09-11 00:10:00','2018-09-11 00:10:00'),('2018-09-11',0,0,110,311,'2018-09-12 00:10:00','2018-09-12 00:10:00'),('2018-09-12',0,0,111,415,'2018-09-13 00:10:00','2018-09-13 00:10:00'),('2018-09-13',0,0,75,100,'2018-09-14 00:10:00','2018-09-14 00:10:00'),('2018-09-14',0,0,92,161,'2018-09-15 00:10:00','2018-09-15 00:10:00'),('2018-09-15',0,0,112,244,'2018-09-16 00:10:00','2018-09-16 00:10:00'),('2018-09-16',0,0,119,326,'2018-09-17 00:10:00','2018-09-17 00:10:00'),('2018-09-17',0,0,115,323,'2018-09-18 00:10:00','2018-09-18 00:10:00'),('2018-09-18',0,0,108,609,'2018-09-19 00:10:00','2018-09-19 00:10:00'),('2018-09-19',0,0,109,147,'2018-09-20 00:10:00','2018-09-20 00:10:00'),('2018-09-20',0,0,133,332,'2018-09-21 00:10:00','2018-09-21 00:10:00'),('2018-09-21',0,0,106,561,'2018-09-22 00:10:00','2018-09-22 00:10:00'),('2018-09-22',0,0,89,253,'2018-09-23 00:10:00','2018-09-23 00:10:00'),('2018-09-23',0,0,88,421,'2018-09-24 00:10:00','2018-09-24 00:10:00'),('2018-09-24',0,0,105,396,'2018-09-25 00:10:00','2018-09-25 00:10:00'),('2018-09-25',0,0,98,130,'2018-09-26 00:10:00','2018-09-26 00:10:00'),('2018-09-26',0,0,95,340,'2018-09-27 00:10:00','2018-09-27 00:10:00'),('2018-09-27',0,0,114,519,'2018-09-28 00:10:00','2018-09-28 00:10:00'),('2018-09-28',0,0,113,292,'2018-09-29 00:10:00','2018-09-29 00:10:00'),('2018-09-29',0,0,111,228,'2018-09-30 00:10:00','2018-09-30 00:10:00'),('2018-09-30',0,0,95,685,'2018-10-01 00:10:00','2018-10-01 00:10:00'),('2018-10-01',0,0,99,385,'2018-10-02 00:10:00','2018-10-02 00:10:00'),('2018-10-02',0,0,118,860,'2018-10-03 00:10:00','2018-10-03 00:10:00'),('2018-10-03',0,0,94,598,'2018-10-04 00:10:00','2018-10-04 00:10:00'),('2018-10-04',0,0,87,454,'2018-10-05 00:10:00','2018-10-05 00:10:00'),('2018-10-05',0,0,96,821,'2018-10-06 00:10:00','2018-10-06 00:10:00'),('2018-10-06',0,0,85,110,'2018-10-07 00:10:00','2018-10-07 00:10:00'),('2018-10-07',0,0,68,97,'2018-10-08 00:10:00','2018-10-08 00:10:00'),('2018-10-08',0,0,80,165,'2018-10-09 00:10:00','2018-10-09 00:10:00'),('2018-10-09',0,0,97,175,'2018-10-10 00:10:00','2018-10-10 00:10:00'),('2018-10-10',0,0,82,318,'2018-10-11 00:10:00','2018-10-11 00:10:00'),('2018-10-11',0,0,79,229,'2018-10-12 00:10:00','2018-10-12 00:10:00'),('2018-10-12',0,0,79,122,'2018-10-13 00:10:00','2018-10-13 00:10:00'),('2018-10-13',0,0,79,161,'2018-10-14 00:10:00','2018-10-14 00:10:00'),('2018-10-14',0,0,96,224,'2018-10-15 00:10:00','2018-10-15 00:10:00'),('2018-10-15',0,0,110,145,'2018-10-16 00:10:00','2018-10-16 00:10:00'),('2018-10-16',0,0,118,178,'2018-10-17 00:10:00','2018-10-17 00:10:00'),('2018-10-17',0,0,118,227,'2018-10-18 00:10:00','2018-10-18 00:10:00'),('2018-10-18',0,0,131,163,'2018-10-19 00:10:00','2018-10-19 00:10:00'),('2018-10-19',0,0,131,297,'2018-10-20 00:10:00','2018-10-20 00:10:00'),('2018-10-20',0,0,127,271,'2018-10-21 00:10:00','2018-10-21 00:10:00'),('2018-10-21',0,0,117,233,'2018-10-22 00:10:00','2018-10-22 00:10:00'),('2018-10-22',0,0,132,279,'2018-10-23 00:10:00','2018-10-23 00:10:00'),('2018-10-23',0,0,100,273,'2018-10-24 00:10:00','2018-10-24 00:10:00'),('2018-10-24',0,0,88,374,'2018-10-25 00:10:00','2018-10-25 00:10:00'),('2018-10-25',0,0,97,471,'2018-10-26 00:10:00','2018-10-26 00:10:00'),('2018-10-26',0,0,112,493,'2018-10-27 00:10:00','2018-10-27 00:10:00'),('2018-10-27',0,0,115,405,'2018-10-28 00:10:00','2018-10-28 00:10:00'),('2018-10-28',0,0,113,285,'2018-10-29 00:10:00','2018-10-29 00:10:00'),('2018-10-29',0,0,83,352,'2018-10-30 00:10:00','2018-10-30 00:10:00'),('2018-10-30',0,0,128,257,'2018-10-31 00:10:00','2018-10-31 00:10:00'),('2018-10-31',0,0,122,208,'2018-11-01 00:10:00','2018-11-01 00:10:00'),('2018-11-01',0,0,98,131,'2018-11-02 00:10:00','2018-11-02 00:10:00'),('2018-11-02',0,0,112,245,'2018-11-03 00:10:00','2018-11-03 00:10:00'),('2018-11-03',0,0,83,116,'2018-11-04 00:10:00','2018-11-04 00:10:00'),('2018-11-04',0,0,137,188,'2018-11-05 00:10:00','2018-11-05 00:10:00'),('2018-11-05',0,0,133,331,'2018-11-06 00:10:00','2018-11-06 00:10:00'),('2018-11-06',0,0,118,337,'2018-11-07 00:10:00','2018-11-07 00:10:00'),('2018-11-07',0,0,83,157,'2018-11-08 00:10:00','2018-11-08 00:10:00'),('2018-11-08',0,0,105,386,'2018-11-09 00:10:00','2018-11-09 00:10:00'),('2018-11-09',0,0,89,114,'2018-11-10 00:10:00','2018-11-10 00:10:00'),('2018-11-10',0,0,170,324,'2018-11-11 00:10:00','2018-11-11 00:10:00'),('2018-11-11',0,0,116,263,'2018-11-12 00:10:00','2018-11-12 00:10:00'),('2018-11-12',0,0,189,512,'2018-11-13 00:10:00','2018-11-13 00:10:00'),('2018-11-13',0,0,238,438,'2018-11-14 00:10:00','2018-11-14 00:10:00'),('2018-11-14',0,0,136,276,'2018-11-15 00:10:00','2018-11-15 00:10:00'),('2018-11-15',0,0,368,571,'2018-11-16 00:10:00','2018-11-16 00:10:00'),('2018-11-16',0,0,119,167,'2018-11-17 00:10:00','2018-11-17 00:10:00'),('2018-11-17',0,0,148,323,'2018-11-18 00:10:00','2018-11-18 00:10:00'),('2018-11-18',0,0,255,567,'2018-11-19 00:10:00','2018-11-19 00:10:00'),('2018-11-19',0,0,121,213,'2018-11-20 00:10:00','2018-11-20 00:10:00'),('2018-11-20',0,0,134,342,'2018-11-21 00:10:00','2018-11-21 00:10:00'),('2018-11-21',0,0,212,420,'2018-11-22 00:10:00','2018-11-22 00:10:00'),('2018-11-22',0,0,119,247,'2018-11-23 00:10:00','2018-11-23 00:10:00'),('2018-11-23',0,0,130,226,'2018-11-24 00:10:00','2018-11-24 00:10:00'),('2018-11-24',0,0,152,314,'2018-11-25 00:10:00','2018-11-25 00:10:00'),('2018-11-25',0,0,198,572,'2018-11-26 00:10:00','2018-11-26 00:10:00'),('2018-11-26',0,0,86,136,'2018-11-27 00:10:00','2018-11-27 00:10:00'),('2018-11-27',0,0,82,149,'2018-11-28 00:10:00','2018-11-28 00:10:00'),('2018-11-28',0,0,89,126,'2018-11-29 00:10:00','2018-11-29 00:10:00'),('2018-11-29',0,0,88,194,'2018-11-30 00:10:00','2018-11-30 00:10:00'),('2018-11-30',0,0,132,269,'2018-12-01 00:10:00','2018-12-01 00:10:00'),('2018-12-01',0,0,100,213,'2018-12-02 00:10:00','2018-12-02 00:10:00'),('2018-12-02',0,0,68,197,'2018-12-03 00:10:00','2018-12-03 00:10:00'),('2018-12-03',0,0,71,146,'2018-12-04 00:10:00','2018-12-04 00:10:00'),('2018-12-04',0,0,110,253,'2018-12-05 00:10:00','2018-12-05 00:10:00'),('2018-12-05',0,0,140,210,'2018-12-06 00:10:00','2018-12-06 00:10:00'),('2018-12-06',0,0,90,238,'2018-12-07 00:10:00','2018-12-07 00:10:00'),('2018-12-07',0,0,139,260,'2018-12-08 00:10:00','2018-12-08 00:10:00'),('2018-12-08',0,0,167,213,'2018-12-09 00:10:00','2018-12-09 00:10:00'),('2018-12-09',0,0,120,202,'2018-12-10 00:10:00','2018-12-10 00:10:00'),('2018-12-10',0,0,158,327,'2018-12-11 00:10:00','2018-12-11 00:10:00'),('2018-12-11',0,0,123,247,'2018-12-12 00:10:00','2018-12-12 00:10:00'),('2018-12-12',0,0,204,306,'2018-12-13 00:10:00','2018-12-13 00:10:00'),('2018-12-13',0,0,161,235,'2018-12-14 00:10:00','2018-12-14 00:10:00'),('2018-12-14',0,0,187,238,'2018-12-15 00:10:00','2018-12-15 00:10:00'),('2018-12-15',0,0,148,251,'2018-12-16 00:10:00','2018-12-16 00:10:00'),('2018-12-16',0,0,136,185,'2018-12-17 00:10:00','2018-12-17 00:10:00'),('2018-12-17',0,0,128,194,'2018-12-18 00:10:00','2018-12-18 00:10:00'),('2018-12-18',0,0,115,241,'2018-12-19 00:10:00','2018-12-19 00:10:00'),('2018-12-19',0,0,121,202,'2018-12-20 00:10:00','2018-12-20 00:10:00'),('2018-12-20',0,0,100,146,'2018-12-21 00:10:00','2018-12-21 00:10:00'),('2018-12-21',0,0,102,366,'2018-12-22 00:10:00','2018-12-22 00:10:00'),('2018-12-22',0,0,78,121,'2018-12-23 00:10:00','2018-12-23 00:10:00'),('2018-12-23',0,0,94,123,'2018-12-24 00:10:00','2018-12-24 00:10:00'),('2018-12-24',0,0,126,232,'2018-12-25 00:10:00','2018-12-25 00:10:00'),('2018-12-25',0,0,115,478,'2018-12-26 00:10:00','2018-12-26 00:10:00'),('2018-12-26',0,0,95,337,'2018-12-27 00:10:00','2018-12-27 00:10:00'),('2018-12-27',0,0,86,154,'2018-12-28 00:10:00','2018-12-28 00:10:00'),('2018-12-28',0,0,70,160,'2018-12-29 00:10:00','2018-12-29 00:10:00'),('2018-12-29',0,0,88,411,'2018-12-30 00:10:00','2018-12-30 00:10:00'),('2018-12-30',0,0,73,143,'2018-12-31 00:10:00','2018-12-31 00:10:00'),('2018-12-31',0,0,100,134,'2019-01-01 00:10:00','2019-01-01 00:10:00'),('2019-01-01',0,0,122,179,'2019-01-02 00:10:00','2019-01-02 00:10:00'),('2019-01-02',0,0,146,329,'2019-01-03 00:10:00','2019-01-03 00:10:00'),('2019-01-03',0,0,92,117,'2019-01-04 00:10:00','2019-01-04 00:10:00'),('2019-01-04',0,0,87,238,'2019-01-05 00:10:00','2019-01-05 00:10:00'),('2019-01-05',0,0,110,188,'2019-01-06 00:10:00','2019-01-06 00:10:00'),('2019-01-06',0,0,98,122,'2019-01-07 00:10:00','2019-01-07 00:10:00');
/*!40000 ALTER TABLE `statistics` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `tag`
--

DROP TABLE IF EXISTS `tag`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `tag` (
  `tag_id` varchar(32) NOT NULL,
  `gmt_create` datetime NOT NULL,
  `gmt_modified` datetime NOT NULL,
  `title` varchar(256) DEFAULT NULL,
  `type` varchar(128) DEFAULT NULL,
  `slug` varchar(128) DEFAULT NULL,
  PRIMARY KEY (`tag_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `tag`
--

LOCK TABLES `tag` WRITE;
/*!40000 ALTER TABLE `tag` DISABLE KEYS */;
INSERT INTO `tag` VALUES ('TAG20180130071434168','2018-01-30 19:14:34','2018-01-30 19:14:34','java','文章','TAG20180130071434168'),('TAG20180130071434182','2018-01-30 19:14:34','2018-01-30 19:14:34','代理','文章','TAG20180130071434182'),('TAG20180130071434189','2018-01-30 19:14:34','2018-01-30 19:14:34','动态','文章','TAG20180130071434189'),('TAG20180130071757247','2018-01-30 19:17:57','2018-01-30 19:17:57','西安','照片','TAG20180130071757247'),('TAG20180130071757253','2018-01-30 19:17:57','2018-01-30 19:17:57','兵马俑','照片','TAG20180130071757253'),('TAG20180130072357898','2018-01-30 19:23:57','2018-01-30 19:23:57','下班','照片','TAG20180130072357898'),('TAG20180131034800807','2018-01-31 15:48:00','2018-01-31 15:48:00','生活','照片','TAG20180131034800807'),('TAG20180201051402495','2018-02-01 17:14:02','2018-02-01 17:14:02','春','照片','TAG20180201051402495'),('TAG20180202081623905','2018-02-02 20:16:23','2018-02-02 20:16:23','秋','照片','TAG20180202081623905'),('TAG20180202081623926','2018-02-02 20:16:23','2018-02-02 20:16:23','大雁塔','照片','TAG20180202081623926'),('TAG20180202081929746','2018-02-02 20:19:29','2018-02-02 20:19:29','上海','照片','TAG20180202081929746'),('TAG20180202082141243','2018-02-02 20:21:41','2018-02-02 20:21:41','杭州','照片','TAG20180202082141243'),('TAG20180202082141253','2018-02-02 20:21:41','2018-02-02 20:21:41','西湖','照片','TAG20180202082141253'),('TAG20180202082141261','2018-02-02 20:21:41','2018-02-02 20:21:41','浙大','照片','TAG20180202082141261'),('TAG20180202082141273','2018-02-02 20:21:41','2018-02-02 20:21:41','荷','照片','TAG20180202082141273'),('TAG20180202082323126','2018-02-02 20:23:23','2018-02-02 20:23:23','迪士尼','照片','TAG20180202082323126'),('TAG20180202082733276','2018-02-02 20:27:33','2018-02-02 20:27:33','外滩','照片','TAG20180202082733276'),('TAG20180202082733288','2018-02-02 20:27:33','2018-02-02 20:27:33','夜','照片','TAG20180202082733288'),('TAG20180202082849154','2018-02-02 20:28:49','2018-02-02 20:28:49','曲江池','照片','TAG20180202082849154'),('TAG20180202083342944','2018-02-02 20:33:42','2018-02-02 20:33:42','校园','照片','TAG20180202083342944'),('TAG20180202083505371','2018-02-02 20:35:05','2018-02-02 20:35:05','日出','照片','TAG20180202083505371'),('TAG20180202083505374','2018-02-02 20:35:05','2018-02-02 20:35:05','华山','照片','TAG20180202083505374'),('TAG20180202083914912','2018-02-02 20:39:14','2018-02-02 20:39:14','洛阳','照片','TAG20180202083914912'),('TAG20180202083914915','2018-02-02 20:39:14','2018-02-02 20:39:14','龙门石窟','照片','TAG20180202083914915'),('TAG20180202084550497','2018-02-02 20:45:50','2018-02-02 20:45:50','花','照片','TAG20180202084550497'),('TAG20180202085127504','2018-02-02 20:51:27','2018-02-02 20:51:27','书','照片','TAG20180202085127504'),('TAG20180202090640263','2018-02-02 21:06:40','2018-02-02 21:06:40','成都','照片','TAG20180202090640263'),('TAG20180202090640266','2018-02-02 21:06:40','2018-02-02 21:06:40','人民公园','照片','TAG20180202090640266'),('TAG20180210042609470','2018-02-10 16:26:09','2018-02-10 16:26:09','静态','文章','TAG20180210042609470'),('TAG20180210043704922','2018-02-10 16:37:04','2018-02-10 16:37:04','linux','文章','TAG20180210043704922'),('TAG20180210043704925','2018-02-10 16:37:04','2018-02-10 16:37:04','数据库','文章','TAG20180210043704925'),('TAG20180210043704928','2018-02-10 16:37:04','2018-02-10 16:37:04','mariadb','文章','TAG20180210043704928'),('TAG20180210043704942','2018-02-10 16:37:04','2018-02-10 16:37:04','mysql','文章','TAG20180210043704942'),('TAG20180210043704949','2018-02-10 16:37:04','2018-02-10 16:37:04','字符集','文章','TAG20180210043704949'),('TAG20180210044902752','2018-02-10 16:49:02','2018-02-10 16:49:02','家乡','照片','TAG20180210044902752'),('TAG20180210044902761','2018-02-10 16:49:02','2018-02-10 16:49:02','雪','照片','TAG20180210044902761'),('TAG20180210052552929','2018-02-10 17:25:52','2018-02-10 17:25:52','Springboot','文章','TAG20180210052552929'),('TAG20180210052552931','2018-02-10 17:25:52','2018-02-10 17:25:52','部署','文章','TAG20180210052552931'),('TAG20180221051845158','2018-02-21 17:18:45','2018-02-21 17:18:45','fastjson','文章','TAG20180221051845158'),('TAG20180221051845198','2018-02-21 17:18:45','2018-02-21 17:18:45','乱码','文章','TAG20180221051845198'),('TAG20180222104208815','2018-02-22 10:42:08','2018-02-22 10:42:08','热部署','文章','TAG20180222104208815'),('TAG20180223085118198','2018-02-23 20:51:18','2018-02-23 20:51:18','异常','文章','TAG20180223085118198'),('TAG20180225030612913','2018-02-25 15:06:12','2018-02-25 15:06:12','定时任务','文章','TAG20180225030612913'),('TAG20180228024401015','2018-02-28 14:44:01','2018-02-28 14:44:01','Mybatis','文章','TAG20180228024401015'),('TAG20180329030101525','2018-03-29 15:01:01','2018-03-29 15:01:01','规划','文章','TAG20180329030101525'),('TAG20180406081124994','2018-04-06 20:11:24','2018-04-06 20:11:24','设计模式','文章','TAG20180406081124994'),('TAG20180406081124998','2018-04-06 20:11:24','2018-04-06 20:11:24','策略模式','文章','TAG20180406081124998'),('TAG20180407063327380','2018-04-07 18:33:27','2018-04-07 18:33:27','观察者模式','文章','TAG20180407063327380'),('TAG20180408052716202','2018-04-08 17:27:16','2018-04-08 17:27:16','装饰者模式','文章','TAG20180408052716202'),('TAG20180409023347129','2018-04-09 14:33:47','2018-04-09 14:33:47','单例模式','文章','TAG20180409023347129'),('TAG20180410053932043','2018-04-10 17:39:32','2018-04-10 17:39:32','简单工厂','文章','TAG20180410053932043'),('TAG20180411032005675','2018-04-11 15:20:05','2018-04-11 15:20:05','工厂方法模式','文章','TAG20180411032005675'),('TAG20180412064841712','2018-04-12 18:48:41','2018-04-12 18:48:41','抽象工厂','文章','TAG20180412064841712'),('TAG20180413050833803','2018-04-13 17:08:33','2018-04-13 17:08:33','命令模式','文章','TAG20180413050833803'),('TAG20180414032907234','2018-04-14 15:29:07','2018-04-14 15:29:07','适配器模式','文章','TAG20180414032907234'),('TAG20180415023014923','2018-04-15 14:30:14','2018-04-15 14:30:14','外观模式','文章','TAG20180415023014923'),('TAG20180416010939297','2018-04-16 13:09:39','2018-04-16 13:09:39','模板模式','文章','TAG20180416010939297'),('TAG20180416120804552','2018-04-16 12:08:04','2018-04-16 12:08:04','WOOP','文章','TAG20180416120804552'),('TAG20180417031324377','2018-04-17 15:13:24','2018-04-17 15:13:24','迭代器模式','文章','TAG20180417031324377'),('TAG20180419125727483','2018-04-19 12:57:27','2018-04-19 12:57:27','组合模式','文章','TAG20180419125727483'),('TAG20180420073600318','2018-04-20 19:36:00','2018-04-20 19:36:00','状态模式','文章','TAG20180420073600318'),('TAG20180422043104205','2018-04-22 16:31:04','2018-04-22 16:31:04','代理模式','文章','TAG20180422043104205'),('TAG20180423081637718','2018-04-23 20:16:37','2018-04-23 20:16:37','桥接模式','文章','TAG20180423081637718'),('TAG20180424051520870','2018-04-24 17:15:20','2018-04-24 17:15:20','建造者模式','文章','TAG20180424051520870'),('TAG20180509060141997','2018-05-09 18:01:41','2018-05-09 18:01:41','责任链模式','文章','TAG20180509060141997'),('TAG20180510103112460','2018-05-10 22:31:12','2018-05-10 22:31:12','大唐芙蓉园','照片','TAG20180510103112460');
/*!40000 ALTER TABLE `tag` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `taxonomy`
--

DROP TABLE IF EXISTS `taxonomy`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `taxonomy` (
  `taxonomy_id` varchar(32) NOT NULL,
  `gmt_create` datetime NOT NULL,
  `gmt_modified` datetime NOT NULL,
  `title` varchar(128) DEFAULT NULL,
  `text` varchar(256) DEFAULT NULL COMMENT 'ÄÚÈÝÃèÊö',
  `slug` varchar(128) DEFAULT NULL,
  `article_count` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '¸ÃÀàÐÍÄÚÈÝÊýÁ¿',
  `status` varchar(32) DEFAULT NULL,
  PRIMARY KEY (`taxonomy_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `taxonomy`
--

LOCK TABLES `taxonomy` WRITE;
/*!40000 ALTER TABLE `taxonomy` DISABLE KEYS */;
INSERT INTO `taxonomy` VALUES ('TAX20180129062052324','2018-01-29 18:20:52','2018-01-29 18:20:52','java','java','TAX20180129062052324',2,'正常'),('TAX20180210043408433','2018-02-10 16:34:08','2018-02-10 16:34:08','Linux','Linux','TAX20180210043408433',2,'正常'),('TAX20180210053014072','2018-02-10 17:30:14','2018-02-10 17:30:25','Springboot','Springboot','TAX20180210053014072',7,'正常'),('TAX20180329053014072','2018-03-29 15:00:14','2018-03-29 15:00:14','规划','规划','TAX20180329053014072',30,'正常'),('TAX20180406053014072','2018-04-06 20:10:14','2018-04-06 20:10:14','设计模式','设计模式','TAX20180406053014072',19,'正常'),('TAX20180416120614072','2018-04-16 12:07:14','2018-04-16 12:07:14','WOOP','WOOP','TAX20180416120614072',1,'正常');
/*!40000 ALTER TABLE `taxonomy` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `weboption`
--

DROP TABLE IF EXISTS `weboption`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `weboption` (
  `option_id` bigint(20) NOT NULL AUTO_INCREMENT,
  `option_key` varchar(256) NOT NULL,
  `option_value` varchar(2048) DEFAULT NULL,
  `gmt_create` datetime NOT NULL,
  `gmt_modified` datetime NOT NULL,
  PRIMARY KEY (`option_id`)
) ENGINE=InnoDB AUTO_INCREMENT=17 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `weboption`
--

LOCK TABLES `weboption` WRITE;
/*!40000 ALTER TABLE `weboption` DISABLE KEYS */;
INSERT INTO `weboption` VALUES (1,'qq','1432316254','2018-01-23 00:00:00','2018-01-23 00:00:00'),(2,'email','1432316254@qq.com','2018-01-23 00:00:00','2018-01-23 00:00:00'),(3,'about','我是特轮渡司机，一个菜鸟程序员，学习编程时间也不久，在学习的道路上，承蒙各路大神多多指教','2018-01-23 00:00:00','2018-01-23 00:00:00'),(4,'copyRight','COPYRIGHT © 2018 - 特轮渡司机 | ALL RIGHTS RESERVED | 备案号：陕ICP备17020172号','2018-01-23 00:00:00','2018-01-23 00:00:00'),(5,'description','一个相信奇迹的程序员','2018-01-23 00:00:00','2018-01-23 00:00:00'),(6,'webName','Miracle','2018-01-23 00:00:00','2018-01-23 00:00:00'),(7,'username','root','2018-01-23 00:00:00','2018-01-23 00:00:00'),(8,'password','2470893279','2018-01-23 00:00:00','2018-01-23 00:00:00'),(9,'FTPHost','115.28.228.72','2018-01-28 00:00:00','2018-01-28 00:00:00'),(10,'FTPPort','21','2018-01-28 00:00:00','2018-01-28 00:00:00'),(11,'FTPUsername','img','2018-01-28 00:00:00','2018-01-28 00:00:00'),(12,'FTPPassword','2470893279','2018-01-28 00:00:00','2018-01-28 00:00:00'),(13,'FTPBasePath','/ftpuser/img','2018-01-28 00:00:00','2018-01-28 00:00:00'),(14,'imgServerHost','http://te-amo.site:8090','2018-01-28 00:00:00','2018-01-28 00:00:00'),(15,'workingPath','/usr/local/apps/miracle','2018-02-02 00:00:00','2018-02-02 00:00:00'),(16,'tweet','特轮渡司机','2018-02-10 00:00:00','2018-02-10 00:00:00');
/*!40000 ALTER TABLE `weboption` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2019-01-07 20:20:11
